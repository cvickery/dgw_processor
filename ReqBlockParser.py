# Generated from ReqBlock.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3k")
        buf.write("\u03ac\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\3\2")
        buf.write("\7\2\u009a\n\2\f\2\16\2\u009d\13\2\3\2\3\2\3\2\3\2\5\2")
        buf.write("\u00a3\n\2\3\2\3\2\7\2\u00a7\n\2\f\2\16\2\u00aa\13\2\3")
        buf.write("\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\7\3\u00c3\n\3\f\3")
        buf.write("\16\3\u00c6\13\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\7\4\u00d3\n\4\f\4\16\4\u00d6\13\4\3\5\5\5\u00d9")
        buf.write("\n\5\3\5\3\5\5\5\u00dd\n\5\3\5\3\5\5\5\u00e1\n\5\3\5\5")
        buf.write("\5\u00e4\n\5\3\5\3\5\5\5\u00e8\n\5\3\6\3\6\3\6\5\6\u00ed")
        buf.write("\n\6\7\6\u00ef\n\6\f\6\16\6\u00f2\13\6\3\6\5\6\u00f5\n")
        buf.write("\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00fe\n\7\3\b\3\b\3")
        buf.write("\b\5\b\u0103\n\b\7\b\u0105\n\b\f\b\16\b\u0108\13\b\3\b")
        buf.write("\5\b\u010b\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\5\t\u011b\n\t\3\n\3\n\3\n\7\n\u0120\n")
        buf.write("\n\f\n\16\n\u0123\13\n\3\13\5\13\u0126\n\13\3\13\5\13")
        buf.write("\u0129\n\13\3\13\3\13\7\13\u012d\n\13\f\13\16\13\u0130")
        buf.write("\13\13\3\13\5\13\u0133\n\13\3\f\3\f\5\f\u0137\n\f\3\f")
        buf.write("\3\f\6\f\u013b\n\f\r\f\16\f\u013c\3\r\3\r\5\r\u0141\n")
        buf.write("\r\3\r\3\r\6\r\u0145\n\r\r\r\16\r\u0146\3\16\3\16\3\16")
        buf.write("\3\16\5\16\u014d\n\16\3\17\3\17\3\17\3\17\3\17\5\17\u0154")
        buf.write("\n\17\3\20\3\20\3\20\3\20\3\20\5\20\u015b\n\20\3\20\7")
        buf.write("\20\u015e\n\20\f\20\16\20\u0161\13\20\3\20\5\20\u0164")
        buf.write("\n\20\3\20\5\20\u0167\n\20\3\21\3\21\3\21\5\21\u016c\n")
        buf.write("\21\3\21\7\21\u016f\n\21\f\21\16\21\u0172\13\21\3\21\5")
        buf.write("\21\u0175\n\21\3\22\3\22\6\22\u0179\n\22\r\22\16\22\u017a")
        buf.write("\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0191")
        buf.write("\n\23\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\26\7\26\u019b")
        buf.write("\n\26\f\26\16\26\u019e\13\26\3\26\5\26\u01a1\n\26\3\27")
        buf.write("\3\27\3\27\3\27\7\27\u01a7\n\27\f\27\16\27\u01aa\13\27")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u01b4\n")
        buf.write("\30\3\30\7\30\u01b7\n\30\f\30\16\30\u01ba\13\30\3\30\5")
        buf.write("\30\u01bd\n\30\3\30\3\30\7\30\u01c1\n\30\f\30\16\30\u01c4")
        buf.write("\13\30\3\30\5\30\u01c7\n\30\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\5\31\u01d4\n\31\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u01e0\n")
        buf.write("\32\3\32\5\32\u01e3\n\32\6\32\u01e5\n\32\r\32\16\32\u01e6")
        buf.write("\3\32\3\32\7\32\u01eb\n\32\f\32\16\32\u01ee\13\32\3\32")
        buf.write("\5\32\u01f1\n\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\5\33\u01fd\n\33\3\34\3\34\3\34\3\34\5\34")
        buf.write("\u0203\n\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\36\3")
        buf.write("\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\5\37")
        buf.write("\u0217\n\37\3\37\3\37\3\37\3\37\7\37\u021d\n\37\f\37\16")
        buf.write("\37\u0220\13\37\3\37\7\37\u0223\n\37\f\37\16\37\u0226")
        buf.write("\13\37\3\37\5\37\u0229\n\37\3 \3 \3 \3 \3 \3 \5 \u0231")
        buf.write("\n \3 \3 \3 \5 \u0236\n \3 \3 \3 \3 \7 \u023c\n \f \16")
        buf.write(" \u023f\13 \3 \7 \u0242\n \f \16 \u0245\13 \3 \5 \u0248")
        buf.write("\n \3!\3!\3\"\3\"\3\"\5\"\u024f\n\"\3#\3#\3#\5#\u0254")
        buf.write("\n#\3$\3$\3$\3%\3%\3%\3&\3&\3&\3\'\3\'\3\'\5\'\u0262\n")
        buf.write("\'\3(\3(\3(\3(\5(\u0268\n(\3(\3(\5(\u026c\n(\3(\5(\u026f")
        buf.write("\n(\3(\7(\u0272\n(\f(\16(\u0275\13(\3(\5(\u0278\n(\3)")
        buf.write("\3)\3)\5)\u027d\n)\3)\5)\u0280\n)\3*\3*\3*\5*\u0285\n")
        buf.write("*\3*\5*\u0288\n*\3+\3+\3+\3+\5+\u028e\n+\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\7,\u0298\n,\f,\16,\u029b\13,\3,\3,\5,\u029f")
        buf.write("\n,\3-\3-\3-\5-\u02a4\n-\3.\3.\3.\3.\3.\5.\u02ab\n.\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\7/\u02b5\n/\f/\16/\u02b8\13/\3")
        buf.write("/\5/\u02bb\n/\3/\5/\u02be\n/\3\60\3\60\3\60\5\60\u02c3")
        buf.write("\n\60\3\61\3\61\3\61\3\61\5\61\u02c9\n\61\3\61\7\61\u02cc")
        buf.write("\n\61\f\61\16\61\u02cf\13\61\3\61\5\61\u02d2\n\61\3\62")
        buf.write("\3\62\3\62\3\62\5\62\u02d8\n\62\3\62\7\62\u02db\n\62\f")
        buf.write("\62\16\62\u02de\13\62\3\62\5\62\u02e1\n\62\3\63\3\63\3")
        buf.write("\63\3\63\5\63\u02e7\n\63\3\63\5\63\u02ea\n\63\3\63\7\63")
        buf.write("\u02ed\n\63\f\63\16\63\u02f0\13\63\3\63\5\63\u02f3\n\63")
        buf.write("\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\7\65\u0300\n\65\f\65\16\65\u0303\13\65\3\65\3\65\5\65")
        buf.write("\u0307\n\65\3\65\7\65\u030a\n\65\f\65\16\65\u030d\13\65")
        buf.write("\3\66\3\66\3\66\3\66\7\66\u0313\n\66\f\66\16\66\u0316")
        buf.write("\13\66\3\66\5\66\u0319\n\66\3\66\5\66\u031c\n\66\3\67")
        buf.write("\3\67\3\67\5\67\u0321\n\67\38\38\38\38\58\u0327\n8\38")
        buf.write("\58\u032a\n8\38\78\u032d\n8\f8\168\u0330\138\39\39\39")
        buf.write("\39\39\39\59\u0338\n9\3:\3:\3:\3:\3;\3;\3<\3<\3=\3=\3")
        buf.write("=\5=\u0345\n=\3=\7=\u0348\n=\f=\16=\u034b\13=\3>\3>\5")
        buf.write(">\u034f\n>\3?\3?\3?\3@\3@\3@\5@\u0357\n@\3A\3A\3A\5A\u035c")
        buf.write("\nA\3A\5A\u035f\nA\3A\5A\u0362\nA\3B\3B\3C\3C\3D\3D\3")
        buf.write("E\3E\3E\5E\u036d\nE\3F\3F\3F\3F\3F\5F\u0374\nF\3F\7F\u0377")
        buf.write("\nF\fF\16F\u037a\13F\3F\3F\3G\3G\3G\3G\3G\3H\3H\3H\3H")
        buf.write("\3H\3H\3H\3H\3H\3H\5H\u038d\nH\3H\3H\3H\5H\u0392\nH\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\7H\u039f\nH\fH\16H\u03a2")
        buf.write("\13H\3I\3I\3J\3J\3K\3K\3L\3L\3L\4\u009b\u00a8\3\u008e")
        buf.write("M\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\2\16\3\2BC\3\2EF\4\2\27\27\31\31\4\2\3\3PP\3\2")
        buf.write("\66\67\3\29:\4\2\32\32==\4\2MNPP\3\2KL\6\2HIZ\\_`cc\4")
        buf.write("\2LLXX\4\2KKee\2\u044a\2\u009b\3\2\2\2\4\u00c4\3\2\2\2")
        buf.write("\6\u00d4\3\2\2\2\b\u00d8\3\2\2\2\n\u00e9\3\2\2\2\f\u00fd")
        buf.write("\3\2\2\2\16\u00ff\3\2\2\2\20\u011a\3\2\2\2\22\u011c\3")
        buf.write("\2\2\2\24\u0125\3\2\2\2\26\u013a\3\2\2\2\30\u0144\3\2")
        buf.write("\2\2\32\u014c\3\2\2\2\34\u0153\3\2\2\2\36\u0155\3\2\2")
        buf.write("\2 \u0168\3\2\2\2\"\u0176\3\2\2\2$\u0190\3\2\2\2&\u0192")
        buf.write("\3\2\2\2(\u0194\3\2\2\2*\u0196\3\2\2\2,\u01a2\3\2\2\2")
        buf.write(".\u01ab\3\2\2\2\60\u01d3\3\2\2\2\62\u01d5\3\2\2\2\64\u01fc")
        buf.write("\3\2\2\2\66\u01fe\3\2\2\28\u0206\3\2\2\2:\u020b\3\2\2")
        buf.write("\2<\u0210\3\2\2\2>\u022a\3\2\2\2@\u0249\3\2\2\2B\u024b")
        buf.write("\3\2\2\2D\u0250\3\2\2\2F\u0255\3\2\2\2H\u0258\3\2\2\2")
        buf.write("J\u025b\3\2\2\2L\u025e\3\2\2\2N\u0263\3\2\2\2P\u0279\3")
        buf.write("\2\2\2R\u0281\3\2\2\2T\u0289\3\2\2\2V\u028f\3\2\2\2X\u02a0")
        buf.write("\3\2\2\2Z\u02a5\3\2\2\2\\\u02ac\3\2\2\2^\u02bf\3\2\2\2")
        buf.write("`\u02c4\3\2\2\2b\u02d3\3\2\2\2d\u02e2\3\2\2\2f\u02f4\3")
        buf.write("\2\2\2h\u02f7\3\2\2\2j\u030e\3\2\2\2l\u031d\3\2\2\2n\u0322")
        buf.write("\3\2\2\2p\u0331\3\2\2\2r\u0339\3\2\2\2t\u033d\3\2\2\2")
        buf.write("v\u033f\3\2\2\2x\u0341\3\2\2\2z\u034c\3\2\2\2|\u0350\3")
        buf.write("\2\2\2~\u0353\3\2\2\2\u0080\u0358\3\2\2\2\u0082\u0363")
        buf.write("\3\2\2\2\u0084\u0365\3\2\2\2\u0086\u0367\3\2\2\2\u0088")
        buf.write("\u0369\3\2\2\2\u008a\u036e\3\2\2\2\u008c\u037d\3\2\2\2")
        buf.write("\u008e\u0391\3\2\2\2\u0090\u03a3\3\2\2\2\u0092\u03a5\3")
        buf.write("\2\2\2\u0094\u03a7\3\2\2\2\u0096\u03a9\3\2\2\2\u0098\u009a")
        buf.write("\13\2\2\2\u0099\u0098\3\2\2\2\u009a\u009d\3\2\2\2\u009b")
        buf.write("\u009c\3\2\2\2\u009b\u0099\3\2\2\2\u009c\u009e\3\2\2\2")
        buf.write("\u009d\u009b\3\2\2\2\u009e\u009f\7\23\2\2\u009f\u00a2")
        buf.write("\5\4\3\2\u00a0\u00a1\7i\2\2\u00a1\u00a3\5\6\4\2\u00a2")
        buf.write("\u00a0\3\2\2\2\u00a2\u00a3\3\2\2\2\u00a3\u00a4\3\2\2\2")
        buf.write("\u00a4\u00a8\7\33\2\2\u00a5\u00a7\13\2\2\2\u00a6\u00a5")
        buf.write("\3\2\2\2\u00a7\u00aa\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a8")
        buf.write("\u00a6\3\2\2\2\u00a9\u00ab\3\2\2\2\u00aa\u00a8\3\2\2\2")
        buf.write("\u00ab\u00ac\7\2\2\3\u00ac\3\3\2\2\2\u00ad\u00c3\5<\37")
        buf.write("\2\u00ae\u00c3\5\36\20\2\u00af\u00c3\5N(\2\u00b0\u00c3")
        buf.write("\5P)\2\u00b1\u00c3\5R*\2\u00b2\u00c3\5T+\2\u00b3\u00c3")
        buf.write("\5V,\2\u00b4\u00c3\5Z.\2\u00b5\u00c3\5\\/\2\u00b6\u00c3")
        buf.write("\5f\64\2\u00b7\u00c3\5`\61\2\u00b8\u00c3\5b\62\2\u00b9")
        buf.write("\u00c3\5d\63\2\u00ba\u00c3\5h\65\2\u00bb\u00c3\5j\66\2")
        buf.write("\u00bc\u00c3\5t;\2\u00bd\u00c3\5x=\2\u00be\u00c3\5\u0080")
        buf.write("A\2\u00bf\u00c3\5\u0082B\2\u00c0\u00c3\5\62\32\2\u00c1")
        buf.write("\u00c3\5\u008aF\2\u00c2\u00ad\3\2\2\2\u00c2\u00ae\3\2")
        buf.write("\2\2\u00c2\u00af\3\2\2\2\u00c2\u00b0\3\2\2\2\u00c2\u00b1")
        buf.write("\3\2\2\2\u00c2\u00b2\3\2\2\2\u00c2\u00b3\3\2\2\2\u00c2")
        buf.write("\u00b4\3\2\2\2\u00c2\u00b5\3\2\2\2\u00c2\u00b6\3\2\2\2")
        buf.write("\u00c2\u00b7\3\2\2\2\u00c2\u00b8\3\2\2\2\u00c2\u00b9\3")
        buf.write("\2\2\2\u00c2\u00ba\3\2\2\2\u00c2\u00bb\3\2\2\2\u00c2\u00bc")
        buf.write("\3\2\2\2\u00c2\u00bd\3\2\2\2\u00c2\u00be\3\2\2\2\u00c2")
        buf.write("\u00bf\3\2\2\2\u00c2\u00c0\3\2\2\2\u00c2\u00c1\3\2\2\2")
        buf.write("\u00c3\u00c6\3\2\2\2\u00c4\u00c2\3\2\2\2\u00c4\u00c5\3")
        buf.write("\2\2\2\u00c5\5\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c7\u00d3")
        buf.write("\5\66\34\2\u00c8\u00d3\58\35\2\u00c9\u00d3\5> \2\u00ca")
        buf.write("\u00d3\5B\"\2\u00cb\u00d3\5*\26\2\u00cc\u00d3\5\36\20")
        buf.write("\2\u00cd\u00d3\5L\'\2\u00ce\u00d3\5p9\2\u00cf\u00d3\5")
        buf.write("x=\2\u00d0\u00d3\5z>\2\u00d1\u00d3\5\62\32\2\u00d2\u00c7")
        buf.write("\3\2\2\2\u00d2\u00c8\3\2\2\2\u00d2\u00c9\3\2\2\2\u00d2")
        buf.write("\u00ca\3\2\2\2\u00d2\u00cb\3\2\2\2\u00d2\u00cc\3\2\2\2")
        buf.write("\u00d2\u00cd\3\2\2\2\u00d2\u00ce\3\2\2\2\u00d2\u00cf\3")
        buf.write("\2\2\2\u00d2\u00d0\3\2\2\2\u00d2\u00d1\3\2\2\2\u00d3\u00d6")
        buf.write("\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5")
        buf.write("\7\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d7\u00d9\7b\2\2\u00d8")
        buf.write("\u00d7\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00da\3\2\2\2")
        buf.write("\u00da\u00dc\5\24\13\2\u00db\u00dd\7h\2\2\u00dc\u00db")
        buf.write("\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00e0\3\2\2\2\u00de")
        buf.write("\u00e1\5\26\f\2\u00df\u00e1\5\30\r\2\u00e0\u00de\3\2\2")
        buf.write("\2\u00e0\u00df\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00e3")
        buf.write("\3\2\2\2\u00e2\u00e4\7h\2\2\u00e3\u00e2\3\2\2\2\u00e3")
        buf.write("\u00e4\3\2\2\2\u00e4\u00e7\3\2\2\2\u00e5\u00e8\5F$\2\u00e6")
        buf.write("\u00e8\5J&\2\u00e7\u00e5\3\2\2\2\u00e7\u00e6\3\2\2\2\u00e7")
        buf.write("\u00e8\3\2\2\2\u00e8\t\3\2\2\2\u00e9\u00f0\5\b\5\2\u00ea")
        buf.write("\u00ec\5\f\7\2\u00eb\u00ed\5\u0088E\2\u00ec\u00eb\3\2")
        buf.write("\2\2\u00ec\u00ed\3\2\2\2\u00ed\u00ef\3\2\2\2\u00ee\u00ea")
        buf.write("\3\2\2\2\u00ef\u00f2\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f0")
        buf.write("\u00f1\3\2\2\2\u00f1\u00f4\3\2\2\2\u00f2\u00f0\3\2\2\2")
        buf.write("\u00f3\u00f5\5L\'\2\u00f4\u00f3\3\2\2\2\u00f4\u00f5\3")
        buf.write("\2\2\2\u00f5\13\3\2\2\2\u00f6\u00fe\5X-\2\u00f7\u00fe")
        buf.write("\5d\63\2\u00f8\u00fe\5f\64\2\u00f9\u00fe\5l\67\2\u00fa")
        buf.write("\u00fe\5H%\2\u00fb\u00fe\5~@\2\u00fc\u00fe\5\u0080A\2")
        buf.write("\u00fd\u00f6\3\2\2\2\u00fd\u00f7\3\2\2\2\u00fd\u00f8\3")
        buf.write("\2\2\2\u00fd\u00f9\3\2\2\2\u00fd\u00fa\3\2\2\2\u00fd\u00fb")
        buf.write("\3\2\2\2\u00fd\u00fc\3\2\2\2\u00fe\r\3\2\2\2\u00ff\u0106")
        buf.write("\5\b\5\2\u0100\u0102\5\20\t\2\u0101\u0103\5\u0088E\2\u0102")
        buf.write("\u0101\3\2\2\2\u0102\u0103\3\2\2\2\u0103\u0105\3\2\2\2")
        buf.write("\u0104\u0100\3\2\2\2\u0105\u0108\3\2\2\2\u0106\u0104\3")
        buf.write("\2\2\2\u0106\u0107\3\2\2\2\u0107\u010a\3\2\2\2\u0108\u0106")
        buf.write("\3\2\2\2\u0109\u010b\5L\'\2\u010a\u0109\3\2\2\2\u010a")
        buf.write("\u010b\3\2\2\2\u010b\17\3\2\2\2\u010c\u011b\5T+\2\u010d")
        buf.write("\u011b\5V,\2\u010e\u011b\5X-\2\u010f\u011b\5\\/\2\u0110")
        buf.write("\u011b\5^\60\2\u0111\u011b\5`\61\2\u0112\u011b\5b\62\2")
        buf.write("\u0113\u011b\5d\63\2\u0114\u011b\5f\64\2\u0115\u011b\5")
        buf.write("h\65\2\u0116\u011b\5l\67\2\u0117\u011b\5|?\2\u0118\u011b")
        buf.write("\5~@\2\u0119\u011b\5\u0080A\2\u011a\u010c\3\2\2\2\u011a")
        buf.write("\u010d\3\2\2\2\u011a\u010e\3\2\2\2\u011a\u010f\3\2\2\2")
        buf.write("\u011a\u0110\3\2\2\2\u011a\u0111\3\2\2\2\u011a\u0112\3")
        buf.write("\2\2\2\u011a\u0113\3\2\2\2\u011a\u0114\3\2\2\2\u011a\u0115")
        buf.write("\3\2\2\2\u011a\u0116\3\2\2\2\u011a\u0117\3\2\2\2\u011a")
        buf.write("\u0118\3\2\2\2\u011a\u0119\3\2\2\2\u011b\21\3\2\2\2\u011c")
        buf.write("\u011d\5\34\17\2\u011d\u0121\5\32\16\2\u011e\u0120\5\u008c")
        buf.write("G\2\u011f\u011e\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f")
        buf.write("\3\2\2\2\u0121\u0122\3\2\2\2\u0122\23\3\2\2\2\u0123\u0121")
        buf.write("\3\2\2\2\u0124\u0126\7b\2\2\u0125\u0124\3\2\2\2\u0125")
        buf.write("\u0126\3\2\2\2\u0126\u0128\3\2\2\2\u0127\u0129\5\34\17")
        buf.write("\2\u0128\u0127\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012a")
        buf.write("\3\2\2\2\u012a\u012e\5\32\16\2\u012b\u012d\5\u008cG\2")
        buf.write("\u012c\u012b\3\2\2\2\u012d\u0130\3\2\2\2\u012e\u012c\3")
        buf.write("\2\2\2\u012e\u012f\3\2\2\2\u012f\u0132\3\2\2\2\u0130\u012e")
        buf.write("\3\2\2\2\u0131\u0133\7h\2\2\u0132\u0131\3\2\2\2\u0132")
        buf.write("\u0133\3\2\2\2\u0133\25\3\2\2\2\u0134\u0136\5\u0096L\2")
        buf.write("\u0135\u0137\7h\2\2\u0136\u0135\3\2\2\2\u0136\u0137\3")
        buf.write("\2\2\2\u0137\u0138\3\2\2\2\u0138\u0139\5\24\13\2\u0139")
        buf.write("\u013b\3\2\2\2\u013a\u0134\3\2\2\2\u013b\u013c\3\2\2\2")
        buf.write("\u013c\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d\27\3\2")
        buf.write("\2\2\u013e\u0140\5\u0094K\2\u013f\u0141\7h\2\2\u0140\u013f")
        buf.write("\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0142\3\2\2\2\u0142")
        buf.write("\u0143\5\24\13\2\u0143\u0145\3\2\2\2\u0144\u013e\3\2\2")
        buf.write("\2\u0145\u0146\3\2\2\2\u0146\u0144\3\2\2\2\u0146\u0147")
        buf.write("\3\2\2\2\u0147\31\3\2\2\2\u0148\u014d\5\u0086D\2\u0149")
        buf.write("\u014d\7M\2\2\u014a\u014d\7N\2\2\u014b\u014d\7O\2\2\u014c")
        buf.write("\u0148\3\2\2\2\u014c\u0149\3\2\2\2\u014c\u014a\3\2\2\2")
        buf.write("\u014c\u014b\3\2\2\2\u014d\33\3\2\2\2\u014e\u0154\5\u0086")
        buf.write("D\2\u014f\u0154\5\u0084C\2\u0150\u0154\7O\2\2\u0151\u0154")
        buf.write("\7\25\2\2\u0152\u0154\7H\2\2\u0153\u014e\3\2\2\2\u0153")
        buf.write("\u014f\3\2\2\2\u0153\u0150\3\2\2\2\u0153\u0151\3\2\2\2")
        buf.write("\u0153\u0152\3\2\2\2\u0154\35\3\2\2\2\u0155\u0156\7G\2")
        buf.write("\2\u0156\u0157\5\u008eH\2\u0157\u015a\7J\2\2\u0158\u015b")
        buf.write("\5$\23\2\u0159\u015b\5\"\22\2\u015a\u0158\3\2\2\2\u015a")
        buf.write("\u0159\3\2\2\2\u015b\u015f\3\2\2\2\u015c\u015e\5\60\31")
        buf.write("\2\u015d\u015c\3\2\2\2\u015e\u0161\3\2\2\2\u015f\u015d")
        buf.write("\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0163\3\2\2\2\u0161")
        buf.write("\u015f\3\2\2\2\u0162\u0164\5L\'\2\u0163\u0162\3\2\2\2")
        buf.write("\u0163\u0164\3\2\2\2\u0164\u0166\3\2\2\2\u0165\u0167\5")
        buf.write(" \21\2\u0166\u0165\3\2\2\2\u0166\u0167\3\2\2\2\u0167\37")
        buf.write("\3\2\2\2\u0168\u016b\7D\2\2\u0169\u016c\5$\23\2\u016a")
        buf.write("\u016c\5\"\22\2\u016b\u0169\3\2\2\2\u016b\u016a\3\2\2")
        buf.write("\2\u016c\u0170\3\2\2\2\u016d\u016f\5\60\31\2\u016e\u016d")
        buf.write("\3\2\2\2\u016f\u0172\3\2\2\2\u0170\u016e\3\2\2\2\u0170")
        buf.write("\u0171\3\2\2\2\u0171\u0174\3\2\2\2\u0172\u0170\3\2\2\2")
        buf.write("\u0173\u0175\5L\'\2\u0174\u0173\3\2\2\2\u0174\u0175\3")
        buf.write("\2\2\2\u0175!\3\2\2\2\u0176\u0178\5&\24\2\u0177\u0179")
        buf.write("\5$\23\2\u0178\u0177\3\2\2\2\u0179\u017a\3\2\2\2\u017a")
        buf.write("\u0178\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017c\3\2\2\2")
        buf.write("\u017c\u017d\5(\25\2\u017d#\3\2\2\2\u017e\u0191\5\36\20")
        buf.write("\2\u017f\u0191\5\66\34\2\u0180\u0191\58\35\2\u0181\u0191")
        buf.write("\5> \2\u0182\u0191\5B\"\2\u0183\u0191\5*\26\2\u0184\u0191")
        buf.write("\5N(\2\u0185\u0191\5R*\2\u0186\u0191\5\\/\2\u0187\u0191")
        buf.write("\5`\61\2\u0188\u0191\5b\62\2\u0189\u0191\5f\64\2\u018a")
        buf.write("\u0191\5j\66\2\u018b\u0191\5p9\2\u018c\u0191\5x=\2\u018d")
        buf.write("\u0191\5z>\2\u018e\u0191\5\u0080A\2\u018f\u0191\5\62\32")
        buf.write("\2\u0190\u017e\3\2\2\2\u0190\u017f\3\2\2\2\u0190\u0180")
        buf.write("\3\2\2\2\u0190\u0181\3\2\2\2\u0190\u0182\3\2\2\2\u0190")
        buf.write("\u0183\3\2\2\2\u0190\u0184\3\2\2\2\u0190\u0185\3\2\2\2")
        buf.write("\u0190\u0186\3\2\2\2\u0190\u0187\3\2\2\2\u0190\u0188\3")
        buf.write("\2\2\2\u0190\u0189\3\2\2\2\u0190\u018a\3\2\2\2\u0190\u018b")
        buf.write("\3\2\2\2\u0190\u018c\3\2\2\2\u0190\u018d\3\2\2\2\u0190")
        buf.write("\u018e\3\2\2\2\u0190\u018f\3\2\2\2\u0191%\3\2\2\2\u0192")
        buf.write("\u0193\t\2\2\2\u0193\'\3\2\2\2\u0194\u0195\t\3\2\2\u0195")
        buf.write(")\3\2\2\2\u0196\u0197\7M\2\2\u0197\u0198\7\36\2\2\u0198")
        buf.write("\u019c\5,\27\2\u0199\u019b\5\60\31\2\u019a\u0199\3\2\2")
        buf.write("\2\u019b\u019e\3\2\2\2\u019c\u019a\3\2\2\2\u019c\u019d")
        buf.write("\3\2\2\2\u019d\u01a0\3\2\2\2\u019e\u019c\3\2\2\2\u019f")
        buf.write("\u01a1\5L\'\2\u01a0\u019f\3\2\2\2\u01a0\u01a1\3\2\2\2")
        buf.write("\u01a1+\3\2\2\2\u01a2\u01a8\5.\30\2\u01a3\u01a4\5\u0090")
        buf.write("I\2\u01a4\u01a5\5.\30\2\u01a5\u01a7\3\2\2\2\u01a6\u01a3")
        buf.write("\3\2\2\2\u01a7\u01aa\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a8")
        buf.write("\u01a9\3\2\2\2\u01a9-\3\2\2\2\u01aa\u01a8\3\2\2\2\u01ab")
        buf.write("\u01b3\7a\2\2\u01ac\u01b4\5\66\34\2\u01ad\u01b4\58\35")
        buf.write("\2\u01ae\u01b4\5\b\5\2\u01af\u01b4\5> \2\u01b0\u01b4\5")
        buf.write("*\26\2\u01b1\u01b4\5p9\2\u01b2\u01b4\5z>\2\u01b3\u01ac")
        buf.write("\3\2\2\2\u01b3\u01ad\3\2\2\2\u01b3\u01ae\3\2\2\2\u01b3")
        buf.write("\u01af\3\2\2\2\u01b3\u01b0\3\2\2\2\u01b3\u01b1\3\2\2\2")
        buf.write("\u01b3\u01b2\3\2\2\2\u01b4\u01b8\3\2\2\2\u01b5\u01b7\5")
        buf.write("\60\31\2\u01b6\u01b5\3\2\2\2\u01b7\u01ba\3\2\2\2\u01b8")
        buf.write("\u01b6\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01bc\3\2\2\2")
        buf.write("\u01ba\u01b8\3\2\2\2\u01bb\u01bd\5L\'\2\u01bc\u01bb\3")
        buf.write("\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01c2")
        buf.write("\7g\2\2\u01bf\u01c1\5\60\31\2\u01c0\u01bf\3\2\2\2\u01c1")
        buf.write("\u01c4\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2")
        buf.write("\u01c3\u01c6\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c5\u01c7\5")
        buf.write("L\'\2\u01c6\u01c5\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7/\3")
        buf.write("\2\2\2\u01c8\u01d4\5T+\2\u01c9\u01d4\5V,\2\u01ca\u01d4")
        buf.write("\5\\/\2\u01cb\u01d4\5f\64\2\u01cc\u01d4\5d\63\2\u01cd")
        buf.write("\u01d4\5h\65\2\u01ce\u01d4\5~@\2\u01cf\u01d4\5\u0080A")
        buf.write("\2\u01d0\u01d4\5`\61\2\u01d1\u01d4\5b\62\2\u01d2\u01d4")
        buf.write("\5|?\2\u01d3\u01c8\3\2\2\2\u01d3\u01c9\3\2\2\2\u01d3\u01ca")
        buf.write("\3\2\2\2\u01d3\u01cb\3\2\2\2\u01d3\u01cc\3\2\2\2\u01d3")
        buf.write("\u01cd\3\2\2\2\u01d3\u01ce\3\2\2\2\u01d3\u01cf\3\2\2\2")
        buf.write("\u01d3\u01d0\3\2\2\2\u01d3\u01d1\3\2\2\2\u01d3\u01d2\3")
        buf.write("\2\2\2\u01d4\61\3\2\2\2\u01d5\u01e4\7\24\2\2\u01d6\u01e0")
        buf.write("\5\36\20\2\u01d7\u01e0\5\66\34\2\u01d8\u01e0\58\35\2\u01d9")
        buf.write("\u01e0\5> \2\u01da\u01e0\5B\"\2\u01db\u01e0\5\b\5\2\u01dc")
        buf.write("\u01e0\5*\26\2\u01dd\u01e0\5p9\2\u01de\u01e0\5z>\2\u01df")
        buf.write("\u01d6\3\2\2\2\u01df\u01d7\3\2\2\2\u01df\u01d8\3\2\2\2")
        buf.write("\u01df\u01d9\3\2\2\2\u01df\u01da\3\2\2\2\u01df\u01db\3")
        buf.write("\2\2\2\u01df\u01dc\3\2\2\2\u01df\u01dd\3\2\2\2\u01df\u01de")
        buf.write("\3\2\2\2\u01e0\u01e2\3\2\2\2\u01e1\u01e3\5L\'\2\u01e2")
        buf.write("\u01e1\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e5\3\2\2\2")
        buf.write("\u01e4\u01df\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e4\3")
        buf.write("\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01ec")
        buf.write("\7\34\2\2\u01e9\u01eb\5\64\33\2\u01ea\u01e9\3\2\2\2\u01eb")
        buf.write("\u01ee\3\2\2\2\u01ec\u01ea\3\2\2\2\u01ec\u01ed\3\2\2\2")
        buf.write("\u01ed\u01f0\3\2\2\2\u01ee\u01ec\3\2\2\2\u01ef\u01f1\5")
        buf.write("L\'\2\u01f0\u01ef\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\63")
        buf.write("\3\2\2\2\u01f2\u01fd\5T+\2\u01f3\u01fd\5X-\2\u01f4\u01fd")
        buf.write("\5d\63\2\u01f5\u01fd\5f\64\2\u01f6\u01fd\5\\/\2\u01f7")
        buf.write("\u01fd\5h\65\2\u01f8\u01fd\5l\67\2\u01f9\u01fd\5V,\2\u01fa")
        buf.write("\u01fd\5|?\2\u01fb\u01fd\5\u0080A\2\u01fc\u01f2\3\2\2")
        buf.write("\2\u01fc\u01f3\3\2\2\2\u01fc\u01f4\3\2\2\2\u01fc\u01f5")
        buf.write("\3\2\2\2\u01fc\u01f6\3\2\2\2\u01fc\u01f7\3\2\2\2\u01fc")
        buf.write("\u01f8\3\2\2\2\u01fc\u01f9\3\2\2\2\u01fc\u01fa\3\2\2\2")
        buf.write("\u01fc\u01fb\3\2\2\2\u01fd\65\3\2\2\2\u01fe\u01ff\7M\2")
        buf.write("\2\u01ff\u0200\7\25\2\2\u0200\u0202\5\u008eH\2\u0201\u0203")
        buf.write("\5|?\2\u0202\u0201\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u0204")
        buf.write("\3\2\2\2\u0204\u0205\5L\'\2\u0205\67\3\2\2\2\u0206\u0207")
        buf.write("\7M\2\2\u0207\u0208\7\26\2\2\u0208\u0209\5\u008eH\2\u0209")
        buf.write("\u020a\5L\'\2\u020a9\3\2\2\2\u020b\u020c\7a\2\2\u020c")
        buf.write("\u020d\7\22\2\2\u020d\u020e\7M\2\2\u020e\u020f\7g\2\2")
        buf.write("\u020f;\3\2\2\2\u0210\u0211\7M\2\2\u0211\u0216\5@!\2\u0212")
        buf.write("\u0213\5\u0090I\2\u0213\u0214\7M\2\2\u0214\u0215\5@!\2")
        buf.write("\u0215\u0217\3\2\2\2\u0216\u0212\3\2\2\2\u0216\u0217\3")
        buf.write("\2\2\2\u0217\u021e\3\2\2\2\u0218\u021d\5:\36\2\u0219\u021d")
        buf.write("\5v<\2\u021a\u021d\5H%\2\u021b\u021d\5\u0088E\2\u021c")
        buf.write("\u0218\3\2\2\2\u021c\u0219\3\2\2\2\u021c\u021a\3\2\2\2")
        buf.write("\u021c\u021b\3\2\2\2\u021d\u0220\3\2\2\2\u021e\u021c\3")
        buf.write("\2\2\2\u021e\u021f\3\2\2\2\u021f\u0224\3\2\2\2\u0220\u021e")
        buf.write("\3\2\2\2\u0221\u0223\5D#\2\u0222\u0221\3\2\2\2\u0223\u0226")
        buf.write("\3\2\2\2\u0224\u0222\3\2\2\2\u0224\u0225\3\2\2\2\u0225")
        buf.write("\u0228\3\2\2\2\u0226\u0224\3\2\2\2\u0227\u0229\5L\'\2")
        buf.write("\u0228\u0227\3\2\2\2\u0228\u0229\3\2\2\2\u0229=\3\2\2")
        buf.write("\2\u022a\u022b\7M\2\2\u022b\u0230\5@!\2\u022c\u022d\5")
        buf.write("\u0090I\2\u022d\u022e\7M\2\2\u022e\u022f\5@!\2\u022f\u0231")
        buf.write("\3\2\2\2\u0230\u022c\3\2\2\2\u0230\u0231\3\2\2\2\u0231")
        buf.write("\u023d\3\2\2\2\u0232\u023c\5\16\b\2\u0233\u023c\5:\36")
        buf.write("\2\u0234\u0236\7H\2\2\u0235\u0234\3\2\2\2\u0235\u0236")
        buf.write("\3\2\2\2\u0236\u0237\3\2\2\2\u0237\u023c\5v<\2\u0238\u023c")
        buf.write("\5\u0080A\2\u0239\u023c\5|?\2\u023a\u023c\5\u0088E\2\u023b")
        buf.write("\u0232\3\2\2\2\u023b\u0233\3\2\2\2\u023b\u0235\3\2\2\2")
        buf.write("\u023b\u0238\3\2\2\2\u023b\u0239\3\2\2\2\u023b\u023a\3")
        buf.write("\2\2\2\u023c\u023f\3\2\2\2\u023d\u023b\3\2\2\2\u023d\u023e")
        buf.write("\3\2\2\2\u023e\u0243\3\2\2\2\u023f\u023d\3\2\2\2\u0240")
        buf.write("\u0242\5D#\2\u0241\u0240\3\2\2\2\u0242\u0245\3\2\2\2\u0243")
        buf.write("\u0241\3\2\2\2\u0243\u0244\3\2\2\2\u0244\u0247\3\2\2\2")
        buf.write("\u0245\u0243\3\2\2\2\u0246\u0248\5L\'\2\u0247\u0246\3")
        buf.write("\2\2\2\u0247\u0248\3\2\2\2\u0248?\3\2\2\2\u0249\u024a")
        buf.write("\t\4\2\2\u024aA\3\2\2\2\u024b\u024c\7\30\2\2\u024c\u024e")
        buf.write("\5\u008eH\2\u024d\u024f\7i\2\2\u024e\u024d\3\2\2\2\u024e")
        buf.write("\u024f\3\2\2\2\u024fC\3\2\2\2\u0250\u0251\7\b\2\2\u0251")
        buf.write("\u0253\5\u0084C\2\u0252\u0254\7i\2\2\u0253\u0252\3\2\2")
        buf.write("\2\u0253\u0254\3\2\2\2\u0254E\3\2\2\2\u0255\u0256\7\35")
        buf.write("\2\2\u0256\u0257\5\b\5\2\u0257G\3\2\2\2\u0258\u0259\7")
        buf.write("\37\2\2\u0259\u025a\5r:\2\u025aI\3\2\2\2\u025b\u025c\7")
        buf.write(" \2\2\u025c\u025d\5\b\5\2\u025dK\3\2\2\2\u025e\u025f\7")
        buf.write("!\2\2\u025f\u0261\5\u0084C\2\u0260\u0262\7i\2\2\u0261")
        buf.write("\u0260\3\2\2\2\u0261\u0262\3\2\2\2\u0262M\3\2\2\2\u0263")
        buf.write("\u0264\7\"\2\2\u0264\u0267\7M\2\2\u0265\u0266\7\65\2\2")
        buf.write("\u0266\u0268\7M\2\2\u0267\u0265\3\2\2\2\u0267\u0268\3")
        buf.write("\2\2\2\u0268\u0269\3\2\2\2\u0269\u026b\5@!\2\u026a\u026c")
        buf.write("\5\b\5\2\u026b\u026a\3\2\2\2\u026b\u026c\3\2\2\2\u026c")
        buf.write("\u026e\3\2\2\2\u026d\u026f\5\u0088E\2\u026e\u026d\3\2")
        buf.write("\2\2\u026e\u026f\3\2\2\2\u026f\u0273\3\2\2\2\u0270\u0272")
        buf.write("\5D#\2\u0271\u0270\3\2\2\2\u0272\u0275\3\2\2\2\u0273\u0271")
        buf.write("\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0277\3\2\2\2\u0275")
        buf.write("\u0273\3\2\2\2\u0276\u0278\5L\'\2\u0277\u0276\3\2\2\2")
        buf.write("\u0277\u0278\3\2\2\2\u0278O\3\2\2\2\u0279\u027a\7#\2\2")
        buf.write("\u027a\u027c\7M\2\2\u027b\u027d\5\b\5\2\u027c\u027b\3")
        buf.write("\2\2\2\u027c\u027d\3\2\2\2\u027d\u027f\3\2\2\2\u027e\u0280")
        buf.write("\5\u0088E\2\u027f\u027e\3\2\2\2\u027f\u0280\3\2\2\2\u0280")
        buf.write("Q\3\2\2\2\u0281\u0282\7$\2\2\u0282\u0284\7M\2\2\u0283")
        buf.write("\u0285\5\b\5\2\u0284\u0283\3\2\2\2\u0284\u0285\3\2\2\2")
        buf.write("\u0285\u0287\3\2\2\2\u0286\u0288\5\u0088E\2\u0287\u0286")
        buf.write("\3\2\2\2\u0287\u0288\3\2\2\2\u0288S\3\2\2\2\u0289\u028a")
        buf.write("\7%\2\2\u028a\u028b\7M\2\2\u028b\u028d\5@!\2\u028c\u028e")
        buf.write("\5\u0088E\2\u028d\u028c\3\2\2\2\u028d\u028e\3\2\2\2\u028e")
        buf.write("U\3\2\2\2\u028f\u0290\7&\2\2\u0290\u0291\7M\2\2\u0291")
        buf.write("\u0292\5@!\2\u0292\u0293\7a\2\2\u0293\u0299\7P\2\2\u0294")
        buf.write("\u0295\5\u0094K\2\u0295\u0296\7P\2\2\u0296\u0298\3\2\2")
        buf.write("\2\u0297\u0294\3\2\2\2\u0298\u029b\3\2\2\2\u0299\u0297")
        buf.write("\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029c\3\2\2\2\u029b")
        buf.write("\u0299\3\2\2\2\u029c\u029e\7g\2\2\u029d\u029f\5\u0088")
        buf.write("E\2\u029e\u029d\3\2\2\2\u029e\u029f\3\2\2\2\u029fW\3\2")
        buf.write("\2\2\u02a0\u02a1\7\'\2\2\u02a1\u02a3\7M\2\2\u02a2\u02a4")
        buf.write("\5\u0088E\2\u02a3\u02a2\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4")
        buf.write("Y\3\2\2\2\u02a5\u02a6\7(\2\2\u02a6\u02a7\7M\2\2\u02a7")
        buf.write("\u02a8\5@!\2\u02a8\u02aa\5\b\5\2\u02a9\u02ab\5\u0088E")
        buf.write("\2\u02aa\u02a9\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab[\3\2")
        buf.write("\2\2\u02ac\u02ad\7)\2\2\u02ad\u02ae\7M\2\2\u02ae\u02ba")
        buf.write("\5@!\2\u02af\u02b0\7a\2\2\u02b0\u02b6\7P\2\2\u02b1\u02b2")
        buf.write("\5\u0094K\2\u02b2\u02b3\7P\2\2\u02b3\u02b5\3\2\2\2\u02b4")
        buf.write("\u02b1\3\2\2\2\u02b5\u02b8\3\2\2\2\u02b6\u02b4\3\2\2\2")
        buf.write("\u02b6\u02b7\3\2\2\2\u02b7\u02b9\3\2\2\2\u02b8\u02b6\3")
        buf.write("\2\2\2\u02b9\u02bb\7g\2\2\u02ba\u02af\3\2\2\2\u02ba\u02bb")
        buf.write("\3\2\2\2\u02bb\u02bd\3\2\2\2\u02bc\u02be\5\u0088E\2\u02bd")
        buf.write("\u02bc\3\2\2\2\u02bd\u02be\3\2\2\2\u02be]\3\2\2\2\u02bf")
        buf.write("\u02c0\7*\2\2\u02c0\u02c2\7M\2\2\u02c1\u02c3\5\u0088E")
        buf.write("\2\u02c2\u02c1\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3_\3\2")
        buf.write("\2\2\u02c4\u02c5\7-\2\2\u02c5\u02c6\7M\2\2\u02c6\u02c8")
        buf.write("\5\b\5\2\u02c7\u02c9\5\u0088E\2\u02c8\u02c7\3\2\2\2\u02c8")
        buf.write("\u02c9\3\2\2\2\u02c9\u02cd\3\2\2\2\u02ca\u02cc\5D#\2\u02cb")
        buf.write("\u02ca\3\2\2\2\u02cc\u02cf\3\2\2\2\u02cd\u02cb\3\2\2\2")
        buf.write("\u02cd\u02ce\3\2\2\2\u02ce\u02d1\3\2\2\2\u02cf\u02cd\3")
        buf.write("\2\2\2\u02d0\u02d2\5L\'\2\u02d1\u02d0\3\2\2\2\u02d1\u02d2")
        buf.write("\3\2\2\2\u02d2a\3\2\2\2\u02d3\u02d4\7.\2\2\u02d4\u02d5")
        buf.write("\7M\2\2\u02d5\u02d7\5\b\5\2\u02d6\u02d8\5\u0088E\2\u02d7")
        buf.write("\u02d6\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02dc\3\2\2\2")
        buf.write("\u02d9\u02db\5D#\2\u02da\u02d9\3\2\2\2\u02db\u02de\3\2")
        buf.write("\2\2\u02dc\u02da\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02e0")
        buf.write("\3\2\2\2\u02de\u02dc\3\2\2\2\u02df\u02e1\5L\'\2\u02e0")
        buf.write("\u02df\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1c\3\2\2\2\u02e2")
        buf.write("\u02e3\7+\2\2\u02e3\u02e6\7M\2\2\u02e4\u02e7\5\b\5\2\u02e5")
        buf.write("\u02e7\5\u008eH\2\u02e6\u02e4\3\2\2\2\u02e6\u02e5\3\2")
        buf.write("\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02e9\3\2\2\2\u02e8\u02ea")
        buf.write("\5\u0088E\2\u02e9\u02e8\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea")
        buf.write("\u02ee\3\2\2\2\u02eb\u02ed\5D#\2\u02ec\u02eb\3\2\2\2\u02ed")
        buf.write("\u02f0\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ee\u02ef\3\2\2\2")
        buf.write("\u02ef\u02f2\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f1\u02f3\5")
        buf.write("L\'\2\u02f2\u02f1\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3e\3")
        buf.write("\2\2\2\u02f4\u02f5\7,\2\2\u02f5\u02f6\7M\2\2\u02f6g\3")
        buf.write("\2\2\2\u02f7\u02f8\7/\2\2\u02f8\u02f9\7M\2\2\u02f9\u02fa")
        buf.write("\5@!\2\u02fa\u02fb\7a\2\2\u02fb\u0301\7P\2\2\u02fc\u02fd")
        buf.write("\5\u0094K\2\u02fd\u02fe\7P\2\2\u02fe\u0300\3\2\2\2\u02ff")
        buf.write("\u02fc\3\2\2\2\u0300\u0303\3\2\2\2\u0301\u02ff\3\2\2\2")
        buf.write("\u0301\u0302\3\2\2\2\u0302\u0304\3\2\2\2\u0303\u0301\3")
        buf.write("\2\2\2\u0304\u0306\7g\2\2\u0305\u0307\5\u0088E\2\u0306")
        buf.write("\u0305\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u030b\3\2\2\2")
        buf.write("\u0308\u030a\5D#\2\u0309\u0308\3\2\2\2\u030a\u030d\3\2")
        buf.write("\2\2\u030b\u0309\3\2\2\2\u030b\u030c\3\2\2\2\u030ci\3")
        buf.write("\2\2\2\u030d\u030b\3\2\2\2\u030e\u030f\7\60\2\2\u030f")
        buf.write("\u0310\7M\2\2\u0310\u0314\5@!\2\u0311\u0313\5D#\2\u0312")
        buf.write("\u0311\3\2\2\2\u0313\u0316\3\2\2\2\u0314\u0312\3\2\2\2")
        buf.write("\u0314\u0315\3\2\2\2\u0315\u0318\3\2\2\2\u0316\u0314\3")
        buf.write("\2\2\2\u0317\u0319\5L\'\2\u0318\u0317\3\2\2\2\u0318\u0319")
        buf.write("\3\2\2\2\u0319\u031b\3\2\2\2\u031a\u031c\5\u0088E\2\u031b")
        buf.write("\u031a\3\2\2\2\u031b\u031c\3\2\2\2\u031ck\3\2\2\2\u031d")
        buf.write("\u031e\7\61\2\2\u031e\u0320\7M\2\2\u031f\u0321\5\u0088")
        buf.write("E\2\u0320\u031f\3\2\2\2\u0320\u0321\3\2\2\2\u0321m\3\2")
        buf.write("\2\2\u0322\u0323\7\62\2\2\u0323\u0324\7M\2\2\u0324\u0326")
        buf.write("\5@!\2\u0325\u0327\5\b\5\2\u0326\u0325\3\2\2\2\u0326\u0327")
        buf.write("\3\2\2\2\u0327\u0329\3\2\2\2\u0328\u032a\5\u0088E\2\u0329")
        buf.write("\u0328\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032e\3\2\2\2")
        buf.write("\u032b\u032d\5D#\2\u032c\u032b\3\2\2\2\u032d\u0330\3\2")
        buf.write("\2\2\u032e\u032c\3\2\2\2\u032e\u032f\3\2\2\2\u032fo\3")
        buf.write("\2\2\2\u0330\u032e\3\2\2\2\u0331\u0332\7M\2\2\u0332\u0333")
        buf.write("\7\63\2\2\u0333\u0334\7a\2\2\u0334\u0335\5\u008eH\2\u0335")
        buf.write("\u0337\7g\2\2\u0336\u0338\5L\'\2\u0337\u0336\3\2\2\2\u0337")
        buf.write("\u0338\3\2\2\2\u0338q\3\2\2\2\u0339\u033a\7P\2\2\u033a")
        buf.write("\u033b\7Z\2\2\u033b\u033c\t\5\2\2\u033cs\3\2\2\2\u033d")
        buf.write("\u033e\7\64\2\2\u033eu\3\2\2\2\u033f\u0340\t\6\2\2\u0340")
        buf.write("w\3\2\2\2\u0341\u0342\78\2\2\u0342\u0344\5\u0084C\2\u0343")
        buf.write("\u0345\7i\2\2\u0344\u0343\3\2\2\2\u0344\u0345\3\2\2\2")
        buf.write("\u0345\u0349\3\2\2\2\u0346\u0348\5x=\2\u0347\u0346\3\2")
        buf.write("\2\2\u0348\u034b\3\2\2\2\u0349\u0347\3\2\2\2\u0349\u034a")
        buf.write("\3\2\2\2\u034ay\3\2\2\2\u034b\u0349\3\2\2\2\u034c\u034e")
        buf.write("\t\7\2\2\u034d\u034f\5L\'\2\u034e\u034d\3\2\2\2\u034e")
        buf.write("\u034f\3\2\2\2\u034f{\3\2\2\2\u0350\u0351\7;\2\2\u0351")
        buf.write("\u0352\5r:\2\u0352}\3\2\2\2\u0353\u0354\7?\2\2\u0354\u0356")
        buf.write("\5\u008eH\2\u0355\u0357\5\u0088E\2\u0356\u0355\3\2\2\2")
        buf.write("\u0356\u0357\3\2\2\2\u0357\177\3\2\2\2\u0358\u035b\t\b")
        buf.write("\2\2\u0359\u035a\7M\2\2\u035a\u035c\5@!\2\u035b\u0359")
        buf.write("\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035e\3\2\2\2\u035d")
        buf.write("\u035f\5\u008eH\2\u035e\u035d\3\2\2\2\u035e\u035f\3\2")
        buf.write("\2\2\u035f\u0361\3\2\2\2\u0360\u0362\5\u0088E\2\u0361")
        buf.write("\u0360\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0081\3\2\2\2")
        buf.write("\u0363\u0364\7<\2\2\u0364\u0083\3\2\2\2\u0365\u0366\7")
        buf.write("\3\2\2\u0366\u0085\3\2\2\2\u0367\u0368\7P\2\2\u0368\u0087")
        buf.write("\3\2\2\2\u0369\u036c\7>\2\2\u036a\u036b\7Z\2\2\u036b\u036d")
        buf.write("\t\t\2\2\u036c\u036a\3\2\2\2\u036c\u036d\3\2\2\2\u036d")
        buf.write("\u0089\3\2\2\2\u036e\u036f\7@\2\2\u036f\u0370\7M\2\2\u0370")
        buf.write("\u0371\5@!\2\u0371\u0373\5\22\n\2\u0372\u0374\5\30\r\2")
        buf.write("\u0373\u0372\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0378\3")
        buf.write("\2\2\2\u0375\u0377\5D#\2\u0376\u0375\3\2\2\2\u0377\u037a")
        buf.write("\3\2\2\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2\u0379")
        buf.write("\u037b\3\2\2\2\u037a\u0378\3\2\2\2\u037b\u037c\5L\'\2")
        buf.write("\u037c\u008b\3\2\2\2\u037d\u037e\7a\2\2\u037e\u037f\7")
        buf.write("A\2\2\u037f\u0380\5\u008eH\2\u0380\u0381\7g\2\2\u0381")
        buf.write("\u008d\3\2\2\2\u0382\u0383\bH\1\2\u0383\u0392\5\22\n\2")
        buf.write("\u0384\u0392\5\34\17\2\u0385\u0392\7M\2\2\u0386\u0392")
        buf.write("\7f\2\2\u0387\u0392\7P\2\2\u0388\u0392\5\u0084C\2\u0389")
        buf.write("\u0392\7N\2\2\u038a\u038c\7a\2\2\u038b\u038d\7\63\2\2")
        buf.write("\u038c\u038b\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038e\3")
        buf.write("\2\2\2\u038e\u038f\5\u008eH\2\u038f\u0390\7g\2\2\u0390")
        buf.write("\u0392\3\2\2\2\u0391\u0382\3\2\2\2\u0391\u0384\3\2\2\2")
        buf.write("\u0391\u0385\3\2\2\2\u0391\u0386\3\2\2\2\u0391\u0387\3")
        buf.write("\2\2\2\u0391\u0388\3\2\2\2\u0391\u0389\3\2\2\2\u0391\u038a")
        buf.write("\3\2\2\2\u0392\u03a0\3\2\2\2\u0393\u0394\f\r\2\2\u0394")
        buf.write("\u0395\5\u0092J\2\u0395\u0396\5\u008eH\16\u0396\u039f")
        buf.write("\3\2\2\2\u0397\u0398\f\f\2\2\u0398\u0399\5\u0090I\2\u0399")
        buf.write("\u039a\5\u008eH\r\u039a\u039f\3\2\2\2\u039b\u039c\f\13")
        buf.write("\2\2\u039c\u039d\7X\2\2\u039d\u039f\5\u008eH\f\u039e\u0393")
        buf.write("\3\2\2\2\u039e\u0397\3\2\2\2\u039e\u039b\3\2\2\2\u039f")
        buf.write("\u03a2\3\2\2\2\u03a0\u039e\3\2\2\2\u03a0\u03a1\3\2\2\2")
        buf.write("\u03a1\u008f\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a3\u03a4\t")
        buf.write("\n\2\2\u03a4\u0091\3\2\2\2\u03a5\u03a6\t\13\2\2\u03a6")
        buf.write("\u0093\3\2\2\2\u03a7\u03a8\t\f\2\2\u03a8\u0095\3\2\2\2")
        buf.write("\u03a9\u03aa\t\r\2\2\u03aa\u0097\3\2\2\2}\u009b\u00a2")
        buf.write("\u00a8\u00c2\u00c4\u00d2\u00d4\u00d8\u00dc\u00e0\u00e3")
        buf.write("\u00e7\u00ec\u00f0\u00f4\u00fd\u0102\u0106\u010a\u011a")
        buf.write("\u0121\u0125\u0128\u012e\u0132\u0136\u013c\u0140\u0146")
        buf.write("\u014c\u0153\u015a\u015f\u0163\u0166\u016b\u0170\u0174")
        buf.write("\u017a\u0190\u019c\u01a0\u01a8\u01b3\u01b8\u01bc\u01c2")
        buf.write("\u01c6\u01d3\u01df\u01e2\u01e6\u01ec\u01f0\u01fc\u0202")
        buf.write("\u0216\u021c\u021e\u0224\u0228\u0230\u0235\u023b\u023d")
        buf.write("\u0243\u0247\u024e\u0253\u0261\u0267\u026b\u026e\u0273")
        buf.write("\u0277\u027c\u027f\u0284\u0287\u028d\u0299\u029e\u02a3")
        buf.write("\u02aa\u02b6\u02ba\u02bd\u02c2\u02c8\u02cd\u02d1\u02d7")
        buf.write("\u02dc\u02e0\u02e6\u02e9\u02ee\u02f2\u0301\u0306\u030b")
        buf.write("\u0314\u0318\u031b\u0320\u0326\u0329\u032e\u0337\u0344")
        buf.write("\u0349\u034e\u0356\u035b\u035e\u0361\u036c\u0373\u0378")
        buf.write("\u038c\u0391\u039e\u03a0")
        return buf.getvalue()


class ReqBlockParser ( Parser ):

    grammarFileName = "ReqBlock.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'&'", "'*'", 
                     "<INVALID>", "'!'", "'`'", "'\\'", "':'", "','", "'\"'", 
                     "'='", "'>='", "'>'", "'#'", "'-'", "'<='", "'<'", 
                     "'('", "'['", "'<>'", "'%'", "'+'", "'?'", "')'", "']'", 
                     "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "STRING", "CHECKELECTIVES", "COMMENT", 
                      "CURLY_BRACES", "DECIDE", "DISPLAY", "FROM", "FROM_ADVICE", 
                      "HIDE_RULE", "HIGH_PRIORITY", "IN", "LOW_PRIORITY", 
                      "NOTGPA", "PROXYADVICE", "WHITESPACE", "ALLOW", "BEGIN", 
                      "BEGINSUB", "BLOCK", "BLOCKTYPE", "CLASS", "COPY_RULES", 
                      "CREDIT", "DONT_SHARE", "ENDOT", "ENDSUB", "EXCEPT", 
                      "GROUP", "HEADER_TAG", "INCLUDING", "LABEL", "LASTRES", 
                      "MAXCLASS", "MAXCREDIT", "MAXPASSFAIL", "MAXPERDISC", 
                      "MAXSPREAD", "MAXTERM", "MAXTRANSFER", "MINAREA", 
                      "MINGPA", "MINGRADE", "MINCLASS", "MINCREDIT", "MINPERDISC", 
                      "MINRES", "MINSPREAD", "MINTERM", "NONCOURSE", "OPTIONAL", 
                      "OF", "PSEUDO", "PSUEDO", "REMARK", "RULE_COMPLETE", 
                      "RULE_INCOMPLETE", "RULE_TAG", "STANDALONE", "SHARE", 
                      "TAG", "SAME_DISC", "UNDER", "WITH", "BEGINELSE", 
                      "BEGINIF", "ELSE", "ENDELSE", "ENDIF", "IF", "IS", 
                      "ISNT", "THEN", "AND", "OR", "NUMBER", "CATALOG_NUMBER", 
                      "WILD", "SYMBOL", "AMPERSAND", "ASTERISK", "AT", "BANG", 
                      "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", "DBL_QUOTE", 
                      "EQ", "GE", "GT", "HASH", "HYPHEN", "LE", "LT", "LP", 
                      "L_SQB", "NE", "PERCENT", "PLUS", "QUESTION_MARK", 
                      "RP", "R_SQB", "SEMICOLON", "SLASH", "UNDERSCORE" ]

    RULE_req_block = 0
    RULE_head = 1
    RULE_body = 2
    RULE_course_list = 3
    RULE_course_list_head = 4
    RULE_course_list_qualifier_head = 5
    RULE_course_list_body = 6
    RULE_course_list_qualifier_body = 7
    RULE_full_course = 8
    RULE_course_item = 9
    RULE_and_list = 10
    RULE_or_list = 11
    RULE_catalog_number = 12
    RULE_discipline = 13
    RULE_if_then = 14
    RULE_else_clause = 15
    RULE_stmt_group = 16
    RULE_stmt = 17
    RULE_begin_if = 18
    RULE_end_if = 19
    RULE_group = 20
    RULE_group_list = 21
    RULE_group_item = 22
    RULE_group_qualifier = 23
    RULE_subset = 24
    RULE_subset_qualifier = 25
    RULE_block = 26
    RULE_blocktype = 27
    RULE_allow_clause = 28
    RULE_class_credit_head = 29
    RULE_class_credit_body = 30
    RULE_class_or_credit = 31
    RULE_copy_rules = 32
    RULE_display = 33
    RULE_except_list = 34
    RULE_header_tag = 35
    RULE_including_list = 36
    RULE_label = 37
    RULE_lastres = 38
    RULE_maxclass = 39
    RULE_maxcredit = 40
    RULE_maxpassfail = 41
    RULE_maxperdisc = 42
    RULE_maxspread = 43
    RULE_maxterm = 44
    RULE_maxtransfer = 45
    RULE_minarea = 46
    RULE_minclass = 47
    RULE_mincredit = 48
    RULE_mingpa = 49
    RULE_mingrade = 50
    RULE_minperdisc = 51
    RULE_minres = 52
    RULE_minspread = 53
    RULE_minterm = 54
    RULE_noncourse = 55
    RULE_nv_pair = 56
    RULE_optional = 57
    RULE_pseudo = 58
    RULE_remark = 59
    RULE_rule_complete = 60
    RULE_rule_tag = 61
    RULE_samedisc = 62
    RULE_share = 63
    RULE_standalone = 64
    RULE_string = 65
    RULE_symbol = 66
    RULE_tag = 67
    RULE_under = 68
    RULE_with_clause = 69
    RULE_expression = 70
    RULE_logical_op = 71
    RULE_relational_op = 72
    RULE_list_or = 73
    RULE_list_and = 74

    ruleNames =  [ "req_block", "head", "body", "course_list", "course_list_head", 
                   "course_list_qualifier_head", "course_list_body", "course_list_qualifier_body", 
                   "full_course", "course_item", "and_list", "or_list", 
                   "catalog_number", "discipline", "if_then", "else_clause", 
                   "stmt_group", "stmt", "begin_if", "end_if", "group", 
                   "group_list", "group_item", "group_qualifier", "subset", 
                   "subset_qualifier", "block", "blocktype", "allow_clause", 
                   "class_credit_head", "class_credit_body", "class_or_credit", 
                   "copy_rules", "display", "except_list", "header_tag", 
                   "including_list", "label", "lastres", "maxclass", "maxcredit", 
                   "maxpassfail", "maxperdisc", "maxspread", "maxterm", 
                   "maxtransfer", "minarea", "minclass", "mincredit", "mingpa", 
                   "mingrade", "minperdisc", "minres", "minspread", "minterm", 
                   "noncourse", "nv_pair", "optional", "pseudo", "remark", 
                   "rule_complete", "rule_tag", "samedisc", "share", "standalone", 
                   "string", "symbol", "tag", "under", "with_clause", "expression", 
                   "logical_op", "relational_op", "list_or", "list_and" ]

    EOF = Token.EOF
    STRING=1
    CHECKELECTIVES=2
    COMMENT=3
    CURLY_BRACES=4
    DECIDE=5
    DISPLAY=6
    FROM=7
    FROM_ADVICE=8
    HIDE_RULE=9
    HIGH_PRIORITY=10
    IN=11
    LOW_PRIORITY=12
    NOTGPA=13
    PROXYADVICE=14
    WHITESPACE=15
    ALLOW=16
    BEGIN=17
    BEGINSUB=18
    BLOCK=19
    BLOCKTYPE=20
    CLASS=21
    COPY_RULES=22
    CREDIT=23
    DONT_SHARE=24
    ENDOT=25
    ENDSUB=26
    EXCEPT=27
    GROUP=28
    HEADER_TAG=29
    INCLUDING=30
    LABEL=31
    LASTRES=32
    MAXCLASS=33
    MAXCREDIT=34
    MAXPASSFAIL=35
    MAXPERDISC=36
    MAXSPREAD=37
    MAXTERM=38
    MAXTRANSFER=39
    MINAREA=40
    MINGPA=41
    MINGRADE=42
    MINCLASS=43
    MINCREDIT=44
    MINPERDISC=45
    MINRES=46
    MINSPREAD=47
    MINTERM=48
    NONCOURSE=49
    OPTIONAL=50
    OF=51
    PSEUDO=52
    PSUEDO=53
    REMARK=54
    RULE_COMPLETE=55
    RULE_INCOMPLETE=56
    RULE_TAG=57
    STANDALONE=58
    SHARE=59
    TAG=60
    SAME_DISC=61
    UNDER=62
    WITH=63
    BEGINELSE=64
    BEGINIF=65
    ELSE=66
    ENDELSE=67
    ENDIF=68
    IF=69
    IS=70
    ISNT=71
    THEN=72
    AND=73
    OR=74
    NUMBER=75
    CATALOG_NUMBER=76
    WILD=77
    SYMBOL=78
    AMPERSAND=79
    ASTERISK=80
    AT=81
    BANG=82
    BACKQUOTE=83
    BACKSLASH=84
    COLON=85
    COMMA=86
    DBL_QUOTE=87
    EQ=88
    GE=89
    GT=90
    HASH=91
    HYPHEN=92
    LE=93
    LT=94
    LP=95
    L_SQB=96
    NE=97
    PERCENT=98
    PLUS=99
    QUESTION_MARK=100
    RP=101
    R_SQB=102
    SEMICOLON=103
    SLASH=104
    UNDERSCORE=105

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Req_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(ReqBlockParser.BEGIN, 0)

        def head(self):
            return self.getTypedRuleContext(ReqBlockParser.HeadContext,0)


        def ENDOT(self):
            return self.getToken(ReqBlockParser.ENDOT, 0)

        def EOF(self):
            return self.getToken(ReqBlockParser.EOF, 0)

        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def body(self):
            return self.getTypedRuleContext(ReqBlockParser.BodyContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_req_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReq_block" ):
                listener.enterReq_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReq_block" ):
                listener.exitReq_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReq_block" ):
                return visitor.visitReq_block(self)
            else:
                return visitor.visitChildren(self)




    def req_block(self):

        localctx = ReqBlockParser.Req_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_req_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 153
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 150
                    self.matchWildcard() 
                self.state = 155
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 156
            self.match(ReqBlockParser.BEGIN)
            self.state = 157
            self.head()
            self.state = 160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.SEMICOLON:
                self.state = 158
                self.match(ReqBlockParser.SEMICOLON)
                self.state = 159
                self.body()


            self.state = 162
            self.match(ReqBlockParser.ENDOT)
            self.state = 166
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 163
                    self.matchWildcard() 
                self.state = 168
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 169
            self.match(ReqBlockParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_credit_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_headContext,i)


        def if_then(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.If_thenContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.If_thenContext,i)


        def lastres(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LastresContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LastresContext,i)


        def maxclass(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxclassContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxclassContext,i)


        def maxcredit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxcreditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,i)


        def maxpassfail(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxpassfailContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,i)


        def maxperdisc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxperdiscContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,i)


        def maxterm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxtermContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxtermContext,i)


        def maxtransfer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxtransferContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,i)


        def mingrade(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MingradeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MingradeContext,i)


        def minclass(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MinclassContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MinclassContext,i)


        def mincredit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MincreditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MincreditContext,i)


        def mingpa(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MingpaContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MingpaContext,i)


        def minperdisc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MinperdiscContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,i)


        def minres(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MinresContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MinresContext,i)


        def optional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.OptionalContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.OptionalContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def standalone(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StandaloneContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StandaloneContext,i)


        def subset(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.SubsetContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.SubsetContext,i)


        def under(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.UnderContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.UnderContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead" ):
                listener.enterHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead" ):
                listener.exitHead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHead" ):
                return visitor.visitHead(self)
            else:
                return visitor.visitChildren(self)




    def head(self):

        localctx = ReqBlockParser.HeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ReqBlockParser.BEGINSUB - 18)) | (1 << (ReqBlockParser.DONT_SHARE - 18)) | (1 << (ReqBlockParser.LASTRES - 18)) | (1 << (ReqBlockParser.MAXCLASS - 18)) | (1 << (ReqBlockParser.MAXCREDIT - 18)) | (1 << (ReqBlockParser.MAXPASSFAIL - 18)) | (1 << (ReqBlockParser.MAXPERDISC - 18)) | (1 << (ReqBlockParser.MAXTERM - 18)) | (1 << (ReqBlockParser.MAXTRANSFER - 18)) | (1 << (ReqBlockParser.MINGPA - 18)) | (1 << (ReqBlockParser.MINGRADE - 18)) | (1 << (ReqBlockParser.MINCLASS - 18)) | (1 << (ReqBlockParser.MINCREDIT - 18)) | (1 << (ReqBlockParser.MINPERDISC - 18)) | (1 << (ReqBlockParser.MINRES - 18)) | (1 << (ReqBlockParser.OPTIONAL - 18)) | (1 << (ReqBlockParser.REMARK - 18)) | (1 << (ReqBlockParser.STANDALONE - 18)) | (1 << (ReqBlockParser.SHARE - 18)) | (1 << (ReqBlockParser.UNDER - 18)) | (1 << (ReqBlockParser.IF - 18)) | (1 << (ReqBlockParser.NUMBER - 18)))) != 0):
                self.state = 192
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ReqBlockParser.NUMBER]:
                    self.state = 171
                    self.class_credit_head()
                    pass
                elif token in [ReqBlockParser.IF]:
                    self.state = 172
                    self.if_then()
                    pass
                elif token in [ReqBlockParser.LASTRES]:
                    self.state = 173
                    self.lastres()
                    pass
                elif token in [ReqBlockParser.MAXCLASS]:
                    self.state = 174
                    self.maxclass()
                    pass
                elif token in [ReqBlockParser.MAXCREDIT]:
                    self.state = 175
                    self.maxcredit()
                    pass
                elif token in [ReqBlockParser.MAXPASSFAIL]:
                    self.state = 176
                    self.maxpassfail()
                    pass
                elif token in [ReqBlockParser.MAXPERDISC]:
                    self.state = 177
                    self.maxperdisc()
                    pass
                elif token in [ReqBlockParser.MAXTERM]:
                    self.state = 178
                    self.maxterm()
                    pass
                elif token in [ReqBlockParser.MAXTRANSFER]:
                    self.state = 179
                    self.maxtransfer()
                    pass
                elif token in [ReqBlockParser.MINGRADE]:
                    self.state = 180
                    self.mingrade()
                    pass
                elif token in [ReqBlockParser.MINCLASS]:
                    self.state = 181
                    self.minclass()
                    pass
                elif token in [ReqBlockParser.MINCREDIT]:
                    self.state = 182
                    self.mincredit()
                    pass
                elif token in [ReqBlockParser.MINGPA]:
                    self.state = 183
                    self.mingpa()
                    pass
                elif token in [ReqBlockParser.MINPERDISC]:
                    self.state = 184
                    self.minperdisc()
                    pass
                elif token in [ReqBlockParser.MINRES]:
                    self.state = 185
                    self.minres()
                    pass
                elif token in [ReqBlockParser.OPTIONAL]:
                    self.state = 186
                    self.optional()
                    pass
                elif token in [ReqBlockParser.REMARK]:
                    self.state = 187
                    self.remark()
                    pass
                elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                    self.state = 188
                    self.share()
                    pass
                elif token in [ReqBlockParser.STANDALONE]:
                    self.state = 189
                    self.standalone()
                    pass
                elif token in [ReqBlockParser.BEGINSUB]:
                    self.state = 190
                    self.subset()
                    pass
                elif token in [ReqBlockParser.UNDER]:
                    self.state = 191
                    self.under()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def class_credit_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.GroupContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.GroupContext,i)


        def if_then(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.If_thenContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.If_thenContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def subset(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.SubsetContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.SubsetContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = ReqBlockParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ReqBlockParser.BEGINSUB - 18)) | (1 << (ReqBlockParser.COPY_RULES - 18)) | (1 << (ReqBlockParser.LABEL - 18)) | (1 << (ReqBlockParser.REMARK - 18)) | (1 << (ReqBlockParser.RULE_COMPLETE - 18)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 18)) | (1 << (ReqBlockParser.IF - 18)) | (1 << (ReqBlockParser.NUMBER - 18)))) != 0):
                self.state = 208
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 197
                    self.block()
                    pass

                elif la_ == 2:
                    self.state = 198
                    self.blocktype()
                    pass

                elif la_ == 3:
                    self.state = 199
                    self.class_credit_body()
                    pass

                elif la_ == 4:
                    self.state = 200
                    self.copy_rules()
                    pass

                elif la_ == 5:
                    self.state = 201
                    self.group()
                    pass

                elif la_ == 6:
                    self.state = 202
                    self.if_then()
                    pass

                elif la_ == 7:
                    self.state = 203
                    self.label()
                    pass

                elif la_ == 8:
                    self.state = 204
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 205
                    self.remark()
                    pass

                elif la_ == 10:
                    self.state = 206
                    self.rule_complete()
                    pass

                elif la_ == 11:
                    self.state = 207
                    self.subset()
                    pass


                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def L_SQB(self):
            return self.getToken(ReqBlockParser.L_SQB, 0)

        def R_SQB(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.R_SQB)
            else:
                return self.getToken(ReqBlockParser.R_SQB, i)

        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def except_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Except_listContext,0)


        def including_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Including_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list" ):
                listener.enterCourse_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list" ):
                listener.exitCourse_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list" ):
                return visitor.visitCourse_list(self)
            else:
                return visitor.visitChildren(self)




    def course_list(self):

        localctx = ReqBlockParser.Course_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_course_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 213
                self.match(ReqBlockParser.L_SQB)


            self.state = 216
            self.course_item()
            self.state = 218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 217
                self.match(ReqBlockParser.R_SQB)


            self.state = 222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 220
                self.and_list()

            elif la_ == 2:
                self.state = 221
                self.or_list()


            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.R_SQB:
                self.state = 224
                self.match(ReqBlockParser.R_SQB)


            self.state = 229
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.EXCEPT]:
                self.state = 227
                self.except_list()
                pass
            elif token in [ReqBlockParser.INCLUDING]:
                self.state = 228
                self.including_list()
                pass
            elif token in [ReqBlockParser.EOF, ReqBlockParser.STRING, ReqBlockParser.DISPLAY, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.ENDOT, ReqBlockParser.ENDSUB, ReqBlockParser.HEADER_TAG, ReqBlockParser.LABEL, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXSPREAD, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINAREA, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINSPREAD, ReqBlockParser.OPTIONAL, ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.RULE_TAG, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.TAG, ReqBlockParser.SAME_DISC, ReqBlockParser.UNDER, ReqBlockParser.ELSE, ReqBlockParser.ENDELSE, ReqBlockParser.ENDIF, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.AND, ReqBlockParser.OR, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.LP, ReqBlockParser.L_SQB, ReqBlockParser.RP, ReqBlockParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def course_list_qualifier_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_qualifier_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_qualifier_headContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_head" ):
                listener.enterCourse_list_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_head" ):
                listener.exitCourse_list_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_head" ):
                return visitor.visitCourse_list_head(self)
            else:
                return visitor.visitChildren(self)




    def course_list_head(self):

        localctx = ReqBlockParser.Course_list_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_course_list_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.course_list()
            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.DONT_SHARE) | (1 << ReqBlockParser.HEADER_TAG) | (1 << ReqBlockParser.MAXSPREAD) | (1 << ReqBlockParser.MINGPA) | (1 << ReqBlockParser.MINGRADE) | (1 << ReqBlockParser.MINSPREAD) | (1 << ReqBlockParser.SHARE) | (1 << ReqBlockParser.SAME_DISC))) != 0):
                self.state = 232
                self.course_list_qualifier_head()
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.TAG:
                    self.state = 233
                    self.tag()


                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 241
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_qualifier_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def header_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_qualifier_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_qualifier_head" ):
                listener.enterCourse_list_qualifier_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_qualifier_head" ):
                listener.exitCourse_list_qualifier_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_qualifier_head" ):
                return visitor.visitCourse_list_qualifier_head(self)
            else:
                return visitor.visitChildren(self)




    def course_list_qualifier_head(self):

        localctx = ReqBlockParser.Course_list_qualifier_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_course_list_qualifier_head)
        try:
            self.state = 251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 244
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 245
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 246
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 247
                self.minspread()
                pass
            elif token in [ReqBlockParser.HEADER_TAG]:
                self.enterOuterAlt(localctx, 5)
                self.state = 248
                self.header_tag()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 249
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 250
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def course_list_qualifier_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_qualifier_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_qualifier_bodyContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_body" ):
                listener.enterCourse_list_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_body" ):
                listener.exitCourse_list_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_body" ):
                return visitor.visitCourse_list_body(self)
            else:
                return visitor.visitChildren(self)




    def course_list_body(self):

        localctx = ReqBlockParser.Course_list_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_course_list_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.course_list()
            self.state = 260
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 254
                    self.course_list_qualifier_body()
                    self.state = 256
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                    if la_ == 1:
                        self.state = 255
                        self.tag()

             
                self.state = 262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 264
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 263
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_qualifier_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minarea(self):
            return self.getTypedRuleContext(ReqBlockParser.MinareaContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_qualifier_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_qualifier_body" ):
                listener.enterCourse_list_qualifier_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_qualifier_body" ):
                listener.exitCourse_list_qualifier_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_qualifier_body" ):
                return visitor.visitCourse_list_qualifier_body(self)
            else:
                return visitor.visitChildren(self)




    def course_list_qualifier_body(self):

        localctx = ReqBlockParser.Course_list_qualifier_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_course_list_qualifier_body)
        try:
            self.state = 280
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 266
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 267
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 268
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 269
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINAREA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 270
                self.minarea()
                pass
            elif token in [ReqBlockParser.MINCLASS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 271
                self.minclass()
                pass
            elif token in [ReqBlockParser.MINCREDIT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 272
                self.mincredit()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 8)
                self.state = 273
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 274
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 275
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 11)
                self.state = 276
                self.minspread()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 12)
                self.state = 277
                self.rule_tag()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 13)
                self.state = 278
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 279
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_courseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_full_course

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_course" ):
                listener.enterFull_course(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_course" ):
                listener.exitFull_course(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_course" ):
                return visitor.visitFull_course(self)
            else:
                return visitor.visitChildren(self)




    def full_course(self):

        localctx = ReqBlockParser.Full_courseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_full_course)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.discipline()
            self.state = 283
            self.catalog_number()
            self.state = 287
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 284
                    self.with_clause() 
                self.state = 289
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def L_SQB(self):
            return self.getToken(ReqBlockParser.L_SQB, 0)

        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def R_SQB(self):
            return self.getToken(ReqBlockParser.R_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_item" ):
                listener.enterCourse_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_item" ):
                listener.exitCourse_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_item" ):
                return visitor.visitCourse_item(self)
            else:
                return visitor.visitChildren(self)




    def course_item(self):

        localctx = ReqBlockParser.Course_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_course_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.L_SQB:
                self.state = 290
                self.match(ReqBlockParser.L_SQB)


            self.state = 294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 293
                self.discipline()


            self.state = 296
            self.catalog_number()
            self.state = 300
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 297
                    self.with_clause() 
                self.state = 302
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 303
                self.match(ReqBlockParser.R_SQB)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_andContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_andContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def R_SQB(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.R_SQB)
            else:
                return self.getToken(ReqBlockParser.R_SQB, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_and_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_list" ):
                listener.enterAnd_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_list" ):
                listener.exitAnd_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_list" ):
                return visitor.visitAnd_list(self)
            else:
                return visitor.visitChildren(self)




    def and_list(self):

        localctx = ReqBlockParser.And_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_and_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 306
                    self.list_and()
                    self.state = 308
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ReqBlockParser.R_SQB:
                        self.state = 307
                        self.match(ReqBlockParser.R_SQB)


                    self.state = 310
                    self.course_item()

                else:
                    raise NoViableAltException(self)
                self.state = 314 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def R_SQB(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.R_SQB)
            else:
                return self.getToken(ReqBlockParser.R_SQB, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_or_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_list" ):
                listener.enterOr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_list" ):
                listener.exitOr_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_list" ):
                return visitor.visitOr_list(self)
            else:
                return visitor.visitChildren(self)




    def or_list(self):

        localctx = ReqBlockParser.Or_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_or_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 316
                    self.list_or()
                    self.state = 318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ReqBlockParser.R_SQB:
                        self.state = 317
                        self.match(ReqBlockParser.R_SQB)


                    self.state = 320
                    self.course_item()

                else:
                    raise NoViableAltException(self)
                self.state = 324 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catalog_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_catalog_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalog_number" ):
                listener.enterCatalog_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalog_number" ):
                listener.exitCatalog_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatalog_number" ):
                return visitor.visitCatalog_number(self)
            else:
                return visitor.visitChildren(self)




    def catalog_number(self):

        localctx = ReqBlockParser.Catalog_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_catalog_number)
        try:
            self.state = 330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 326
                self.symbol()
                pass
            elif token in [ReqBlockParser.NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 327
                self.match(ReqBlockParser.NUMBER)
                pass
            elif token in [ReqBlockParser.CATALOG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 328
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 329
                self.match(ReqBlockParser.WILD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisciplineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_discipline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscipline" ):
                listener.enterDiscipline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscipline" ):
                listener.exitDiscipline(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscipline" ):
                return visitor.visitDiscipline(self)
            else:
                return visitor.visitChildren(self)




    def discipline(self):

        localctx = ReqBlockParser.DisciplineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_discipline)
        try:
            self.state = 337
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 332
                self.symbol()
                pass
            elif token in [ReqBlockParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 333
                self.string()
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 334
                self.match(ReqBlockParser.WILD)
                pass
            elif token in [ReqBlockParser.BLOCK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 335
                self.match(ReqBlockParser.BLOCK)
                pass
            elif token in [ReqBlockParser.IS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 336
                self.match(ReqBlockParser.IS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_thenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def stmt(self):
            return self.getTypedRuleContext(ReqBlockParser.StmtContext,0)


        def stmt_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Stmt_groupContext,0)


        def group_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_qualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def else_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Else_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_if_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_then" ):
                listener.enterIf_then(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_then" ):
                listener.exitIf_then(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_then" ):
                return visitor.visitIf_then(self)
            else:
                return visitor.visitChildren(self)




    def if_then(self):

        localctx = ReqBlockParser.If_thenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_if_then)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(ReqBlockParser.IF)
            self.state = 340
            self.expression(0)
            self.state = 341
            self.match(ReqBlockParser.THEN)
            self.state = 344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.BEGINSUB, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINRES, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 342
                self.stmt()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 343
                self.stmt_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 349
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 346
                    self.group_qualifier() 
                self.state = 351
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

            self.state = 353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 352
                self.label()


            self.state = 356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 355
                self.else_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def stmt(self):
            return self.getTypedRuleContext(ReqBlockParser.StmtContext,0)


        def stmt_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Stmt_groupContext,0)


        def group_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_qualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_clause" ):
                return visitor.visitElse_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_clause(self):

        localctx = ReqBlockParser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_else_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(ReqBlockParser.ELSE)
            self.state = 361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.BEGINSUB, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINRES, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 359
                self.stmt()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 360
                self.stmt_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 366
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 363
                    self.group_qualifier() 
                self.state = 368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

            self.state = 370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 369
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stmt_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StmtContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StmtContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_stmt_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt_group" ):
                listener.enterStmt_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt_group" ):
                listener.exitStmt_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt_group" ):
                return visitor.visitStmt_group(self)
            else:
                return visitor.visitChildren(self)




    def stmt_group(self):

        localctx = ReqBlockParser.Stmt_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_stmt_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.begin_if()
            self.state = 374 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 373
                self.stmt()
                self.state = 376 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ReqBlockParser.BEGINSUB - 18)) | (1 << (ReqBlockParser.COPY_RULES - 18)) | (1 << (ReqBlockParser.DONT_SHARE - 18)) | (1 << (ReqBlockParser.LASTRES - 18)) | (1 << (ReqBlockParser.MAXCREDIT - 18)) | (1 << (ReqBlockParser.MAXTRANSFER - 18)) | (1 << (ReqBlockParser.MINGRADE - 18)) | (1 << (ReqBlockParser.MINCLASS - 18)) | (1 << (ReqBlockParser.MINCREDIT - 18)) | (1 << (ReqBlockParser.MINRES - 18)) | (1 << (ReqBlockParser.REMARK - 18)) | (1 << (ReqBlockParser.RULE_COMPLETE - 18)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 18)) | (1 << (ReqBlockParser.SHARE - 18)) | (1 << (ReqBlockParser.IF - 18)) | (1 << (ReqBlockParser.NUMBER - 18)))) != 0)):
                    break

            self.state = 378
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_then(self):
            return self.getTypedRuleContext(ReqBlockParser.If_thenContext,0)


        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def class_credit_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,0)


        def copy_rules(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,0)


        def group(self):
            return self.getTypedRuleContext(ReqBlockParser.GroupContext,0)


        def lastres(self):
            return self.getTypedRuleContext(ReqBlockParser.LastresContext,0)


        def maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minres(self):
            return self.getTypedRuleContext(ReqBlockParser.MinresContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def subset(self):
            return self.getTypedRuleContext(ReqBlockParser.SubsetContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = ReqBlockParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_stmt)
        try:
            self.state = 398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 380
                self.if_then()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 381
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 382
                self.blocktype()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 383
                self.class_credit_body()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 384
                self.copy_rules()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 385
                self.group()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 386
                self.lastres()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 387
                self.maxcredit()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 388
                self.maxtransfer()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 389
                self.minclass()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 390
                self.mincredit()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 391
                self.mingrade()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 392
                self.minres()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 393
                self.noncourse()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 394
                self.remark()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 395
                self.rule_complete()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 396
                self.share()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 397
                self.subset()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINIF(self):
            return self.getToken(ReqBlockParser.BEGINIF, 0)

        def BEGINELSE(self):
            return self.getToken(ReqBlockParser.BEGINELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_begin_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_if" ):
                listener.enterBegin_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_if" ):
                listener.exitBegin_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBegin_if" ):
                return visitor.visitBegin_if(self)
            else:
                return visitor.visitChildren(self)




    def begin_if(self):

        localctx = ReqBlockParser.Begin_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_begin_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.BEGINELSE or _la==ReqBlockParser.BEGINIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENDIF(self):
            return self.getToken(ReqBlockParser.ENDIF, 0)

        def ENDELSE(self):
            return self.getToken(ReqBlockParser.ENDELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_end_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_if" ):
                listener.enterEnd_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_if" ):
                listener.exitEnd_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnd_if" ):
                return visitor.visitEnd_if(self)
            else:
                return visitor.visitChildren(self)




    def end_if(self):

        localctx = ReqBlockParser.End_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_end_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.ENDELSE or _la==ReqBlockParser.ENDIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def GROUP(self):
            return self.getToken(ReqBlockParser.GROUP, 0)

        def group_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_listContext,0)


        def group_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_qualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = ReqBlockParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(ReqBlockParser.NUMBER)
            self.state = 405
            self.match(ReqBlockParser.GROUP)
            self.state = 406
            self.group_list()
            self.state = 410
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 407
                    self.group_qualifier() 
                self.state = 412
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 413
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_itemContext,i)


        def logical_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Logical_opContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_list" ):
                listener.enterGroup_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_list" ):
                listener.exitGroup_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_list" ):
                return visitor.visitGroup_list(self)
            else:
                return visitor.visitChildren(self)




    def group_list(self):

        localctx = ReqBlockParser.Group_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_group_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.group_item()
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 417
                self.logical_op()
                self.state = 418
                self.group_item()
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def class_credit_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,0)


        def group(self):
            return self.getTypedRuleContext(ReqBlockParser.GroupContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def group_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_qualifierContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_item" ):
                listener.enterGroup_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_item" ):
                listener.exitGroup_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_item" ):
                return visitor.visitGroup_item(self)
            else:
                return visitor.visitChildren(self)




    def group_item(self):

        localctx = ReqBlockParser.Group_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_group_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(ReqBlockParser.LP)
            self.state = 433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 426
                self.block()
                pass

            elif la_ == 2:
                self.state = 427
                self.blocktype()
                pass

            elif la_ == 3:
                self.state = 428
                self.course_list()
                pass

            elif la_ == 4:
                self.state = 429
                self.class_credit_body()
                pass

            elif la_ == 5:
                self.state = 430
                self.group()
                pass

            elif la_ == 6:
                self.state = 431
                self.noncourse()
                pass

            elif la_ == 7:
                self.state = 432
                self.rule_complete()
                pass


            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.DONT_SHARE) | (1 << ReqBlockParser.MAXPASSFAIL) | (1 << ReqBlockParser.MAXPERDISC) | (1 << ReqBlockParser.MAXTRANSFER) | (1 << ReqBlockParser.MINGPA) | (1 << ReqBlockParser.MINGRADE) | (1 << ReqBlockParser.MINCLASS) | (1 << ReqBlockParser.MINCREDIT) | (1 << ReqBlockParser.MINPERDISC) | (1 << ReqBlockParser.RULE_TAG) | (1 << ReqBlockParser.SHARE) | (1 << ReqBlockParser.SAME_DISC))) != 0):
                self.state = 435
                self.group_qualifier()
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 441
                self.label()


            self.state = 444
            self.match(ReqBlockParser.RP)
            self.state = 448
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 445
                    self.group_qualifier() 
                self.state = 450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 451
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_qualifier" ):
                listener.enterGroup_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_qualifier" ):
                listener.exitGroup_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_qualifier" ):
                return visitor.visitGroup_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def group_qualifier(self):

        localctx = ReqBlockParser.Group_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_group_qualifier)
        try:
            self.state = 465
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 455
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 456
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 457
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 458
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 459
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 7)
                self.state = 460
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 461
                self.share()
                pass
            elif token in [ReqBlockParser.MINCLASS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 462
                self.minclass()
                pass
            elif token in [ReqBlockParser.MINCREDIT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 463
                self.mincredit()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 11)
                self.state = 464
                self.rule_tag()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINSUB(self):
            return self.getToken(ReqBlockParser.BEGINSUB, 0)

        def ENDSUB(self):
            return self.getToken(ReqBlockParser.ENDSUB, 0)

        def subset_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Subset_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Subset_qualifierContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def if_then(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.If_thenContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.If_thenContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def class_credit_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def course_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_listContext,i)


        def group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.GroupContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.GroupContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_subset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubset" ):
                listener.enterSubset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubset" ):
                listener.exitSubset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubset" ):
                return visitor.visitSubset(self)
            else:
                return visitor.visitChildren(self)




    def subset(self):

        localctx = ReqBlockParser.SubsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_subset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(ReqBlockParser.BEGINSUB)
            self.state = 482 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 477
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 468
                    self.if_then()
                    pass

                elif la_ == 2:
                    self.state = 469
                    self.block()
                    pass

                elif la_ == 3:
                    self.state = 470
                    self.blocktype()
                    pass

                elif la_ == 4:
                    self.state = 471
                    self.class_credit_body()
                    pass

                elif la_ == 5:
                    self.state = 472
                    self.copy_rules()
                    pass

                elif la_ == 6:
                    self.state = 473
                    self.course_list()
                    pass

                elif la_ == 7:
                    self.state = 474
                    self.group()
                    pass

                elif la_ == 8:
                    self.state = 475
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 476
                    self.rule_complete()
                    pass


                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.LABEL:
                    self.state = 479
                    self.label()


                self.state = 484 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.STRING) | (1 << ReqBlockParser.BLOCK) | (1 << ReqBlockParser.COPY_RULES) | (1 << ReqBlockParser.RULE_COMPLETE) | (1 << ReqBlockParser.RULE_INCOMPLETE))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (ReqBlockParser.IF - 69)) | (1 << (ReqBlockParser.IS - 69)) | (1 << (ReqBlockParser.NUMBER - 69)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 69)) | (1 << (ReqBlockParser.WILD - 69)) | (1 << (ReqBlockParser.SYMBOL - 69)) | (1 << (ReqBlockParser.L_SQB - 69)))) != 0)):
                    break

            self.state = 486
            self.match(ReqBlockParser.ENDSUB)
            self.state = 490
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 487
                    self.subset_qualifier() 
                self.state = 492
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 493
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subset_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_subset_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubset_qualifier" ):
                listener.enterSubset_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubset_qualifier" ):
                listener.exitSubset_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubset_qualifier" ):
                return visitor.visitSubset_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def subset_qualifier(self):

        localctx = ReqBlockParser.Subset_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_subset_qualifier)
        try:
            self.state = 506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 496
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 497
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 3)
                self.state = 498
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 499
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 500
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 501
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 7)
                self.state = 502
                self.minspread()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 8)
                self.state = 503
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 9)
                self.state = 504
                self.rule_tag()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 505
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ReqBlockParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(ReqBlockParser.NUMBER)
            self.state = 509
            self.match(ReqBlockParser.BLOCK)
            self.state = 510
            self.expression(0)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.RULE_TAG:
                self.state = 511
                self.rule_tag()


            self.state = 514
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlocktypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCKTYPE(self):
            return self.getToken(ReqBlockParser.BLOCKTYPE, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_blocktype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlocktype" ):
                listener.enterBlocktype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlocktype" ):
                listener.exitBlocktype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlocktype" ):
                return visitor.visitBlocktype(self)
            else:
                return visitor.visitChildren(self)




    def blocktype(self):

        localctx = ReqBlockParser.BlocktypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_blocktype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(ReqBlockParser.NUMBER)
            self.state = 517
            self.match(ReqBlockParser.BLOCKTYPE)
            self.state = 518
            self.expression(0)
            self.state = 519
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allow_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def ALLOW(self):
            return self.getToken(ReqBlockParser.ALLOW, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow_clause" ):
                listener.enterAllow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow_clause" ):
                listener.exitAllow_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow_clause" ):
                return visitor.visitAllow_clause(self)
            else:
                return visitor.visitChildren(self)




    def allow_clause(self):

        localctx = ReqBlockParser.Allow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_allow_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(ReqBlockParser.LP)
            self.state = 522
            self.match(ReqBlockParser.ALLOW)
            self.state = 523
            self.match(ReqBlockParser.NUMBER)
            self.state = 524
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_credit_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.NUMBER)
            else:
                return self.getToken(ReqBlockParser.NUMBER, i)

        def class_or_credit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_or_creditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def allow_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Allow_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,i)


        def pseudo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.PseudoContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.PseudoContext,i)


        def header_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_credit_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_credit_head" ):
                listener.enterClass_credit_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_credit_head" ):
                listener.exitClass_credit_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_credit_head" ):
                return visitor.visitClass_credit_head(self)
            else:
                return visitor.visitChildren(self)




    def class_credit_head(self):

        localctx = ReqBlockParser.Class_credit_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_class_credit_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.match(ReqBlockParser.NUMBER)
            self.state = 527
            self.class_or_credit()
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 528
                self.logical_op()
                self.state = 529
                self.match(ReqBlockParser.NUMBER)
                self.state = 530
                self.class_or_credit()


            self.state = 540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.HEADER_TAG) | (1 << ReqBlockParser.PSEUDO) | (1 << ReqBlockParser.PSUEDO) | (1 << ReqBlockParser.TAG))) != 0) or _la==ReqBlockParser.LP:
                self.state = 538
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ReqBlockParser.LP]:
                    self.state = 534
                    self.allow_clause()
                    pass
                elif token in [ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO]:
                    self.state = 535
                    self.pseudo()
                    pass
                elif token in [ReqBlockParser.HEADER_TAG]:
                    self.state = 536
                    self.header_tag()
                    pass
                elif token in [ReqBlockParser.TAG]:
                    self.state = 537
                    self.tag()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 543
                self.display()
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 549
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_credit_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.NUMBER)
            else:
                return self.getToken(ReqBlockParser.NUMBER, i)

        def class_or_credit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_or_creditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def course_list_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_bodyContext,i)


        def allow_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Allow_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,i)


        def pseudo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.PseudoContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.PseudoContext,i)


        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.IS)
            else:
                return self.getToken(ReqBlockParser.IS, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_credit_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_credit_body" ):
                listener.enterClass_credit_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_credit_body" ):
                listener.exitClass_credit_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_credit_body" ):
                return visitor.visitClass_credit_body(self)
            else:
                return visitor.visitChildren(self)




    def class_credit_body(self):

        localctx = ReqBlockParser.Class_credit_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_class_credit_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(ReqBlockParser.NUMBER)
            self.state = 553
            self.class_or_credit()
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 554
                self.logical_op()
                self.state = 555
                self.match(ReqBlockParser.NUMBER)
                self.state = 556
                self.class_or_credit()


            self.state = 571
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 569
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        self.state = 560
                        self.course_list_body()
                        pass

                    elif la_ == 2:
                        self.state = 561
                        self.allow_clause()
                        pass

                    elif la_ == 3:
                        self.state = 563
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.IS:
                            self.state = 562
                            self.match(ReqBlockParser.IS)


                        self.state = 565
                        self.pseudo()
                        pass

                    elif la_ == 4:
                        self.state = 566
                        self.share()
                        pass

                    elif la_ == 5:
                        self.state = 567
                        self.rule_tag()
                        pass

                    elif la_ == 6:
                        self.state = 568
                        self.tag()
                        pass

             
                self.state = 573
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 574
                self.display()
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 580
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_or_creditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_or_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_credit" ):
                listener.enterClass_or_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_credit" ):
                listener.exitClass_or_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_credit" ):
                return visitor.visitClass_or_credit(self)
            else:
                return visitor.visitChildren(self)




    def class_or_credit(self):

        localctx = ReqBlockParser.Class_or_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_class_or_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_rulesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY_RULES(self):
            return self.getToken(ReqBlockParser.COPY_RULES, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_copy_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_rules" ):
                listener.enterCopy_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_rules" ):
                listener.exitCopy_rules(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopy_rules" ):
                return visitor.visitCopy_rules(self)
            else:
                return visitor.visitChildren(self)




    def copy_rules(self):

        localctx = ReqBlockParser.Copy_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_copy_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(ReqBlockParser.COPY_RULES)
            self.state = 586
            self.expression(0)
            self.state = 588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 587
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(ReqBlockParser.DISPLAY, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_display

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplay" ):
                listener.enterDisplay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplay" ):
                listener.exitDisplay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplay" ):
                return visitor.visitDisplay(self)
            else:
                return visitor.visitChildren(self)




    def display(self):

        localctx = ReqBlockParser.DisplayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_display)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(ReqBlockParser.DISPLAY)
            self.state = 591
            self.string()
            self.state = 593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 592
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(ReqBlockParser.EXCEPT, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_except_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_list" ):
                listener.enterExcept_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_list" ):
                listener.exitExcept_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_list" ):
                return visitor.visitExcept_list(self)
            else:
                return visitor.visitChildren(self)




    def except_list(self):

        localctx = ReqBlockParser.Except_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_except_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(ReqBlockParser.EXCEPT)
            self.state = 596
            self.course_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_tagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEADER_TAG(self):
            return self.getToken(ReqBlockParser.HEADER_TAG, 0)

        def nv_pair(self):
            return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_tag" ):
                listener.enterHeader_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_tag" ):
                listener.exitHeader_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_tag" ):
                return visitor.visitHeader_tag(self)
            else:
                return visitor.visitChildren(self)




    def header_tag(self):

        localctx = ReqBlockParser.Header_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_header_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(ReqBlockParser.HEADER_TAG)
            self.state = 599
            self.nv_pair()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Including_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDING(self):
            return self.getToken(ReqBlockParser.INCLUDING, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_including_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncluding_list" ):
                listener.enterIncluding_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncluding_list" ):
                listener.exitIncluding_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncluding_list" ):
                return visitor.visitIncluding_list(self)
            else:
                return visitor.visitChildren(self)




    def including_list(self):

        localctx = ReqBlockParser.Including_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_including_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(ReqBlockParser.INCLUDING)
            self.state = 602
            self.course_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(ReqBlockParser.LABEL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = ReqBlockParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(ReqBlockParser.LABEL)
            self.state = 605
            self.string()
            self.state = 607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 606
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastresContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LASTRES(self):
            return self.getToken(ReqBlockParser.LASTRES, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.NUMBER)
            else:
                return self.getToken(ReqBlockParser.NUMBER, i)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def OF(self):
            return self.getToken(ReqBlockParser.OF, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_lastres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastres" ):
                listener.enterLastres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastres" ):
                listener.exitLastres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastres" ):
                return visitor.visitLastres(self)
            else:
                return visitor.visitChildren(self)




    def lastres(self):

        localctx = ReqBlockParser.LastresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_lastres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.match(ReqBlockParser.LASTRES)
            self.state = 610
            self.match(ReqBlockParser.NUMBER)
            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.OF:
                self.state = 611
                self.match(ReqBlockParser.OF)
                self.state = 612
                self.match(ReqBlockParser.NUMBER)


            self.state = 615
            self.class_or_credit()
            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 616
                self.course_list()


            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 619
                self.tag()


            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 622
                self.display()
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 628
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxclassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCLASS(self):
            return self.getToken(ReqBlockParser.MAXCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxclass" ):
                listener.enterMaxclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxclass" ):
                listener.exitMaxclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxclass" ):
                return visitor.visitMaxclass(self)
            else:
                return visitor.visitChildren(self)




    def maxclass(self):

        localctx = ReqBlockParser.MaxclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_maxclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(ReqBlockParser.MAXCLASS)
            self.state = 632
            self.match(ReqBlockParser.NUMBER)
            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 633
                self.course_list()


            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 636
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxcreditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCREDIT(self):
            return self.getToken(ReqBlockParser.MAXCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxcredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxcredit" ):
                listener.enterMaxcredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxcredit" ):
                listener.exitMaxcredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxcredit" ):
                return visitor.visitMaxcredit(self)
            else:
                return visitor.visitChildren(self)




    def maxcredit(self):

        localctx = ReqBlockParser.MaxcreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_maxcredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(ReqBlockParser.MAXCREDIT)
            self.state = 640
            self.match(ReqBlockParser.NUMBER)
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 641
                self.course_list()


            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 644
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxpassfailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPASSFAIL(self):
            return self.getToken(ReqBlockParser.MAXPASSFAIL, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxpassfail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxpassfail" ):
                listener.enterMaxpassfail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxpassfail" ):
                listener.exitMaxpassfail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxpassfail" ):
                return visitor.visitMaxpassfail(self)
            else:
                return visitor.visitChildren(self)




    def maxpassfail(self):

        localctx = ReqBlockParser.MaxpassfailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_maxpassfail)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(ReqBlockParser.MAXPASSFAIL)
            self.state = 648
            self.match(ReqBlockParser.NUMBER)
            self.state = 649
            self.class_or_credit()
            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 650
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxperdiscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPERDISC(self):
            return self.getToken(ReqBlockParser.MAXPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxperdisc" ):
                listener.enterMaxperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxperdisc" ):
                listener.exitMaxperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxperdisc" ):
                return visitor.visitMaxperdisc(self)
            else:
                return visitor.visitChildren(self)




    def maxperdisc(self):

        localctx = ReqBlockParser.MaxperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_maxperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(ReqBlockParser.MAXPERDISC)
            self.state = 654
            self.match(ReqBlockParser.NUMBER)
            self.state = 655
            self.class_or_credit()
            self.state = 656
            self.match(ReqBlockParser.LP)
            self.state = 657
            self.match(ReqBlockParser.SYMBOL)
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 658
                self.list_or()
                self.state = 659
                self.match(ReqBlockParser.SYMBOL)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 666
            self.match(ReqBlockParser.RP)
            self.state = 668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 667
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxspreadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXSPREAD(self):
            return self.getToken(ReqBlockParser.MAXSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxspread" ):
                listener.enterMaxspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxspread" ):
                listener.exitMaxspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxspread" ):
                return visitor.visitMaxspread(self)
            else:
                return visitor.visitChildren(self)




    def maxspread(self):

        localctx = ReqBlockParser.MaxspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_maxspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(ReqBlockParser.MAXSPREAD)
            self.state = 671
            self.match(ReqBlockParser.NUMBER)
            self.state = 673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 672
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTERM(self):
            return self.getToken(ReqBlockParser.MAXTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxterm" ):
                listener.enterMaxterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxterm" ):
                listener.exitMaxterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxterm" ):
                return visitor.visitMaxterm(self)
            else:
                return visitor.visitChildren(self)




    def maxterm(self):

        localctx = ReqBlockParser.MaxtermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_maxterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(ReqBlockParser.MAXTERM)
            self.state = 676
            self.match(ReqBlockParser.NUMBER)
            self.state = 677
            self.class_or_credit()
            self.state = 678
            self.course_list()
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 679
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtransferContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTRANSFER(self):
            return self.getToken(ReqBlockParser.MAXTRANSFER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxtransfer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxtransfer" ):
                listener.enterMaxtransfer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxtransfer" ):
                listener.exitMaxtransfer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxtransfer" ):
                return visitor.visitMaxtransfer(self)
            else:
                return visitor.visitChildren(self)




    def maxtransfer(self):

        localctx = ReqBlockParser.MaxtransferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_maxtransfer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(ReqBlockParser.MAXTRANSFER)
            self.state = 683
            self.match(ReqBlockParser.NUMBER)
            self.state = 684
            self.class_or_credit()
            self.state = 696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 685
                self.match(ReqBlockParser.LP)
                self.state = 686
                self.match(ReqBlockParser.SYMBOL)
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                    self.state = 687
                    self.list_or()
                    self.state = 688
                    self.match(ReqBlockParser.SYMBOL)
                    self.state = 694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 695
                self.match(ReqBlockParser.RP)


            self.state = 699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 698
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinareaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINAREA(self):
            return self.getToken(ReqBlockParser.MINAREA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minarea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinarea" ):
                listener.enterMinarea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinarea" ):
                listener.exitMinarea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinarea" ):
                return visitor.visitMinarea(self)
            else:
                return visitor.visitChildren(self)




    def minarea(self):

        localctx = ReqBlockParser.MinareaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_minarea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.match(ReqBlockParser.MINAREA)
            self.state = 702
            self.match(ReqBlockParser.NUMBER)
            self.state = 704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 703
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinclassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCLASS(self):
            return self.getToken(ReqBlockParser.MINCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinclass" ):
                listener.enterMinclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinclass" ):
                listener.exitMinclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinclass" ):
                return visitor.visitMinclass(self)
            else:
                return visitor.visitChildren(self)




    def minclass(self):

        localctx = ReqBlockParser.MinclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_minclass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(ReqBlockParser.MINCLASS)
            self.state = 707
            self.match(ReqBlockParser.NUMBER)
            self.state = 708
            self.course_list()
            self.state = 710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 709
                self.tag()


            self.state = 715
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 712
                    self.display() 
                self.state = 717
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 718
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MincreditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCREDIT(self):
            return self.getToken(ReqBlockParser.MINCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mincredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMincredit" ):
                listener.enterMincredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMincredit" ):
                listener.exitMincredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMincredit" ):
                return visitor.visitMincredit(self)
            else:
                return visitor.visitChildren(self)




    def mincredit(self):

        localctx = ReqBlockParser.MincreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_mincredit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(ReqBlockParser.MINCREDIT)
            self.state = 722
            self.match(ReqBlockParser.NUMBER)
            self.state = 723
            self.course_list()
            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 724
                self.tag()


            self.state = 730
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 727
                    self.display() 
                self.state = 732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 733
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingpaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGPA(self):
            return self.getToken(ReqBlockParser.MINGPA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingpa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingpa" ):
                listener.enterMingpa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingpa" ):
                listener.exitMingpa(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingpa" ):
                return visitor.visitMingpa(self)
            else:
                return visitor.visitChildren(self)




    def mingpa(self):

        localctx = ReqBlockParser.MingpaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_mingpa)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(ReqBlockParser.MINGPA)
            self.state = 737
            self.match(ReqBlockParser.NUMBER)
            self.state = 740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 738
                self.course_list()

            elif la_ == 2:
                self.state = 739
                self.expression(0)


            self.state = 743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 742
                self.tag()


            self.state = 748
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 745
                    self.display() 
                self.state = 750
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

            self.state = 752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 751
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingradeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGRADE(self):
            return self.getToken(ReqBlockParser.MINGRADE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingrade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingrade" ):
                listener.enterMingrade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingrade" ):
                listener.exitMingrade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingrade" ):
                return visitor.visitMingrade(self)
            else:
                return visitor.visitChildren(self)




    def mingrade(self):

        localctx = ReqBlockParser.MingradeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_mingrade)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(ReqBlockParser.MINGRADE)
            self.state = 755
            self.match(ReqBlockParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinperdiscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINPERDISC(self):
            return self.getToken(ReqBlockParser.MINPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinperdisc" ):
                listener.enterMinperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinperdisc" ):
                listener.exitMinperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinperdisc" ):
                return visitor.visitMinperdisc(self)
            else:
                return visitor.visitChildren(self)




    def minperdisc(self):

        localctx = ReqBlockParser.MinperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_minperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(ReqBlockParser.MINPERDISC)
            self.state = 758
            self.match(ReqBlockParser.NUMBER)
            self.state = 759
            self.class_or_credit()
            self.state = 760
            self.match(ReqBlockParser.LP)
            self.state = 761
            self.match(ReqBlockParser.SYMBOL)
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 762
                self.list_or()
                self.state = 763
                self.match(ReqBlockParser.SYMBOL)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 770
            self.match(ReqBlockParser.RP)
            self.state = 772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 771
                self.tag()


            self.state = 777
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 774
                    self.display() 
                self.state = 779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinresContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINRES(self):
            return self.getToken(ReqBlockParser.MINRES, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinres" ):
                listener.enterMinres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinres" ):
                listener.exitMinres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinres" ):
                return visitor.visitMinres(self)
            else:
                return visitor.visitChildren(self)




    def minres(self):

        localctx = ReqBlockParser.MinresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_minres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.match(ReqBlockParser.MINRES)
            self.state = 781
            self.match(ReqBlockParser.NUMBER)
            self.state = 782
            self.class_or_credit()
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 783
                self.display()
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 789
                self.label()


            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 792
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinspreadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINSPREAD(self):
            return self.getToken(ReqBlockParser.MINSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinspread" ):
                listener.enterMinspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinspread" ):
                listener.exitMinspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinspread" ):
                return visitor.visitMinspread(self)
            else:
                return visitor.visitChildren(self)




    def minspread(self):

        localctx = ReqBlockParser.MinspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_minspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(ReqBlockParser.MINSPREAD)
            self.state = 796
            self.match(ReqBlockParser.NUMBER)
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 797
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MintermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINTERM(self):
            return self.getToken(ReqBlockParser.MINTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinterm" ):
                listener.enterMinterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinterm" ):
                listener.exitMinterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinterm" ):
                return visitor.visitMinterm(self)
            else:
                return visitor.visitChildren(self)




    def minterm(self):

        localctx = ReqBlockParser.MintermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_minterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(ReqBlockParser.MINTERM)
            self.state = 801
            self.match(ReqBlockParser.NUMBER)
            self.state = 802
            self.class_or_credit()
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.STRING or _la==ReqBlockParser.BLOCK or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ReqBlockParser.IS - 70)) | (1 << (ReqBlockParser.NUMBER - 70)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 70)) | (1 << (ReqBlockParser.WILD - 70)) | (1 << (ReqBlockParser.SYMBOL - 70)) | (1 << (ReqBlockParser.L_SQB - 70)))) != 0):
                self.state = 803
                self.course_list()


            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 806
                self.tag()


            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 809
                self.display()
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoncourseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_noncourse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoncourse" ):
                listener.enterNoncourse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoncourse" ):
                listener.exitNoncourse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoncourse" ):
                return visitor.visitNoncourse(self)
            else:
                return visitor.visitChildren(self)




    def noncourse(self):

        localctx = ReqBlockParser.NoncourseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_noncourse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(ReqBlockParser.NUMBER)
            self.state = 816
            self.match(ReqBlockParser.NONCOURSE)
            self.state = 817
            self.match(ReqBlockParser.LP)
            self.state = 818
            self.expression(0)
            self.state = 819
            self.match(ReqBlockParser.RP)
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 820
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nv_pairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_nv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNv_pair" ):
                listener.enterNv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNv_pair" ):
                listener.exitNv_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNv_pair" ):
                return visitor.visitNv_pair(self)
            else:
                return visitor.visitChildren(self)




    def nv_pair(self):

        localctx = ReqBlockParser.Nv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_nv_pair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(ReqBlockParser.SYMBOL)
            self.state = 824
            self.match(ReqBlockParser.EQ)
            self.state = 825
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.STRING or _la==ReqBlockParser.SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(ReqBlockParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_optional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional" ):
                listener.enterOptional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional" ):
                listener.exitOptional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional" ):
                return visitor.visitOptional(self)
            else:
                return visitor.visitChildren(self)




    def optional(self):

        localctx = ReqBlockParser.OptionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_optional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(ReqBlockParser.OPTIONAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PSEUDO(self):
            return self.getToken(ReqBlockParser.PSEUDO, 0)

        def PSUEDO(self):
            return self.getToken(ReqBlockParser.PSUEDO, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_pseudo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudo" ):
                listener.enterPseudo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudo" ):
                listener.exitPseudo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudo" ):
                return visitor.visitPseudo(self)
            else:
                return visitor.visitChildren(self)




    def pseudo(self):

        localctx = ReqBlockParser.PseudoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_pseudo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.PSEUDO or _la==ReqBlockParser.PSUEDO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemarkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMARK(self):
            return self.getToken(ReqBlockParser.REMARK, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_remark

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemark" ):
                listener.enterRemark(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemark" ):
                listener.exitRemark(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemark" ):
                return visitor.visitRemark(self)
            else:
                return visitor.visitChildren(self)




    def remark(self):

        localctx = ReqBlockParser.RemarkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_remark)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(ReqBlockParser.REMARK)
            self.state = 832
            self.string()
            self.state = 834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 833
                self.match(ReqBlockParser.SEMICOLON)


            self.state = 839
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 836
                    self.remark() 
                self.state = 841
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_completeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_COMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_COMPLETE, 0)

        def RULE_INCOMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_INCOMPLETE, 0)

        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_complete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_complete" ):
                listener.enterRule_complete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_complete" ):
                listener.exitRule_complete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_complete" ):
                return visitor.visitRule_complete(self)
            else:
                return visitor.visitChildren(self)




    def rule_complete(self):

        localctx = ReqBlockParser.Rule_completeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_rule_complete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.RULE_COMPLETE or _la==ReqBlockParser.RULE_INCOMPLETE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 843
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_tagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_TAG(self):
            return self.getToken(ReqBlockParser.RULE_TAG, 0)

        def nv_pair(self):
            return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_tag" ):
                listener.enterRule_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_tag" ):
                listener.exitRule_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_tag" ):
                return visitor.visitRule_tag(self)
            else:
                return visitor.visitChildren(self)




    def rule_tag(self):

        localctx = ReqBlockParser.Rule_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_rule_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(ReqBlockParser.RULE_TAG)
            self.state = 847
            self.nv_pair()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SamediscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAME_DISC(self):
            return self.getToken(ReqBlockParser.SAME_DISC, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_samedisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSamedisc" ):
                listener.enterSamedisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSamedisc" ):
                listener.exitSamedisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSamedisc" ):
                return visitor.visitSamedisc(self)
            else:
                return visitor.visitChildren(self)




    def samedisc(self):

        localctx = ReqBlockParser.SamediscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_samedisc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.match(ReqBlockParser.SAME_DISC)
            self.state = 850
            self.expression(0)
            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 851
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShareContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHARE(self):
            return self.getToken(ReqBlockParser.SHARE, 0)

        def DONT_SHARE(self):
            return self.getToken(ReqBlockParser.DONT_SHARE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShare" ):
                listener.enterShare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShare" ):
                listener.exitShare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShare" ):
                return visitor.visitShare(self)
            else:
                return visitor.visitChildren(self)




    def share(self):

        localctx = ReqBlockParser.ShareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_share)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.DONT_SHARE or _la==ReqBlockParser.SHARE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 855
                self.match(ReqBlockParser.NUMBER)
                self.state = 856
                self.class_or_credit()


            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 859
                self.expression(0)


            self.state = 863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 862
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(ReqBlockParser.STANDALONE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_standalone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalone" ):
                listener.enterStandalone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalone" ):
                listener.exitStandalone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandalone" ):
                return visitor.visitStandalone(self)
            else:
                return visitor.visitChildren(self)




    def standalone(self):

        localctx = ReqBlockParser.StandaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_standalone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(ReqBlockParser.STANDALONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = ReqBlockParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(ReqBlockParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = ReqBlockParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(ReqBlockParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAG(self):
            return self.getToken(ReqBlockParser.TAG, 0)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag" ):
                listener.enterTag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag" ):
                listener.exitTag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTag" ):
                return visitor.visitTag(self)
            else:
                return visitor.visitChildren(self)




    def tag(self):

        localctx = ReqBlockParser.TagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_tag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(ReqBlockParser.TAG)
            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.EQ:
                self.state = 872
                self.match(ReqBlockParser.EQ)
                self.state = 873
                _la = self._input.LA(1)
                if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (ReqBlockParser.NUMBER - 75)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 75)) | (1 << (ReqBlockParser.SYMBOL - 75)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(ReqBlockParser.UNDER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def full_course(self):
            return self.getTypedRuleContext(ReqBlockParser.Full_courseContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_under

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnder" ):
                listener.enterUnder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnder" ):
                listener.exitUnder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnder" ):
                return visitor.visitUnder(self)
            else:
                return visitor.visitChildren(self)




    def under(self):

        localctx = ReqBlockParser.UnderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_under)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(ReqBlockParser.UNDER)
            self.state = 877
            self.match(ReqBlockParser.NUMBER)
            self.state = 878
            self.class_or_credit()
            self.state = 879
            self.full_course()
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 880
                self.or_list()


            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 883
                self.display()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 889
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def WITH(self):
            return self.getToken(ReqBlockParser.WITH, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = ReqBlockParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(ReqBlockParser.LP)
            self.state = 892
            self.match(ReqBlockParser.WITH)
            self.state = 893
            self.expression(0)
            self.state = 894
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_course(self):
            return self.getTypedRuleContext(ReqBlockParser.Full_courseContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def QUESTION_MARK(self):
            return self.getToken(ReqBlockParser.QUESTION_MARK, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,i)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def relational_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Relational_opContext,0)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ReqBlockParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 897
                self.full_course()
                pass

            elif la_ == 2:
                self.state = 898
                self.discipline()
                pass

            elif la_ == 3:
                self.state = 899
                self.match(ReqBlockParser.NUMBER)
                pass

            elif la_ == 4:
                self.state = 900
                self.match(ReqBlockParser.QUESTION_MARK)
                pass

            elif la_ == 5:
                self.state = 901
                self.match(ReqBlockParser.SYMBOL)
                pass

            elif la_ == 6:
                self.state = 902
                self.string()
                pass

            elif la_ == 7:
                self.state = 903
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass

            elif la_ == 8:
                self.state = 904
                self.match(ReqBlockParser.LP)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.NONCOURSE:
                    self.state = 905
                    self.match(ReqBlockParser.NONCOURSE)


                self.state = 908
                self.expression(0)
                self.state = 909
                self.match(ReqBlockParser.RP)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 926
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 924
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                    if la_ == 1:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 913
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 914
                        self.relational_op()
                        self.state = 915
                        self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 917
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 918
                        self.logical_op()
                        self.state = 919
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 921
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 922
                        self.match(ReqBlockParser.COMMA)
                        self.state = 923
                        self.expression(10)
                        pass

             
                self.state = 928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Logical_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_logical_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_op" ):
                listener.enterLogical_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_op" ):
                listener.exitLogical_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_op" ):
                return visitor.visitLogical_op(self)
            else:
                return visitor.visitChildren(self)




    def logical_op(self):

        localctx = ReqBlockParser.Logical_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_logical_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.OR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def GE(self):
            return self.getToken(ReqBlockParser.GE, 0)

        def GT(self):
            return self.getToken(ReqBlockParser.GT, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def ISNT(self):
            return self.getToken(ReqBlockParser.ISNT, 0)

        def LE(self):
            return self.getToken(ReqBlockParser.LE, 0)

        def LT(self):
            return self.getToken(ReqBlockParser.LT, 0)

        def NE(self):
            return self.getToken(ReqBlockParser.NE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_op" ):
                return visitor.visitRelational_op(self)
            else:
                return visitor.visitChildren(self)




    def relational_op(self):

        localctx = ReqBlockParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            _la = self._input.LA(1)
            if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ReqBlockParser.IS - 70)) | (1 << (ReqBlockParser.ISNT - 70)) | (1 << (ReqBlockParser.EQ - 70)) | (1 << (ReqBlockParser.GE - 70)) | (1 << (ReqBlockParser.GT - 70)) | (1 << (ReqBlockParser.LE - 70)) | (1 << (ReqBlockParser.LT - 70)) | (1 << (ReqBlockParser.NE - 70)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_orContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_or" ):
                listener.enterList_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_or" ):
                listener.exitList_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_or" ):
                return visitor.visitList_or(self)
            else:
                return visitor.visitChildren(self)




    def list_or(self):

        localctx = ReqBlockParser.List_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_list_or)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_andContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(ReqBlockParser.PLUS, 0)

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_and" ):
                listener.enterList_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_and" ):
                listener.exitList_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_and" ):
                return visitor.visitList_and(self)
            else:
                return visitor.visitChildren(self)




    def list_and(self):

        localctx = ReqBlockParser.List_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_list_and)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.PLUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[70] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         




