# Generated from ReqBlock.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3l")
        buf.write("\u03b2\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\3\2\7\2\u009e\n\2\f\2\16\2\u00a1\13\2\3\2\3\2")
        buf.write("\3\2\3\2\5\2\u00a7\n\2\3\2\3\2\7\2\u00ab\n\2\f\2\16\2")
        buf.write("\u00ae\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\7\3")
        buf.write("\u00c7\n\3\f\3\16\3\u00ca\13\3\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\7\4\u00d7\n\4\f\4\16\4\u00da\13\4")
        buf.write("\3\5\5\5\u00dd\n\5\3\5\3\5\5\5\u00e1\n\5\3\5\3\5\5\5\u00e5")
        buf.write("\n\5\3\5\5\5\u00e8\n\5\3\5\3\5\5\5\u00ec\n\5\3\5\5\5\u00ef")
        buf.write("\n\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u00f8\n\6\3\7\3\7")
        buf.write("\3\7\5\7\u00fd\n\7\7\7\u00ff\n\7\f\7\16\7\u0102\13\7\3")
        buf.write("\7\5\7\u0105\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\5\b\u0115\n\b\3\t\3\t\3\t\7\t\u011a")
        buf.write("\n\t\f\t\16\t\u011d\13\t\3\n\5\n\u0120\n\n\3\n\5\n\u0123")
        buf.write("\n\n\3\n\3\n\7\n\u0127\n\n\f\n\16\n\u012a\13\n\3\n\5\n")
        buf.write("\u012d\n\n\3\13\3\13\5\13\u0131\n\13\3\13\3\13\6\13\u0135")
        buf.write("\n\13\r\13\16\13\u0136\3\f\3\f\5\f\u013b\n\f\3\f\3\f\6")
        buf.write("\f\u013f\n\f\r\f\16\f\u0140\3\r\3\r\3\r\3\r\5\r\u0147")
        buf.write("\n\r\3\16\3\16\3\16\3\16\3\16\5\16\u014e\n\16\3\17\3\17")
        buf.write("\3\17\3\17\3\17\5\17\u0155\n\17\3\17\7\17\u0158\n\17\f")
        buf.write("\17\16\17\u015b\13\17\3\17\5\17\u015e\n\17\3\17\5\17\u0161")
        buf.write("\n\17\3\20\3\20\3\20\5\20\u0166\n\20\3\20\7\20\u0169\n")
        buf.write("\20\f\20\16\20\u016c\13\20\3\20\5\20\u016f\n\20\3\21\3")
        buf.write("\21\6\21\u0173\n\21\r\21\16\21\u0174\3\21\3\21\3\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u018b\n\22\3\23\3")
        buf.write("\23\3\24\3\24\3\25\3\25\3\25\3\25\7\25\u0195\n\25\f\25")
        buf.write("\16\25\u0198\13\25\3\25\5\25\u019b\n\25\3\26\3\26\3\26")
        buf.write("\3\26\7\26\u01a1\n\26\f\26\16\26\u01a4\13\26\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u01ae\n\27\3\27\7")
        buf.write("\27\u01b1\n\27\f\27\16\27\u01b4\13\27\3\27\5\27\u01b7")
        buf.write("\n\27\3\27\3\27\7\27\u01bb\n\27\f\27\16\27\u01be\13\27")
        buf.write("\3\27\5\27\u01c1\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\5\30\u01ce\n\30\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\6\31\u01da\n\31\r")
        buf.write("\31\16\31\u01db\3\31\3\31\7\31\u01e0\n\31\f\31\16\31\u01e3")
        buf.write("\13\31\3\31\5\31\u01e6\n\31\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\5\32\u01f2\n\32\3\33\3\33\3\33")
        buf.write("\3\33\5\33\u01f8\n\33\3\33\3\33\3\34\3\34\3\34\3\34\3")
        buf.write("\34\3\35\3\35\3\35\3\35\3\35\3\36\3\36\5\36\u0208\n\36")
        buf.write("\3\36\3\36\3\36\5\36\u020d\n\36\5\36\u020f\n\36\3\36\5")
        buf.write("\36\u0212\n\36\3\36\3\36\3\36\7\36\u0217\n\36\f\36\16")
        buf.write("\36\u021a\13\36\3\36\7\36\u021d\n\36\f\36\16\36\u0220")
        buf.write("\13\36\3\36\5\36\u0223\n\36\3\37\3\37\5\37\u0227\n\37")
        buf.write("\3\37\3\37\3\37\5\37\u022c\n\37\5\37\u022e\n\37\3\37\3")
        buf.write("\37\5\37\u0232\n\37\3\37\3\37\3\37\3\37\7\37\u0238\n\37")
        buf.write("\f\37\16\37\u023b\13\37\3\37\7\37\u023e\n\37\f\37\16\37")
        buf.write("\u0241\13\37\3\37\5\37\u0244\n\37\3 \3 \3!\3!\3\"\3\"")
        buf.write("\3\"\5\"\u024d\n\"\3#\3#\3#\5#\u0252\n#\3$\3$\3$\3%\3")
        buf.write("%\3%\3&\3&\3&\3\'\3\'\3\'\5\'\u0260\n\'\3(\3(\3(\3(\5")
        buf.write("(\u0266\n(\3(\3(\5(\u026a\n(\3(\5(\u026d\n(\3(\7(\u0270")
        buf.write("\n(\f(\16(\u0273\13(\3(\5(\u0276\n(\3)\3)\3)\5)\u027b")
        buf.write("\n)\3)\5)\u027e\n)\3*\3*\3*\5*\u0283\n*\3*\5*\u0286\n")
        buf.write("*\3+\3+\3+\3+\5+\u028c\n+\3,\3,\3,\3,\3,\3,\3,\3,\7,\u0296")
        buf.write("\n,\f,\16,\u0299\13,\3,\3,\5,\u029d\n,\3-\3-\3-\5-\u02a2")
        buf.write("\n-\3.\3.\3.\3.\3.\5.\u02a9\n.\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\7/\u02b3\n/\f/\16/\u02b6\13/\3/\5/\u02b9\n/\3/\5/\u02bc")
        buf.write("\n/\3\60\3\60\3\60\5\60\u02c1\n\60\3\61\3\61\3\61\3\61")
        buf.write("\5\61\u02c7\n\61\3\61\7\61\u02ca\n\61\f\61\16\61\u02cd")
        buf.write("\13\61\3\61\5\61\u02d0\n\61\3\62\3\62\3\62\3\62\5\62\u02d6")
        buf.write("\n\62\3\62\7\62\u02d9\n\62\f\62\16\62\u02dc\13\62\3\62")
        buf.write("\5\62\u02df\n\62\3\63\3\63\3\63\3\63\5\63\u02e5\n\63\3")
        buf.write("\63\5\63\u02e8\n\63\3\63\7\63\u02eb\n\63\f\63\16\63\u02ee")
        buf.write("\13\63\3\63\5\63\u02f1\n\63\3\64\3\64\3\64\3\65\3\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\3\65\7\65\u02fe\n\65\f\65\16\65")
        buf.write("\u0301\13\65\3\65\3\65\5\65\u0305\n\65\3\65\7\65\u0308")
        buf.write("\n\65\f\65\16\65\u030b\13\65\3\66\3\66\3\66\5\66\u0310")
        buf.write("\n\66\3\66\7\66\u0313\n\66\f\66\16\66\u0316\13\66\3\66")
        buf.write("\5\66\u0319\n\66\3\66\5\66\u031c\n\66\3\67\3\67\3\67\5")
        buf.write("\67\u0321\n\67\38\38\38\38\58\u0327\n8\38\58\u032a\n8")
        buf.write("\38\78\u032d\n8\f8\168\u0330\138\39\39\39\39\39\39\59")
        buf.write("\u0338\n9\3:\3:\3:\5:\u033d\n:\3;\3;\3;\5;\u0342\n;\3")
        buf.write("<\3<\3<\3<\3=\3=\3>\3>\3?\3?\3?\5?\u034f\n?\6?\u0351\n")
        buf.write("?\r?\16?\u0352\3@\3@\5@\u0357\n@\3A\3A\3A\3B\3B\3B\5B")
        buf.write("\u035f\nB\3C\3C\3C\5C\u0364\nC\3C\5C\u0367\nC\3C\5C\u036a")
        buf.write("\nC\3D\3D\3E\3E\3F\3F\3G\3G\3G\5G\u0375\nG\3H\3H\3H\3")
        buf.write("H\3H\7H\u037c\nH\fH\16H\u037f\13H\3H\5H\u0382\nH\3I\3")
        buf.write("I\3I\3I\3I\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u0393\nJ\3")
        buf.write("J\3J\3J\5J\u0398\nJ\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\7")
        buf.write("J\u03a5\nJ\fJ\16J\u03a8\13J\3K\3K\3L\3L\3M\3M\3N\3N\3")
        buf.write("N\4\u009f\u00ac\3\u0092O\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\2\17\3\2CD")
        buf.write("\3\2FG\3\2\22\23\4\2\30\30\32\32\4\2\3\3QQ\3\2\678\3\2")
        buf.write(":;\4\2\33\33>>\4\2NOQQ\3\2LM\6\2IJ[]`add\4\2MMYY\4\2L")
        buf.write("Lff\2\u0451\2\u009f\3\2\2\2\4\u00c8\3\2\2\2\6\u00d8\3")
        buf.write("\2\2\2\b\u00dc\3\2\2\2\n\u00f7\3\2\2\2\f\u00f9\3\2\2\2")
        buf.write("\16\u0114\3\2\2\2\20\u0116\3\2\2\2\22\u011f\3\2\2\2\24")
        buf.write("\u0134\3\2\2\2\26\u013e\3\2\2\2\30\u0146\3\2\2\2\32\u014d")
        buf.write("\3\2\2\2\34\u014f\3\2\2\2\36\u0162\3\2\2\2 \u0170\3\2")
        buf.write("\2\2\"\u018a\3\2\2\2$\u018c\3\2\2\2&\u018e\3\2\2\2(\u0190")
        buf.write("\3\2\2\2*\u019c\3\2\2\2,\u01a5\3\2\2\2.\u01cd\3\2\2\2")
        buf.write("\60\u01cf\3\2\2\2\62\u01f1\3\2\2\2\64\u01f3\3\2\2\2\66")
        buf.write("\u01fb\3\2\2\28\u0200\3\2\2\2:\u0207\3\2\2\2<\u0226\3")
        buf.write("\2\2\2>\u0245\3\2\2\2@\u0247\3\2\2\2B\u0249\3\2\2\2D\u024e")
        buf.write("\3\2\2\2F\u0253\3\2\2\2H\u0256\3\2\2\2J\u0259\3\2\2\2")
        buf.write("L\u025c\3\2\2\2N\u0261\3\2\2\2P\u0277\3\2\2\2R\u027f\3")
        buf.write("\2\2\2T\u0287\3\2\2\2V\u028d\3\2\2\2X\u029e\3\2\2\2Z\u02a3")
        buf.write("\3\2\2\2\\\u02aa\3\2\2\2^\u02bd\3\2\2\2`\u02c2\3\2\2\2")
        buf.write("b\u02d1\3\2\2\2d\u02e0\3\2\2\2f\u02f2\3\2\2\2h\u02f5\3")
        buf.write("\2\2\2j\u030c\3\2\2\2l\u031d\3\2\2\2n\u0322\3\2\2\2p\u0331")
        buf.write("\3\2\2\2r\u0339\3\2\2\2t\u033e\3\2\2\2v\u0343\3\2\2\2")
        buf.write("x\u0347\3\2\2\2z\u0349\3\2\2\2|\u0350\3\2\2\2~\u0354\3")
        buf.write("\2\2\2\u0080\u0358\3\2\2\2\u0082\u035b\3\2\2\2\u0084\u0360")
        buf.write("\3\2\2\2\u0086\u036b\3\2\2\2\u0088\u036d\3\2\2\2\u008a")
        buf.write("\u036f\3\2\2\2\u008c\u0371\3\2\2\2\u008e\u0376\3\2\2\2")
        buf.write("\u0090\u0383\3\2\2\2\u0092\u0397\3\2\2\2\u0094\u03a9\3")
        buf.write("\2\2\2\u0096\u03ab\3\2\2\2\u0098\u03ad\3\2\2\2\u009a\u03af")
        buf.write("\3\2\2\2\u009c\u009e\13\2\2\2\u009d\u009c\3\2\2\2\u009e")
        buf.write("\u00a1\3\2\2\2\u009f\u00a0\3\2\2\2\u009f\u009d\3\2\2\2")
        buf.write("\u00a0\u00a2\3\2\2\2\u00a1\u009f\3\2\2\2\u00a2\u00a3\7")
        buf.write("\24\2\2\u00a3\u00a6\5\4\3\2\u00a4\u00a5\7j\2\2\u00a5\u00a7")
        buf.write("\5\6\4\2\u00a6\u00a4\3\2\2\2\u00a6\u00a7\3\2\2\2\u00a7")
        buf.write("\u00a8\3\2\2\2\u00a8\u00ac\7\34\2\2\u00a9\u00ab\13\2\2")
        buf.write("\2\u00aa\u00a9\3\2\2\2\u00ab\u00ae\3\2\2\2\u00ac\u00ad")
        buf.write("\3\2\2\2\u00ac\u00aa\3\2\2\2\u00ad\u00af\3\2\2\2\u00ae")
        buf.write("\u00ac\3\2\2\2\u00af\u00b0\7\2\2\3\u00b0\3\3\2\2\2\u00b1")
        buf.write("\u00c7\5:\36\2\u00b2\u00c7\5\34\17\2\u00b3\u00c7\5N(\2")
        buf.write("\u00b4\u00c7\5P)\2\u00b5\u00c7\5R*\2\u00b6\u00c7\5T+\2")
        buf.write("\u00b7\u00c7\5V,\2\u00b8\u00c7\5Z.\2\u00b9\u00c7\5\\/")
        buf.write("\2\u00ba\u00c7\5f\64\2\u00bb\u00c7\5`\61\2\u00bc\u00c7")
        buf.write("\5b\62\2\u00bd\u00c7\5d\63\2\u00be\u00c7\5h\65\2\u00bf")
        buf.write("\u00c7\5j\66\2\u00c0\u00c7\5x=\2\u00c1\u00c7\5|?\2\u00c2")
        buf.write("\u00c7\5\u0084C\2\u00c3\u00c7\5\u0086D\2\u00c4\u00c7\5")
        buf.write("\60\31\2\u00c5\u00c7\5\u008eH\2\u00c6\u00b1\3\2\2\2\u00c6")
        buf.write("\u00b2\3\2\2\2\u00c6\u00b3\3\2\2\2\u00c6\u00b4\3\2\2\2")
        buf.write("\u00c6\u00b5\3\2\2\2\u00c6\u00b6\3\2\2\2\u00c6\u00b7\3")
        buf.write("\2\2\2\u00c6\u00b8\3\2\2\2\u00c6\u00b9\3\2\2\2\u00c6\u00ba")
        buf.write("\3\2\2\2\u00c6\u00bb\3\2\2\2\u00c6\u00bc\3\2\2\2\u00c6")
        buf.write("\u00bd\3\2\2\2\u00c6\u00be\3\2\2\2\u00c6\u00bf\3\2\2\2")
        buf.write("\u00c6\u00c0\3\2\2\2\u00c6\u00c1\3\2\2\2\u00c6\u00c2\3")
        buf.write("\2\2\2\u00c6\u00c3\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c6\u00c5")
        buf.write("\3\2\2\2\u00c7\u00ca\3\2\2\2\u00c8\u00c6\3\2\2\2\u00c8")
        buf.write("\u00c9\3\2\2\2\u00c9\5\3\2\2\2\u00ca\u00c8\3\2\2\2\u00cb")
        buf.write("\u00d7\5\64\33\2\u00cc\u00d7\5\66\34\2\u00cd\u00d7\5<")
        buf.write("\37\2\u00ce\u00d7\5B\"\2\u00cf\u00d7\5(\25\2\u00d0\u00d7")
        buf.write("\5\34\17\2\u00d1\u00d7\5L\'\2\u00d2\u00d7\5p9\2\u00d3")
        buf.write("\u00d7\5|?\2\u00d4\u00d7\5~@\2\u00d5\u00d7\5\60\31\2\u00d6")
        buf.write("\u00cb\3\2\2\2\u00d6\u00cc\3\2\2\2\u00d6\u00cd\3\2\2\2")
        buf.write("\u00d6\u00ce\3\2\2\2\u00d6\u00cf\3\2\2\2\u00d6\u00d0\3")
        buf.write("\2\2\2\u00d6\u00d1\3\2\2\2\u00d6\u00d2\3\2\2\2\u00d6\u00d3")
        buf.write("\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d6\u00d5\3\2\2\2\u00d7")
        buf.write("\u00da\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d8\u00d9\3\2\2\2")
        buf.write("\u00d9\7\3\2\2\2\u00da\u00d8\3\2\2\2\u00db\u00dd\7c\2")
        buf.write("\2\u00dc\u00db\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00de")
        buf.write("\3\2\2\2\u00de\u00e0\5\22\n\2\u00df\u00e1\7i\2\2\u00e0")
        buf.write("\u00df\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00e4\3\2\2\2")
        buf.write("\u00e2\u00e5\5\24\13\2\u00e3\u00e5\5\26\f\2\u00e4\u00e2")
        buf.write("\3\2\2\2\u00e4\u00e3\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5")
        buf.write("\u00e7\3\2\2\2\u00e6\u00e8\7i\2\2\u00e7\u00e6\3\2\2\2")
        buf.write("\u00e7\u00e8\3\2\2\2\u00e8\u00eb\3\2\2\2\u00e9\u00ec\5")
        buf.write("F$\2\u00ea\u00ec\5J&\2\u00eb\u00e9\3\2\2\2\u00eb\u00ea")
        buf.write("\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ee\3\2\2\2\u00ed")
        buf.write("\u00ef\5L\'\2\u00ee\u00ed\3\2\2\2\u00ee\u00ef\3\2\2\2")
        buf.write("\u00ef\t\3\2\2\2\u00f0\u00f8\5X-\2\u00f1\u00f8\5d\63\2")
        buf.write("\u00f2\u00f8\5f\64\2\u00f3\u00f8\5l\67\2\u00f4\u00f8\5")
        buf.write("H%\2\u00f5\u00f8\5\u0082B\2\u00f6\u00f8\5\u0084C\2\u00f7")
        buf.write("\u00f0\3\2\2\2\u00f7\u00f1\3\2\2\2\u00f7\u00f2\3\2\2\2")
        buf.write("\u00f7\u00f3\3\2\2\2\u00f7\u00f4\3\2\2\2\u00f7\u00f5\3")
        buf.write("\2\2\2\u00f7\u00f6\3\2\2\2\u00f8\13\3\2\2\2\u00f9\u0100")
        buf.write("\5\b\5\2\u00fa\u00fc\5\16\b\2\u00fb\u00fd\5\u008cG\2\u00fc")
        buf.write("\u00fb\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00ff\3\2\2\2")
        buf.write("\u00fe\u00fa\3\2\2\2\u00ff\u0102\3\2\2\2\u0100\u00fe\3")
        buf.write("\2\2\2\u0100\u0101\3\2\2\2\u0101\u0104\3\2\2\2\u0102\u0100")
        buf.write("\3\2\2\2\u0103\u0105\5L\'\2\u0104\u0103\3\2\2\2\u0104")
        buf.write("\u0105\3\2\2\2\u0105\r\3\2\2\2\u0106\u0115\5T+\2\u0107")
        buf.write("\u0115\5V,\2\u0108\u0115\5X-\2\u0109\u0115\5\\/\2\u010a")
        buf.write("\u0115\5^\60\2\u010b\u0115\5`\61\2\u010c\u0115\5b\62\2")
        buf.write("\u010d\u0115\5d\63\2\u010e\u0115\5f\64\2\u010f\u0115\5")
        buf.write("h\65\2\u0110\u0115\5l\67\2\u0111\u0115\5\u0080A\2\u0112")
        buf.write("\u0115\5\u0082B\2\u0113\u0115\5\u0084C\2\u0114\u0106\3")
        buf.write("\2\2\2\u0114\u0107\3\2\2\2\u0114\u0108\3\2\2\2\u0114\u0109")
        buf.write("\3\2\2\2\u0114\u010a\3\2\2\2\u0114\u010b\3\2\2\2\u0114")
        buf.write("\u010c\3\2\2\2\u0114\u010d\3\2\2\2\u0114\u010e\3\2\2\2")
        buf.write("\u0114\u010f\3\2\2\2\u0114\u0110\3\2\2\2\u0114\u0111\3")
        buf.write("\2\2\2\u0114\u0112\3\2\2\2\u0114\u0113\3\2\2\2\u0115\17")
        buf.write("\3\2\2\2\u0116\u0117\5\32\16\2\u0117\u011b\5\30\r\2\u0118")
        buf.write("\u011a\5\u0090I\2\u0119\u0118\3\2\2\2\u011a\u011d\3\2")
        buf.write("\2\2\u011b\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c\21")
        buf.write("\3\2\2\2\u011d\u011b\3\2\2\2\u011e\u0120\7c\2\2\u011f")
        buf.write("\u011e\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0122\3\2\2\2")
        buf.write("\u0121\u0123\5\32\16\2\u0122\u0121\3\2\2\2\u0122\u0123")
        buf.write("\3\2\2\2\u0123\u0124\3\2\2\2\u0124\u0128\5\30\r\2\u0125")
        buf.write("\u0127\5\u0090I\2\u0126\u0125\3\2\2\2\u0127\u012a\3\2")
        buf.write("\2\2\u0128\u0126\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012c")
        buf.write("\3\2\2\2\u012a\u0128\3\2\2\2\u012b\u012d\7i\2\2\u012c")
        buf.write("\u012b\3\2\2\2\u012c\u012d\3\2\2\2\u012d\23\3\2\2\2\u012e")
        buf.write("\u0130\5\u009aN\2\u012f\u0131\7i\2\2\u0130\u012f\3\2\2")
        buf.write("\2\u0130\u0131\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0133")
        buf.write("\5\22\n\2\u0133\u0135\3\2\2\2\u0134\u012e\3\2\2\2\u0135")
        buf.write("\u0136\3\2\2\2\u0136\u0134\3\2\2\2\u0136\u0137\3\2\2\2")
        buf.write("\u0137\25\3\2\2\2\u0138\u013a\5\u0098M\2\u0139\u013b\7")
        buf.write("i\2\2\u013a\u0139\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013c")
        buf.write("\3\2\2\2\u013c\u013d\5\22\n\2\u013d\u013f\3\2\2\2\u013e")
        buf.write("\u0138\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u013e\3\2\2\2")
        buf.write("\u0140\u0141\3\2\2\2\u0141\27\3\2\2\2\u0142\u0147\5\u008a")
        buf.write("F\2\u0143\u0147\7N\2\2\u0144\u0147\7O\2\2\u0145\u0147")
        buf.write("\7P\2\2\u0146\u0142\3\2\2\2\u0146\u0143\3\2\2\2\u0146")
        buf.write("\u0144\3\2\2\2\u0146\u0145\3\2\2\2\u0147\31\3\2\2\2\u0148")
        buf.write("\u014e\5\u008aF\2\u0149\u014e\5\u0088E\2\u014a\u014e\7")
        buf.write("P\2\2\u014b\u014e\7\26\2\2\u014c\u014e\7I\2\2\u014d\u0148")
        buf.write("\3\2\2\2\u014d\u0149\3\2\2\2\u014d\u014a\3\2\2\2\u014d")
        buf.write("\u014b\3\2\2\2\u014d\u014c\3\2\2\2\u014e\33\3\2\2\2\u014f")
        buf.write("\u0150\7H\2\2\u0150\u0151\5\u0092J\2\u0151\u0154\7K\2")
        buf.write("\2\u0152\u0155\5\"\22\2\u0153\u0155\5 \21\2\u0154\u0152")
        buf.write("\3\2\2\2\u0154\u0153\3\2\2\2\u0155\u0159\3\2\2\2\u0156")
        buf.write("\u0158\5.\30\2\u0157\u0156\3\2\2\2\u0158\u015b\3\2\2\2")
        buf.write("\u0159\u0157\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015d\3")
        buf.write("\2\2\2\u015b\u0159\3\2\2\2\u015c\u015e\5L\'\2\u015d\u015c")
        buf.write("\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u0160\3\2\2\2\u015f")
        buf.write("\u0161\5\36\20\2\u0160\u015f\3\2\2\2\u0160\u0161\3\2\2")
        buf.write("\2\u0161\35\3\2\2\2\u0162\u0165\7E\2\2\u0163\u0166\5\"")
        buf.write("\22\2\u0164\u0166\5 \21\2\u0165\u0163\3\2\2\2\u0165\u0164")
        buf.write("\3\2\2\2\u0166\u016a\3\2\2\2\u0167\u0169\5.\30\2\u0168")
        buf.write("\u0167\3\2\2\2\u0169\u016c\3\2\2\2\u016a\u0168\3\2\2\2")
        buf.write("\u016a\u016b\3\2\2\2\u016b\u016e\3\2\2\2\u016c\u016a\3")
        buf.write("\2\2\2\u016d\u016f\5L\'\2\u016e\u016d\3\2\2\2\u016e\u016f")
        buf.write("\3\2\2\2\u016f\37\3\2\2\2\u0170\u0172\5$\23\2\u0171\u0173")
        buf.write("\5\"\22\2\u0172\u0171\3\2\2\2\u0173\u0174\3\2\2\2\u0174")
        buf.write("\u0172\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0176\3\2\2\2")
        buf.write("\u0176\u0177\5&\24\2\u0177!\3\2\2\2\u0178\u018b\5\34\17")
        buf.write("\2\u0179\u018b\5\64\33\2\u017a\u018b\5\66\34\2\u017b\u018b")
        buf.write("\5<\37\2\u017c\u018b\5B\"\2\u017d\u018b\5(\25\2\u017e")
        buf.write("\u018b\5N(\2\u017f\u018b\5R*\2\u0180\u018b\5\\/\2\u0181")
        buf.write("\u018b\5`\61\2\u0182\u018b\5b\62\2\u0183\u018b\5f\64\2")
        buf.write("\u0184\u018b\5j\66\2\u0185\u018b\5p9\2\u0186\u018b\5|")
        buf.write("?\2\u0187\u018b\5~@\2\u0188\u018b\5\u0084C\2\u0189\u018b")
        buf.write("\5\60\31\2\u018a\u0178\3\2\2\2\u018a\u0179\3\2\2\2\u018a")
        buf.write("\u017a\3\2\2\2\u018a\u017b\3\2\2\2\u018a\u017c\3\2\2\2")
        buf.write("\u018a\u017d\3\2\2\2\u018a\u017e\3\2\2\2\u018a\u017f\3")
        buf.write("\2\2\2\u018a\u0180\3\2\2\2\u018a\u0181\3\2\2\2\u018a\u0182")
        buf.write("\3\2\2\2\u018a\u0183\3\2\2\2\u018a\u0184\3\2\2\2\u018a")
        buf.write("\u0185\3\2\2\2\u018a\u0186\3\2\2\2\u018a\u0187\3\2\2\2")
        buf.write("\u018a\u0188\3\2\2\2\u018a\u0189\3\2\2\2\u018b#\3\2\2")
        buf.write("\2\u018c\u018d\t\2\2\2\u018d%\3\2\2\2\u018e\u018f\t\3")
        buf.write("\2\2\u018f\'\3\2\2\2\u0190\u0191\7N\2\2\u0191\u0192\7")
        buf.write("\37\2\2\u0192\u0196\5*\26\2\u0193\u0195\5.\30\2\u0194")
        buf.write("\u0193\3\2\2\2\u0195\u0198\3\2\2\2\u0196\u0194\3\2\2\2")
        buf.write("\u0196\u0197\3\2\2\2\u0197\u019a\3\2\2\2\u0198\u0196\3")
        buf.write("\2\2\2\u0199\u019b\5L\'\2\u019a\u0199\3\2\2\2\u019a\u019b")
        buf.write("\3\2\2\2\u019b)\3\2\2\2\u019c\u01a2\5,\27\2\u019d\u019e")
        buf.write("\5\u0094K\2\u019e\u019f\5,\27\2\u019f\u01a1\3\2\2\2\u01a0")
        buf.write("\u019d\3\2\2\2\u01a1\u01a4\3\2\2\2\u01a2\u01a0\3\2\2\2")
        buf.write("\u01a2\u01a3\3\2\2\2\u01a3+\3\2\2\2\u01a4\u01a2\3\2\2")
        buf.write("\2\u01a5\u01ad\7b\2\2\u01a6\u01ae\5\64\33\2\u01a7\u01ae")
        buf.write("\5\66\34\2\u01a8\u01ae\5\b\5\2\u01a9\u01ae\5<\37\2\u01aa")
        buf.write("\u01ae\5(\25\2\u01ab\u01ae\5p9\2\u01ac\u01ae\5~@\2\u01ad")
        buf.write("\u01a6\3\2\2\2\u01ad\u01a7\3\2\2\2\u01ad\u01a8\3\2\2\2")
        buf.write("\u01ad\u01a9\3\2\2\2\u01ad\u01aa\3\2\2\2\u01ad\u01ab\3")
        buf.write("\2\2\2\u01ad\u01ac\3\2\2\2\u01ae\u01b2\3\2\2\2\u01af\u01b1")
        buf.write("\5.\30\2\u01b0\u01af\3\2\2\2\u01b1\u01b4\3\2\2\2\u01b2")
        buf.write("\u01b0\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b6\3\2\2\2")
        buf.write("\u01b4\u01b2\3\2\2\2\u01b5\u01b7\5L\'\2\u01b6\u01b5\3")
        buf.write("\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01bc")
        buf.write("\7h\2\2\u01b9\u01bb\5.\30\2\u01ba\u01b9\3\2\2\2\u01bb")
        buf.write("\u01be\3\2\2\2\u01bc\u01ba\3\2\2\2\u01bc\u01bd\3\2\2\2")
        buf.write("\u01bd\u01c0\3\2\2\2\u01be\u01bc\3\2\2\2\u01bf\u01c1\5")
        buf.write("L\'\2\u01c0\u01bf\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1-\3")
        buf.write("\2\2\2\u01c2\u01ce\5T+\2\u01c3\u01ce\5V,\2\u01c4\u01ce")
        buf.write("\5\\/\2\u01c5\u01ce\5`\61\2\u01c6\u01ce\5b\62\2\u01c7")
        buf.write("\u01ce\5d\63\2\u01c8\u01ce\5f\64\2\u01c9\u01ce\5h\65\2")
        buf.write("\u01ca\u01ce\5\u0082B\2\u01cb\u01ce\5\u0080A\2\u01cc\u01ce")
        buf.write("\5\u0084C\2\u01cd\u01c2\3\2\2\2\u01cd\u01c3\3\2\2\2\u01cd")
        buf.write("\u01c4\3\2\2\2\u01cd\u01c5\3\2\2\2\u01cd\u01c6\3\2\2\2")
        buf.write("\u01cd\u01c7\3\2\2\2\u01cd\u01c8\3\2\2\2\u01cd\u01c9\3")
        buf.write("\2\2\2\u01cd\u01ca\3\2\2\2\u01cd\u01cb\3\2\2\2\u01cd\u01cc")
        buf.write("\3\2\2\2\u01ce/\3\2\2\2\u01cf\u01d9\7\25\2\2\u01d0\u01da")
        buf.write("\5\34\17\2\u01d1\u01da\5\64\33\2\u01d2\u01da\5\66\34\2")
        buf.write("\u01d3\u01da\5<\37\2\u01d4\u01da\5B\"\2\u01d5\u01da\5")
        buf.write("\b\5\2\u01d6\u01da\5(\25\2\u01d7\u01da\5p9\2\u01d8\u01da")
        buf.write("\5~@\2\u01d9\u01d0\3\2\2\2\u01d9\u01d1\3\2\2\2\u01d9\u01d2")
        buf.write("\3\2\2\2\u01d9\u01d3\3\2\2\2\u01d9\u01d4\3\2\2\2\u01d9")
        buf.write("\u01d5\3\2\2\2\u01d9\u01d6\3\2\2\2\u01d9\u01d7\3\2\2\2")
        buf.write("\u01d9\u01d8\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01d9\3")
        buf.write("\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01e1")
        buf.write("\7\35\2\2\u01de\u01e0\5\62\32\2\u01df\u01de\3\2\2\2\u01e0")
        buf.write("\u01e3\3\2\2\2\u01e1\u01df\3\2\2\2\u01e1\u01e2\3\2\2\2")
        buf.write("\u01e2\u01e5\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e4\u01e6\5")
        buf.write("L\'\2\u01e5\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\61")
        buf.write("\3\2\2\2\u01e7\u01f2\5T+\2\u01e8\u01f2\5V,\2\u01e9\u01f2")
        buf.write("\5X-\2\u01ea\u01f2\5\\/\2\u01eb\u01f2\5d\63\2\u01ec\u01f2")
        buf.write("\5f\64\2\u01ed\u01f2\5h\65\2\u01ee\u01f2\5l\67\2\u01ef")
        buf.write("\u01f2\5\u0080A\2\u01f0\u01f2\5\u0084C\2\u01f1\u01e7\3")
        buf.write("\2\2\2\u01f1\u01e8\3\2\2\2\u01f1\u01e9\3\2\2\2\u01f1\u01ea")
        buf.write("\3\2\2\2\u01f1\u01eb\3\2\2\2\u01f1\u01ec\3\2\2\2\u01f1")
        buf.write("\u01ed\3\2\2\2\u01f1\u01ee\3\2\2\2\u01f1\u01ef\3\2\2\2")
        buf.write("\u01f1\u01f0\3\2\2\2\u01f2\63\3\2\2\2\u01f3\u01f4\7N\2")
        buf.write("\2\u01f4\u01f5\7\26\2\2\u01f5\u01f7\5\u0092J\2\u01f6\u01f8")
        buf.write("\5\u0080A\2\u01f7\u01f6\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8")
        buf.write("\u01f9\3\2\2\2\u01f9\u01fa\5L\'\2\u01fa\65\3\2\2\2\u01fb")
        buf.write("\u01fc\7N\2\2\u01fc\u01fd\7\27\2\2\u01fd\u01fe\5\u0092")
        buf.write("J\2\u01fe\u01ff\5L\'\2\u01ff\67\3\2\2\2\u0200\u0201\7")
        buf.write("b\2\2\u0201\u0202\5> \2\u0202\u0203\7N\2\2\u0203\u0204")
        buf.write("\7h\2\2\u02049\3\2\2\2\u0205\u0208\5r:\2\u0206\u0208\5")
        buf.write("t;\2\u0207\u0205\3\2\2\2\u0207\u0206\3\2\2\2\u0208\u020e")
        buf.write("\3\2\2\2\u0209\u020c\5\u0094K\2\u020a\u020d\5r:\2\u020b")
        buf.write("\u020d\5t;\2\u020c\u020a\3\2\2\2\u020c\u020b\3\2\2\2\u020d")
        buf.write("\u020f\3\2\2\2\u020e\u0209\3\2\2\2\u020e\u020f\3\2\2\2")
        buf.write("\u020f\u0218\3\2\2\2\u0210\u0212\7I\2\2\u0211\u0210\3")
        buf.write("\2\2\2\u0211\u0212\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0217")
        buf.write("\5z>\2\u0214\u0217\5H%\2\u0215\u0217\5\u008cG\2\u0216")
        buf.write("\u0211\3\2\2\2\u0216\u0214\3\2\2\2\u0216\u0215\3\2\2\2")
        buf.write("\u0217\u021a\3\2\2\2\u0218\u0216\3\2\2\2\u0218\u0219\3")
        buf.write("\2\2\2\u0219\u021e\3\2\2\2\u021a\u0218\3\2\2\2\u021b\u021d")
        buf.write("\5D#\2\u021c\u021b\3\2\2\2\u021d\u0220\3\2\2\2\u021e\u021c")
        buf.write("\3\2\2\2\u021e\u021f\3\2\2\2\u021f\u0222\3\2\2\2\u0220")
        buf.write("\u021e\3\2\2\2\u0221\u0223\5L\'\2\u0222\u0221\3\2\2\2")
        buf.write("\u0222\u0223\3\2\2\2\u0223;\3\2\2\2\u0224\u0227\5r:\2")
        buf.write("\u0225\u0227\5t;\2\u0226\u0224\3\2\2\2\u0226\u0225\3\2")
        buf.write("\2\2\u0227\u022d\3\2\2\2\u0228\u022b\5\u0094K\2\u0229")
        buf.write("\u022c\5r:\2\u022a\u022c\5t;\2\u022b\u0229\3\2\2\2\u022b")
        buf.write("\u022a\3\2\2\2\u022c\u022e\3\2\2\2\u022d\u0228\3\2\2\2")
        buf.write("\u022d\u022e\3\2\2\2\u022e\u0239\3\2\2\2\u022f\u0238\5")
        buf.write("\f\7\2\u0230\u0232\7I\2\2\u0231\u0230\3\2\2\2\u0231\u0232")
        buf.write("\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0238\5z>\2\u0234\u0238")
        buf.write("\5\u0084C\2\u0235\u0238\5\u0080A\2\u0236\u0238\5\u008c")
        buf.write("G\2\u0237\u022f\3\2\2\2\u0237\u0231\3\2\2\2\u0237\u0234")
        buf.write("\3\2\2\2\u0237\u0235\3\2\2\2\u0237\u0236\3\2\2\2\u0238")
        buf.write("\u023b\3\2\2\2\u0239\u0237\3\2\2\2\u0239\u023a\3\2\2\2")
        buf.write("\u023a\u023f\3\2\2\2\u023b\u0239\3\2\2\2\u023c\u023e\5")
        buf.write("D#\2\u023d\u023c\3\2\2\2\u023e\u0241\3\2\2\2\u023f\u023d")
        buf.write("\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0243\3\2\2\2\u0241")
        buf.write("\u023f\3\2\2\2\u0242\u0244\5L\'\2\u0243\u0242\3\2\2\2")
        buf.write("\u0243\u0244\3\2\2\2\u0244=\3\2\2\2\u0245\u0246\t\4\2")
        buf.write("\2\u0246?\3\2\2\2\u0247\u0248\t\5\2\2\u0248A\3\2\2\2\u0249")
        buf.write("\u024a\7\31\2\2\u024a\u024c\5\u0092J\2\u024b\u024d\7j")
        buf.write("\2\2\u024c\u024b\3\2\2\2\u024c\u024d\3\2\2\2\u024dC\3")
        buf.write("\2\2\2\u024e\u024f\7\b\2\2\u024f\u0251\5\u0088E\2\u0250")
        buf.write("\u0252\7j\2\2\u0251\u0250\3\2\2\2\u0251\u0252\3\2\2\2")
        buf.write("\u0252E\3\2\2\2\u0253\u0254\7\36\2\2\u0254\u0255\5\b\5")
        buf.write("\2\u0255G\3\2\2\2\u0256\u0257\7 \2\2\u0257\u0258\5v<\2")
        buf.write("\u0258I\3\2\2\2\u0259\u025a\7!\2\2\u025a\u025b\5\b\5\2")
        buf.write("\u025bK\3\2\2\2\u025c\u025d\7\"\2\2\u025d\u025f\5\u0088")
        buf.write("E\2\u025e\u0260\7j\2\2\u025f\u025e\3\2\2\2\u025f\u0260")
        buf.write("\3\2\2\2\u0260M\3\2\2\2\u0261\u0262\7#\2\2\u0262\u0265")
        buf.write("\7N\2\2\u0263\u0264\7\66\2\2\u0264\u0266\7N\2\2\u0265")
        buf.write("\u0263\3\2\2\2\u0265\u0266\3\2\2\2\u0266\u0267\3\2\2\2")
        buf.write("\u0267\u0269\5@!\2\u0268\u026a\5\b\5\2\u0269\u0268\3\2")
        buf.write("\2\2\u0269\u026a\3\2\2\2\u026a\u026c\3\2\2\2\u026b\u026d")
        buf.write("\5\u008cG\2\u026c\u026b\3\2\2\2\u026c\u026d\3\2\2\2\u026d")
        buf.write("\u0271\3\2\2\2\u026e\u0270\5D#\2\u026f\u026e\3\2\2\2\u0270")
        buf.write("\u0273\3\2\2\2\u0271\u026f\3\2\2\2\u0271\u0272\3\2\2\2")
        buf.write("\u0272\u0275\3\2\2\2\u0273\u0271\3\2\2\2\u0274\u0276\5")
        buf.write("L\'\2\u0275\u0274\3\2\2\2\u0275\u0276\3\2\2\2\u0276O\3")
        buf.write("\2\2\2\u0277\u0278\7$\2\2\u0278\u027a\7N\2\2\u0279\u027b")
        buf.write("\5\b\5\2\u027a\u0279\3\2\2\2\u027a\u027b\3\2\2\2\u027b")
        buf.write("\u027d\3\2\2\2\u027c\u027e\5\u008cG\2\u027d\u027c\3\2")
        buf.write("\2\2\u027d\u027e\3\2\2\2\u027eQ\3\2\2\2\u027f\u0280\7")
        buf.write("%\2\2\u0280\u0282\7N\2\2\u0281\u0283\5\b\5\2\u0282\u0281")
        buf.write("\3\2\2\2\u0282\u0283\3\2\2\2\u0283\u0285\3\2\2\2\u0284")
        buf.write("\u0286\5\u008cG\2\u0285\u0284\3\2\2\2\u0285\u0286\3\2")
        buf.write("\2\2\u0286S\3\2\2\2\u0287\u0288\7&\2\2\u0288\u0289\7N")
        buf.write("\2\2\u0289\u028b\5@!\2\u028a\u028c\5\u008cG\2\u028b\u028a")
        buf.write("\3\2\2\2\u028b\u028c\3\2\2\2\u028cU\3\2\2\2\u028d\u028e")
        buf.write("\7\'\2\2\u028e\u028f\7N\2\2\u028f\u0290\5@!\2\u0290\u0291")
        buf.write("\7b\2\2\u0291\u0297\7Q\2\2\u0292\u0293\5\u0098M\2\u0293")
        buf.write("\u0294\7Q\2\2\u0294\u0296\3\2\2\2\u0295\u0292\3\2\2\2")
        buf.write("\u0296\u0299\3\2\2\2\u0297\u0295\3\2\2\2\u0297\u0298\3")
        buf.write("\2\2\2\u0298\u029a\3\2\2\2\u0299\u0297\3\2\2\2\u029a\u029c")
        buf.write("\7h\2\2\u029b\u029d\5\u008cG\2\u029c\u029b\3\2\2\2\u029c")
        buf.write("\u029d\3\2\2\2\u029dW\3\2\2\2\u029e\u029f\7(\2\2\u029f")
        buf.write("\u02a1\7N\2\2\u02a0\u02a2\5\u008cG\2\u02a1\u02a0\3\2\2")
        buf.write("\2\u02a1\u02a2\3\2\2\2\u02a2Y\3\2\2\2\u02a3\u02a4\7)\2")
        buf.write("\2\u02a4\u02a5\7N\2\2\u02a5\u02a6\5@!\2\u02a6\u02a8\5")
        buf.write("\b\5\2\u02a7\u02a9\5\u008cG\2\u02a8\u02a7\3\2\2\2\u02a8")
        buf.write("\u02a9\3\2\2\2\u02a9[\3\2\2\2\u02aa\u02ab\7*\2\2\u02ab")
        buf.write("\u02ac\7N\2\2\u02ac\u02b8\5@!\2\u02ad\u02ae\7b\2\2\u02ae")
        buf.write("\u02b4\7Q\2\2\u02af\u02b0\5\u0098M\2\u02b0\u02b1\7Q\2")
        buf.write("\2\u02b1\u02b3\3\2\2\2\u02b2\u02af\3\2\2\2\u02b3\u02b6")
        buf.write("\3\2\2\2\u02b4\u02b2\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5")
        buf.write("\u02b7\3\2\2\2\u02b6\u02b4\3\2\2\2\u02b7\u02b9\7h\2\2")
        buf.write("\u02b8\u02ad\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02bb\3")
        buf.write("\2\2\2\u02ba\u02bc\5\u008cG\2\u02bb\u02ba\3\2\2\2\u02bb")
        buf.write("\u02bc\3\2\2\2\u02bc]\3\2\2\2\u02bd\u02be\7+\2\2\u02be")
        buf.write("\u02c0\7N\2\2\u02bf\u02c1\5\u008cG\2\u02c0\u02bf\3\2\2")
        buf.write("\2\u02c0\u02c1\3\2\2\2\u02c1_\3\2\2\2\u02c2\u02c3\7.\2")
        buf.write("\2\u02c3\u02c4\7N\2\2\u02c4\u02c6\5\b\5\2\u02c5\u02c7")
        buf.write("\5\u008cG\2\u02c6\u02c5\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7")
        buf.write("\u02cb\3\2\2\2\u02c8\u02ca\5D#\2\u02c9\u02c8\3\2\2\2\u02ca")
        buf.write("\u02cd\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cb\u02cc\3\2\2\2")
        buf.write("\u02cc\u02cf\3\2\2\2\u02cd\u02cb\3\2\2\2\u02ce\u02d0\5")
        buf.write("L\'\2\u02cf\u02ce\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0a\3")
        buf.write("\2\2\2\u02d1\u02d2\7/\2\2\u02d2\u02d3\7N\2\2\u02d3\u02d5")
        buf.write("\5\b\5\2\u02d4\u02d6\5\u008cG\2\u02d5\u02d4\3\2\2\2\u02d5")
        buf.write("\u02d6\3\2\2\2\u02d6\u02da\3\2\2\2\u02d7\u02d9\5D#\2\u02d8")
        buf.write("\u02d7\3\2\2\2\u02d9\u02dc\3\2\2\2\u02da\u02d8\3\2\2\2")
        buf.write("\u02da\u02db\3\2\2\2\u02db\u02de\3\2\2\2\u02dc\u02da\3")
        buf.write("\2\2\2\u02dd\u02df\5L\'\2\u02de\u02dd\3\2\2\2\u02de\u02df")
        buf.write("\3\2\2\2\u02dfc\3\2\2\2\u02e0\u02e1\7,\2\2\u02e1\u02e4")
        buf.write("\7N\2\2\u02e2\u02e5\5\b\5\2\u02e3\u02e5\5\u0092J\2\u02e4")
        buf.write("\u02e2\3\2\2\2\u02e4\u02e3\3\2\2\2\u02e4\u02e5\3\2\2\2")
        buf.write("\u02e5\u02e7\3\2\2\2\u02e6\u02e8\5\u008cG\2\u02e7\u02e6")
        buf.write("\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02ec\3\2\2\2\u02e9")
        buf.write("\u02eb\5D#\2\u02ea\u02e9\3\2\2\2\u02eb\u02ee\3\2\2\2\u02ec")
        buf.write("\u02ea\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02f0\3\2\2\2")
        buf.write("\u02ee\u02ec\3\2\2\2\u02ef\u02f1\5L\'\2\u02f0\u02ef\3")
        buf.write("\2\2\2\u02f0\u02f1\3\2\2\2\u02f1e\3\2\2\2\u02f2\u02f3")
        buf.write("\7-\2\2\u02f3\u02f4\7N\2\2\u02f4g\3\2\2\2\u02f5\u02f6")
        buf.write("\7\60\2\2\u02f6\u02f7\7N\2\2\u02f7\u02f8\5@!\2\u02f8\u02f9")
        buf.write("\7b\2\2\u02f9\u02ff\7Q\2\2\u02fa\u02fb\5\u0098M\2\u02fb")
        buf.write("\u02fc\7Q\2\2\u02fc\u02fe\3\2\2\2\u02fd\u02fa\3\2\2\2")
        buf.write("\u02fe\u0301\3\2\2\2\u02ff\u02fd\3\2\2\2\u02ff\u0300\3")
        buf.write("\2\2\2\u0300\u0302\3\2\2\2\u0301\u02ff\3\2\2\2\u0302\u0304")
        buf.write("\7h\2\2\u0303\u0305\5\u008cG\2\u0304\u0303\3\2\2\2\u0304")
        buf.write("\u0305\3\2\2\2\u0305\u0309\3\2\2\2\u0306\u0308\5D#\2\u0307")
        buf.write("\u0306\3\2\2\2\u0308\u030b\3\2\2\2\u0309\u0307\3\2\2\2")
        buf.write("\u0309\u030a\3\2\2\2\u030ai\3\2\2\2\u030b\u0309\3\2\2")
        buf.write("\2\u030c\u030f\7\61\2\2\u030d\u0310\5r:\2\u030e\u0310")
        buf.write("\5t;\2\u030f\u030d\3\2\2\2\u030f\u030e\3\2\2\2\u0310\u0314")
        buf.write("\3\2\2\2\u0311\u0313\5D#\2\u0312\u0311\3\2\2\2\u0313\u0316")
        buf.write("\3\2\2\2\u0314\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315")
        buf.write("\u0318\3\2\2\2\u0316\u0314\3\2\2\2\u0317\u0319\5L\'\2")
        buf.write("\u0318\u0317\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u031b\3")
        buf.write("\2\2\2\u031a\u031c\5\u008cG\2\u031b\u031a\3\2\2\2\u031b")
        buf.write("\u031c\3\2\2\2\u031ck\3\2\2\2\u031d\u031e\7\62\2\2\u031e")
        buf.write("\u0320\7N\2\2\u031f\u0321\5\u008cG\2\u0320\u031f\3\2\2")
        buf.write("\2\u0320\u0321\3\2\2\2\u0321m\3\2\2\2\u0322\u0323\7\63")
        buf.write("\2\2\u0323\u0324\7N\2\2\u0324\u0326\5@!\2\u0325\u0327")
        buf.write("\5\b\5\2\u0326\u0325\3\2\2\2\u0326\u0327\3\2\2\2\u0327")
        buf.write("\u0329\3\2\2\2\u0328\u032a\5\u008cG\2\u0329\u0328\3\2")
        buf.write("\2\2\u0329\u032a\3\2\2\2\u032a\u032e\3\2\2\2\u032b\u032d")
        buf.write("\5D#\2\u032c\u032b\3\2\2\2\u032d\u0330\3\2\2\2\u032e\u032c")
        buf.write("\3\2\2\2\u032e\u032f\3\2\2\2\u032fo\3\2\2\2\u0330\u032e")
        buf.write("\3\2\2\2\u0331\u0332\7N\2\2\u0332\u0333\7\64\2\2\u0333")
        buf.write("\u0334\7b\2\2\u0334\u0335\5\u0092J\2\u0335\u0337\7h\2")
        buf.write("\2\u0336\u0338\5L\'\2\u0337\u0336\3\2\2\2\u0337\u0338")
        buf.write("\3\2\2\2\u0338q\3\2\2\2\u0339\u033a\7N\2\2\u033a\u033c")
        buf.write("\7\30\2\2\u033b\u033d\58\35\2\u033c\u033b\3\2\2\2\u033c")
        buf.write("\u033d\3\2\2\2\u033ds\3\2\2\2\u033e\u033f\7N\2\2\u033f")
        buf.write("\u0341\7\32\2\2\u0340\u0342\58\35\2\u0341\u0340\3\2\2")
        buf.write("\2\u0341\u0342\3\2\2\2\u0342u\3\2\2\2\u0343\u0344\7Q\2")
        buf.write("\2\u0344\u0345\7[\2\2\u0345\u0346\t\6\2\2\u0346w\3\2\2")
        buf.write("\2\u0347\u0348\7\65\2\2\u0348y\3\2\2\2\u0349\u034a\t\7")
        buf.write("\2\2\u034a{\3\2\2\2\u034b\u034c\79\2\2\u034c\u034e\5\u0088")
        buf.write("E\2\u034d\u034f\7j\2\2\u034e\u034d\3\2\2\2\u034e\u034f")
        buf.write("\3\2\2\2\u034f\u0351\3\2\2\2\u0350\u034b\3\2\2\2\u0351")
        buf.write("\u0352\3\2\2\2\u0352\u0350\3\2\2\2\u0352\u0353\3\2\2\2")
        buf.write("\u0353}\3\2\2\2\u0354\u0356\t\b\2\2\u0355\u0357\5L\'\2")
        buf.write("\u0356\u0355\3\2\2\2\u0356\u0357\3\2\2\2\u0357\177\3\2")
        buf.write("\2\2\u0358\u0359\7<\2\2\u0359\u035a\5v<\2\u035a\u0081")
        buf.write("\3\2\2\2\u035b\u035c\7@\2\2\u035c\u035e\5\u0092J\2\u035d")
        buf.write("\u035f\5\u008cG\2\u035e\u035d\3\2\2\2\u035e\u035f\3\2")
        buf.write("\2\2\u035f\u0083\3\2\2\2\u0360\u0363\t\t\2\2\u0361\u0362")
        buf.write("\7N\2\2\u0362\u0364\5@!\2\u0363\u0361\3\2\2\2\u0363\u0364")
        buf.write("\3\2\2\2\u0364\u0366\3\2\2\2\u0365\u0367\5\u0092J\2\u0366")
        buf.write("\u0365\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0369\3\2\2\2")
        buf.write("\u0368\u036a\5\u008cG\2\u0369\u0368\3\2\2\2\u0369\u036a")
        buf.write("\3\2\2\2\u036a\u0085\3\2\2\2\u036b\u036c\7=\2\2\u036c")
        buf.write("\u0087\3\2\2\2\u036d\u036e\7\3\2\2\u036e\u0089\3\2\2\2")
        buf.write("\u036f\u0370\7Q\2\2\u0370\u008b\3\2\2\2\u0371\u0374\7")
        buf.write("?\2\2\u0372\u0373\7[\2\2\u0373\u0375\t\n\2\2\u0374\u0372")
        buf.write("\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u008d\3\2\2\2\u0376")
        buf.write("\u0377\7A\2\2\u0377\u0378\7N\2\2\u0378\u0379\5@!\2\u0379")
        buf.write("\u037d\5\b\5\2\u037a\u037c\5D#\2\u037b\u037a\3\2\2\2\u037c")
        buf.write("\u037f\3\2\2\2\u037d\u037b\3\2\2\2\u037d\u037e\3\2\2\2")
        buf.write("\u037e\u0381\3\2\2\2\u037f\u037d\3\2\2\2\u0380\u0382\5")
        buf.write("L\'\2\u0381\u0380\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u008f")
        buf.write("\3\2\2\2\u0383\u0384\7b\2\2\u0384\u0385\7B\2\2\u0385\u0386")
        buf.write("\5\u0092J\2\u0386\u0387\7h\2\2\u0387\u0091\3\2\2\2\u0388")
        buf.write("\u0389\bJ\1\2\u0389\u0398\5\20\t\2\u038a\u0398\5\32\16")
        buf.write("\2\u038b\u0398\7N\2\2\u038c\u0398\7g\2\2\u038d\u0398\7")
        buf.write("Q\2\2\u038e\u0398\5\u0088E\2\u038f\u0398\7O\2\2\u0390")
        buf.write("\u0392\7b\2\2\u0391\u0393\7\64\2\2\u0392\u0391\3\2\2\2")
        buf.write("\u0392\u0393\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0395\5")
        buf.write("\u0092J\2\u0395\u0396\7h\2\2\u0396\u0398\3\2\2\2\u0397")
        buf.write("\u0388\3\2\2\2\u0397\u038a\3\2\2\2\u0397\u038b\3\2\2\2")
        buf.write("\u0397\u038c\3\2\2\2\u0397\u038d\3\2\2\2\u0397\u038e\3")
        buf.write("\2\2\2\u0397\u038f\3\2\2\2\u0397\u0390\3\2\2\2\u0398\u03a6")
        buf.write("\3\2\2\2\u0399\u039a\f\r\2\2\u039a\u039b\5\u0096L\2\u039b")
        buf.write("\u039c\5\u0092J\16\u039c\u03a5\3\2\2\2\u039d\u039e\f\f")
        buf.write("\2\2\u039e\u039f\5\u0094K\2\u039f\u03a0\5\u0092J\r\u03a0")
        buf.write("\u03a5\3\2\2\2\u03a1\u03a2\f\13\2\2\u03a2\u03a3\7Y\2\2")
        buf.write("\u03a3\u03a5\5\u0092J\f\u03a4\u0399\3\2\2\2\u03a4\u039d")
        buf.write("\3\2\2\2\u03a4\u03a1\3\2\2\2\u03a5\u03a8\3\2\2\2\u03a6")
        buf.write("\u03a4\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u0093\3\2\2\2")
        buf.write("\u03a8\u03a6\3\2\2\2\u03a9\u03aa\t\13\2\2\u03aa\u0095")
        buf.write("\3\2\2\2\u03ab\u03ac\t\f\2\2\u03ac\u0097\3\2\2\2\u03ad")
        buf.write("\u03ae\t\r\2\2\u03ae\u0099\3\2\2\2\u03af\u03b0\t\16\2")
        buf.write("\2\u03b0\u009b\3\2\2\2\u0082\u009f\u00a6\u00ac\u00c6\u00c8")
        buf.write("\u00d6\u00d8\u00dc\u00e0\u00e4\u00e7\u00eb\u00ee\u00f7")
        buf.write("\u00fc\u0100\u0104\u0114\u011b\u011f\u0122\u0128\u012c")
        buf.write("\u0130\u0136\u013a\u0140\u0146\u014d\u0154\u0159\u015d")
        buf.write("\u0160\u0165\u016a\u016e\u0174\u018a\u0196\u019a\u01a2")
        buf.write("\u01ad\u01b2\u01b6\u01bc\u01c0\u01cd\u01d9\u01db\u01e1")
        buf.write("\u01e5\u01f1\u01f7\u0207\u020c\u020e\u0211\u0216\u0218")
        buf.write("\u021e\u0222\u0226\u022b\u022d\u0231\u0237\u0239\u023f")
        buf.write("\u0243\u024c\u0251\u025f\u0265\u0269\u026c\u0271\u0275")
        buf.write("\u027a\u027d\u0282\u0285\u028b\u0297\u029c\u02a1\u02a8")
        buf.write("\u02b4\u02b8\u02bb\u02c0\u02c6\u02cb\u02cf\u02d5\u02da")
        buf.write("\u02de\u02e4\u02e7\u02ec\u02f0\u02ff\u0304\u0309\u030f")
        buf.write("\u0314\u0318\u031b\u0320\u0326\u0329\u032e\u0337\u033c")
        buf.write("\u0341\u034e\u0352\u0356\u035e\u0363\u0366\u0369\u0374")
        buf.write("\u037d\u0381\u0392\u0397\u03a4\u03a6")
        return buf.getvalue()


class ReqBlockParser ( Parser ):

    grammarFileName = "ReqBlock.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'&'", "'*'", "<INVALID>", "'!'", "'`'", "'\\'", "':'", 
                     "','", "'\"'", "'='", "'>='", "'>'", "'#'", "'-'", 
                     "'<='", "'<'", "'('", "'['", "'<>'", "'%'", "'+'", 
                     "'?'", "')'", "']'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "STRING", "CHECKELECTIVES", "COMMENT", 
                      "CURLY_BRACES", "DECIDE", "DISPLAY", "FROM", "FROM_ADVICE", 
                      "HIDE_RULE", "HIGH_PRIORITY", "IN", "LOW_PRIORITY", 
                      "NOTGPA", "PROXYADVICE", "WHITESPACE", "ACCEPT", "ALLOW", 
                      "BEGIN", "BEGINSUB", "BLOCK", "BLOCKTYPE", "CLASS", 
                      "COPY_RULES", "CREDIT", "DONT_SHARE", "ENDOT", "ENDSUB", 
                      "EXCEPT", "GROUP", "HEADER_TAG", "INCLUDING", "LABEL", 
                      "LASTRES", "MAXCLASS", "MAXCREDIT", "MAXPASSFAIL", 
                      "MAXPERDISC", "MAXSPREAD", "MAXTERM", "MAXTRANSFER", 
                      "MINAREA", "MINGPA", "MINGRADE", "MINCLASS", "MINCREDIT", 
                      "MINPERDISC", "MINRES", "MINSPREAD", "MINTERM", "NONCOURSE", 
                      "OPTIONAL", "OF", "PSEUDO", "PSUEDO", "REMARK", "RULE_COMPLETE", 
                      "RULE_INCOMPLETE", "RULE_TAG", "STANDALONE", "SHARE", 
                      "TAG", "SAME_DISC", "UNDER", "WITH", "BEGINELSE", 
                      "BEGINIF", "ELSE", "ENDELSE", "ENDIF", "IF", "IS", 
                      "ISNT", "THEN", "AND", "OR", "NUMBER", "CATALOG_NUMBER", 
                      "WILD", "SYMBOL", "AMPERSAND", "ASTERISK", "AT", "BANG", 
                      "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", "DBL_QUOTE", 
                      "EQ", "GE", "GT", "HASH", "HYPHEN", "LE", "LT", "LP", 
                      "L_SQB", "NE", "PERCENT", "PLUS", "QUESTION_MARK", 
                      "RP", "R_SQB", "SEMICOLON", "SLASH", "UNDERSCORE" ]

    RULE_req_block = 0
    RULE_head = 1
    RULE_body = 2
    RULE_course_list = 3
    RULE_course_list_head_qualifier = 4
    RULE_course_list_body = 5
    RULE_course_list_body_qualifier = 6
    RULE_full_course = 7
    RULE_course_item = 8
    RULE_and_list = 9
    RULE_or_list = 10
    RULE_catalog_number = 11
    RULE_discipline = 12
    RULE_if_then = 13
    RULE_else_clause = 14
    RULE_stmt_group = 15
    RULE_stmt = 16
    RULE_begin_if = 17
    RULE_end_if = 18
    RULE_group = 19
    RULE_group_list = 20
    RULE_group_item = 21
    RULE_group_qualifier = 22
    RULE_subset = 23
    RULE_subset_qualifier = 24
    RULE_block = 25
    RULE_blocktype = 26
    RULE_allow_clause = 27
    RULE_class_credit_head = 28
    RULE_class_credit_body = 29
    RULE_allow = 30
    RULE_class_or_credit = 31
    RULE_copy_rules = 32
    RULE_display = 33
    RULE_except_list = 34
    RULE_header_tag = 35
    RULE_include_list = 36
    RULE_label = 37
    RULE_lastres = 38
    RULE_maxclass = 39
    RULE_maxcredit = 40
    RULE_maxpassfail = 41
    RULE_maxperdisc = 42
    RULE_maxspread = 43
    RULE_maxterm = 44
    RULE_maxtransfer = 45
    RULE_minarea = 46
    RULE_minclass = 47
    RULE_mincredit = 48
    RULE_mingpa = 49
    RULE_mingrade = 50
    RULE_minperdisc = 51
    RULE_minres = 52
    RULE_minspread = 53
    RULE_minterm = 54
    RULE_noncourse = 55
    RULE_num_classes = 56
    RULE_num_credits = 57
    RULE_nv_pair = 58
    RULE_optional = 59
    RULE_pseudo = 60
    RULE_remark = 61
    RULE_rule_complete = 62
    RULE_rule_tag = 63
    RULE_samedisc = 64
    RULE_share = 65
    RULE_standalone = 66
    RULE_string = 67
    RULE_symbol = 68
    RULE_tag = 69
    RULE_under = 70
    RULE_with_clause = 71
    RULE_expression = 72
    RULE_logical_op = 73
    RULE_relational_op = 74
    RULE_list_or = 75
    RULE_list_and = 76

    ruleNames =  [ "req_block", "head", "body", "course_list", "course_list_head_qualifier", 
                   "course_list_body", "course_list_body_qualifier", "full_course", 
                   "course_item", "and_list", "or_list", "catalog_number", 
                   "discipline", "if_then", "else_clause", "stmt_group", 
                   "stmt", "begin_if", "end_if", "group", "group_list", 
                   "group_item", "group_qualifier", "subset", "subset_qualifier", 
                   "block", "blocktype", "allow_clause", "class_credit_head", 
                   "class_credit_body", "allow", "class_or_credit", "copy_rules", 
                   "display", "except_list", "header_tag", "include_list", 
                   "label", "lastres", "maxclass", "maxcredit", "maxpassfail", 
                   "maxperdisc", "maxspread", "maxterm", "maxtransfer", 
                   "minarea", "minclass", "mincredit", "mingpa", "mingrade", 
                   "minperdisc", "minres", "minspread", "minterm", "noncourse", 
                   "num_classes", "num_credits", "nv_pair", "optional", 
                   "pseudo", "remark", "rule_complete", "rule_tag", "samedisc", 
                   "share", "standalone", "string", "symbol", "tag", "under", 
                   "with_clause", "expression", "logical_op", "relational_op", 
                   "list_or", "list_and" ]

    EOF = Token.EOF
    STRING=1
    CHECKELECTIVES=2
    COMMENT=3
    CURLY_BRACES=4
    DECIDE=5
    DISPLAY=6
    FROM=7
    FROM_ADVICE=8
    HIDE_RULE=9
    HIGH_PRIORITY=10
    IN=11
    LOW_PRIORITY=12
    NOTGPA=13
    PROXYADVICE=14
    WHITESPACE=15
    ACCEPT=16
    ALLOW=17
    BEGIN=18
    BEGINSUB=19
    BLOCK=20
    BLOCKTYPE=21
    CLASS=22
    COPY_RULES=23
    CREDIT=24
    DONT_SHARE=25
    ENDOT=26
    ENDSUB=27
    EXCEPT=28
    GROUP=29
    HEADER_TAG=30
    INCLUDING=31
    LABEL=32
    LASTRES=33
    MAXCLASS=34
    MAXCREDIT=35
    MAXPASSFAIL=36
    MAXPERDISC=37
    MAXSPREAD=38
    MAXTERM=39
    MAXTRANSFER=40
    MINAREA=41
    MINGPA=42
    MINGRADE=43
    MINCLASS=44
    MINCREDIT=45
    MINPERDISC=46
    MINRES=47
    MINSPREAD=48
    MINTERM=49
    NONCOURSE=50
    OPTIONAL=51
    OF=52
    PSEUDO=53
    PSUEDO=54
    REMARK=55
    RULE_COMPLETE=56
    RULE_INCOMPLETE=57
    RULE_TAG=58
    STANDALONE=59
    SHARE=60
    TAG=61
    SAME_DISC=62
    UNDER=63
    WITH=64
    BEGINELSE=65
    BEGINIF=66
    ELSE=67
    ENDELSE=68
    ENDIF=69
    IF=70
    IS=71
    ISNT=72
    THEN=73
    AND=74
    OR=75
    NUMBER=76
    CATALOG_NUMBER=77
    WILD=78
    SYMBOL=79
    AMPERSAND=80
    ASTERISK=81
    AT=82
    BANG=83
    BACKQUOTE=84
    BACKSLASH=85
    COLON=86
    COMMA=87
    DBL_QUOTE=88
    EQ=89
    GE=90
    GT=91
    HASH=92
    HYPHEN=93
    LE=94
    LT=95
    LP=96
    L_SQB=97
    NE=98
    PERCENT=99
    PLUS=100
    QUESTION_MARK=101
    RP=102
    R_SQB=103
    SEMICOLON=104
    SLASH=105
    UNDERSCORE=106

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Req_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(ReqBlockParser.BEGIN, 0)

        def head(self):
            return self.getTypedRuleContext(ReqBlockParser.HeadContext,0)


        def ENDOT(self):
            return self.getToken(ReqBlockParser.ENDOT, 0)

        def EOF(self):
            return self.getToken(ReqBlockParser.EOF, 0)

        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def body(self):
            return self.getTypedRuleContext(ReqBlockParser.BodyContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_req_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReq_block" ):
                listener.enterReq_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReq_block" ):
                listener.exitReq_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReq_block" ):
                return visitor.visitReq_block(self)
            else:
                return visitor.visitChildren(self)




    def req_block(self):

        localctx = ReqBlockParser.Req_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_req_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 157
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 154
                    self.matchWildcard() 
                self.state = 159
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 160
            self.match(ReqBlockParser.BEGIN)
            self.state = 161
            self.head()
            self.state = 164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.SEMICOLON:
                self.state = 162
                self.match(ReqBlockParser.SEMICOLON)
                self.state = 163
                self.body()


            self.state = 166
            self.match(ReqBlockParser.ENDOT)
            self.state = 170
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 167
                    self.matchWildcard() 
                self.state = 172
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 173
            self.match(ReqBlockParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_credit_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_headContext,i)


        def if_then(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.If_thenContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.If_thenContext,i)


        def lastres(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LastresContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LastresContext,i)


        def maxclass(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxclassContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxclassContext,i)


        def maxcredit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxcreditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,i)


        def maxpassfail(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxpassfailContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,i)


        def maxperdisc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxperdiscContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,i)


        def maxterm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxtermContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxtermContext,i)


        def maxtransfer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxtransferContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,i)


        def mingrade(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MingradeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MingradeContext,i)


        def minclass(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MinclassContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MinclassContext,i)


        def mincredit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MincreditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MincreditContext,i)


        def mingpa(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MingpaContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MingpaContext,i)


        def minperdisc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MinperdiscContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,i)


        def minres(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MinresContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MinresContext,i)


        def optional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.OptionalContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.OptionalContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def standalone(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StandaloneContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StandaloneContext,i)


        def subset(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.SubsetContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.SubsetContext,i)


        def under(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.UnderContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.UnderContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead" ):
                listener.enterHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead" ):
                listener.exitHead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHead" ):
                return visitor.visitHead(self)
            else:
                return visitor.visitChildren(self)




    def head(self):

        localctx = ReqBlockParser.HeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & ((1 << (ReqBlockParser.BEGINSUB - 19)) | (1 << (ReqBlockParser.DONT_SHARE - 19)) | (1 << (ReqBlockParser.LASTRES - 19)) | (1 << (ReqBlockParser.MAXCLASS - 19)) | (1 << (ReqBlockParser.MAXCREDIT - 19)) | (1 << (ReqBlockParser.MAXPASSFAIL - 19)) | (1 << (ReqBlockParser.MAXPERDISC - 19)) | (1 << (ReqBlockParser.MAXTERM - 19)) | (1 << (ReqBlockParser.MAXTRANSFER - 19)) | (1 << (ReqBlockParser.MINGPA - 19)) | (1 << (ReqBlockParser.MINGRADE - 19)) | (1 << (ReqBlockParser.MINCLASS - 19)) | (1 << (ReqBlockParser.MINCREDIT - 19)) | (1 << (ReqBlockParser.MINPERDISC - 19)) | (1 << (ReqBlockParser.MINRES - 19)) | (1 << (ReqBlockParser.OPTIONAL - 19)) | (1 << (ReqBlockParser.REMARK - 19)) | (1 << (ReqBlockParser.STANDALONE - 19)) | (1 << (ReqBlockParser.SHARE - 19)) | (1 << (ReqBlockParser.UNDER - 19)) | (1 << (ReqBlockParser.IF - 19)) | (1 << (ReqBlockParser.NUMBER - 19)))) != 0):
                self.state = 196
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ReqBlockParser.NUMBER]:
                    self.state = 175
                    self.class_credit_head()
                    pass
                elif token in [ReqBlockParser.IF]:
                    self.state = 176
                    self.if_then()
                    pass
                elif token in [ReqBlockParser.LASTRES]:
                    self.state = 177
                    self.lastres()
                    pass
                elif token in [ReqBlockParser.MAXCLASS]:
                    self.state = 178
                    self.maxclass()
                    pass
                elif token in [ReqBlockParser.MAXCREDIT]:
                    self.state = 179
                    self.maxcredit()
                    pass
                elif token in [ReqBlockParser.MAXPASSFAIL]:
                    self.state = 180
                    self.maxpassfail()
                    pass
                elif token in [ReqBlockParser.MAXPERDISC]:
                    self.state = 181
                    self.maxperdisc()
                    pass
                elif token in [ReqBlockParser.MAXTERM]:
                    self.state = 182
                    self.maxterm()
                    pass
                elif token in [ReqBlockParser.MAXTRANSFER]:
                    self.state = 183
                    self.maxtransfer()
                    pass
                elif token in [ReqBlockParser.MINGRADE]:
                    self.state = 184
                    self.mingrade()
                    pass
                elif token in [ReqBlockParser.MINCLASS]:
                    self.state = 185
                    self.minclass()
                    pass
                elif token in [ReqBlockParser.MINCREDIT]:
                    self.state = 186
                    self.mincredit()
                    pass
                elif token in [ReqBlockParser.MINGPA]:
                    self.state = 187
                    self.mingpa()
                    pass
                elif token in [ReqBlockParser.MINPERDISC]:
                    self.state = 188
                    self.minperdisc()
                    pass
                elif token in [ReqBlockParser.MINRES]:
                    self.state = 189
                    self.minres()
                    pass
                elif token in [ReqBlockParser.OPTIONAL]:
                    self.state = 190
                    self.optional()
                    pass
                elif token in [ReqBlockParser.REMARK]:
                    self.state = 191
                    self.remark()
                    pass
                elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                    self.state = 192
                    self.share()
                    pass
                elif token in [ReqBlockParser.STANDALONE]:
                    self.state = 193
                    self.standalone()
                    pass
                elif token in [ReqBlockParser.BEGINSUB]:
                    self.state = 194
                    self.subset()
                    pass
                elif token in [ReqBlockParser.UNDER]:
                    self.state = 195
                    self.under()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 200
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def class_credit_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.GroupContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.GroupContext,i)


        def if_then(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.If_thenContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.If_thenContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def subset(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.SubsetContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.SubsetContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = ReqBlockParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & ((1 << (ReqBlockParser.BEGINSUB - 19)) | (1 << (ReqBlockParser.COPY_RULES - 19)) | (1 << (ReqBlockParser.LABEL - 19)) | (1 << (ReqBlockParser.REMARK - 19)) | (1 << (ReqBlockParser.RULE_COMPLETE - 19)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 19)) | (1 << (ReqBlockParser.IF - 19)) | (1 << (ReqBlockParser.NUMBER - 19)))) != 0):
                self.state = 212
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 201
                    self.block()
                    pass

                elif la_ == 2:
                    self.state = 202
                    self.blocktype()
                    pass

                elif la_ == 3:
                    self.state = 203
                    self.class_credit_body()
                    pass

                elif la_ == 4:
                    self.state = 204
                    self.copy_rules()
                    pass

                elif la_ == 5:
                    self.state = 205
                    self.group()
                    pass

                elif la_ == 6:
                    self.state = 206
                    self.if_then()
                    pass

                elif la_ == 7:
                    self.state = 207
                    self.label()
                    pass

                elif la_ == 8:
                    self.state = 208
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 209
                    self.remark()
                    pass

                elif la_ == 10:
                    self.state = 210
                    self.rule_complete()
                    pass

                elif la_ == 11:
                    self.state = 211
                    self.subset()
                    pass


                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def L_SQB(self):
            return self.getToken(ReqBlockParser.L_SQB, 0)

        def R_SQB(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.R_SQB)
            else:
                return self.getToken(ReqBlockParser.R_SQB, i)

        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def except_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Except_listContext,0)


        def include_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Include_listContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list" ):
                listener.enterCourse_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list" ):
                listener.exitCourse_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list" ):
                return visitor.visitCourse_list(self)
            else:
                return visitor.visitChildren(self)




    def course_list(self):

        localctx = ReqBlockParser.Course_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_course_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 217
                self.match(ReqBlockParser.L_SQB)


            self.state = 220
            self.course_item()
            self.state = 222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 221
                self.match(ReqBlockParser.R_SQB)


            self.state = 226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 224
                self.and_list()

            elif la_ == 2:
                self.state = 225
                self.or_list()


            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.R_SQB:
                self.state = 228
                self.match(ReqBlockParser.R_SQB)


            self.state = 233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.EXCEPT]:
                self.state = 231
                self.except_list()
                pass
            elif token in [ReqBlockParser.INCLUDING]:
                self.state = 232
                self.include_list()
                pass
            elif token in [ReqBlockParser.EOF, ReqBlockParser.STRING, ReqBlockParser.DISPLAY, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.ENDOT, ReqBlockParser.ENDSUB, ReqBlockParser.LABEL, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXSPREAD, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINAREA, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINSPREAD, ReqBlockParser.OPTIONAL, ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.RULE_TAG, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.TAG, ReqBlockParser.SAME_DISC, ReqBlockParser.UNDER, ReqBlockParser.ELSE, ReqBlockParser.ENDELSE, ReqBlockParser.ENDIF, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.AND, ReqBlockParser.OR, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB, ReqBlockParser.RP, ReqBlockParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 235
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_head_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def header_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_head_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_head_qualifier" ):
                listener.enterCourse_list_head_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_head_qualifier" ):
                listener.exitCourse_list_head_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_head_qualifier" ):
                return visitor.visitCourse_list_head_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def course_list_head_qualifier(self):

        localctx = ReqBlockParser.Course_list_head_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_course_list_head_qualifier)
        try:
            self.state = 245
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 238
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 239
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 240
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 241
                self.minspread()
                pass
            elif token in [ReqBlockParser.HEADER_TAG]:
                self.enterOuterAlt(localctx, 5)
                self.state = 242
                self.header_tag()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 243
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 244
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def course_list_body_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_body_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_body_qualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_body" ):
                listener.enterCourse_list_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_body" ):
                listener.exitCourse_list_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_body" ):
                return visitor.visitCourse_list_body(self)
            else:
                return visitor.visitChildren(self)




    def course_list_body(self):

        localctx = ReqBlockParser.Course_list_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_course_list_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.course_list()
            self.state = 254
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 248
                    self.course_list_body_qualifier()
                    self.state = 250
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                    if la_ == 1:
                        self.state = 249
                        self.tag()

             
                self.state = 256
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

            self.state = 258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 257
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_body_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minarea(self):
            return self.getTypedRuleContext(ReqBlockParser.MinareaContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_body_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_body_qualifier" ):
                listener.enterCourse_list_body_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_body_qualifier" ):
                listener.exitCourse_list_body_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_body_qualifier" ):
                return visitor.visitCourse_list_body_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def course_list_body_qualifier(self):

        localctx = ReqBlockParser.Course_list_body_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_course_list_body_qualifier)
        try:
            self.state = 274
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 260
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 261
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 262
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 263
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINAREA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 264
                self.minarea()
                pass
            elif token in [ReqBlockParser.MINCLASS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 265
                self.minclass()
                pass
            elif token in [ReqBlockParser.MINCREDIT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 266
                self.mincredit()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 8)
                self.state = 267
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 268
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 269
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 11)
                self.state = 270
                self.minspread()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 12)
                self.state = 271
                self.rule_tag()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 13)
                self.state = 272
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 273
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_courseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_full_course

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_course" ):
                listener.enterFull_course(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_course" ):
                listener.exitFull_course(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_course" ):
                return visitor.visitFull_course(self)
            else:
                return visitor.visitChildren(self)




    def full_course(self):

        localctx = ReqBlockParser.Full_courseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_full_course)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.discipline()
            self.state = 277
            self.catalog_number()
            self.state = 281
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 278
                    self.with_clause() 
                self.state = 283
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def L_SQB(self):
            return self.getToken(ReqBlockParser.L_SQB, 0)

        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def R_SQB(self):
            return self.getToken(ReqBlockParser.R_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_item" ):
                listener.enterCourse_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_item" ):
                listener.exitCourse_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_item" ):
                return visitor.visitCourse_item(self)
            else:
                return visitor.visitChildren(self)




    def course_item(self):

        localctx = ReqBlockParser.Course_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_course_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.L_SQB:
                self.state = 284
                self.match(ReqBlockParser.L_SQB)


            self.state = 288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 287
                self.discipline()


            self.state = 290
            self.catalog_number()
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.LP:
                self.state = 291
                self.with_clause()
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 297
                self.match(ReqBlockParser.R_SQB)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_andContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_andContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def R_SQB(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.R_SQB)
            else:
                return self.getToken(ReqBlockParser.R_SQB, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_and_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_list" ):
                listener.enterAnd_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_list" ):
                listener.exitAnd_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_list" ):
                return visitor.visitAnd_list(self)
            else:
                return visitor.visitChildren(self)




    def and_list(self):

        localctx = ReqBlockParser.And_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_and_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 300
                    self.list_and()
                    self.state = 302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ReqBlockParser.R_SQB:
                        self.state = 301
                        self.match(ReqBlockParser.R_SQB)


                    self.state = 304
                    self.course_item()

                else:
                    raise NoViableAltException(self)
                self.state = 308 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def R_SQB(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.R_SQB)
            else:
                return self.getToken(ReqBlockParser.R_SQB, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_or_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_list" ):
                listener.enterOr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_list" ):
                listener.exitOr_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_list" ):
                return visitor.visitOr_list(self)
            else:
                return visitor.visitChildren(self)




    def or_list(self):

        localctx = ReqBlockParser.Or_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_or_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 310
                    self.list_or()
                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ReqBlockParser.R_SQB:
                        self.state = 311
                        self.match(ReqBlockParser.R_SQB)


                    self.state = 314
                    self.course_item()

                else:
                    raise NoViableAltException(self)
                self.state = 318 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catalog_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_catalog_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalog_number" ):
                listener.enterCatalog_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalog_number" ):
                listener.exitCatalog_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatalog_number" ):
                return visitor.visitCatalog_number(self)
            else:
                return visitor.visitChildren(self)




    def catalog_number(self):

        localctx = ReqBlockParser.Catalog_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_catalog_number)
        try:
            self.state = 324
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 320
                self.symbol()
                pass
            elif token in [ReqBlockParser.NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 321
                self.match(ReqBlockParser.NUMBER)
                pass
            elif token in [ReqBlockParser.CATALOG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 322
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 323
                self.match(ReqBlockParser.WILD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisciplineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_discipline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscipline" ):
                listener.enterDiscipline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscipline" ):
                listener.exitDiscipline(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscipline" ):
                return visitor.visitDiscipline(self)
            else:
                return visitor.visitChildren(self)




    def discipline(self):

        localctx = ReqBlockParser.DisciplineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_discipline)
        try:
            self.state = 331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 326
                self.symbol()
                pass
            elif token in [ReqBlockParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 327
                self.string()
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 328
                self.match(ReqBlockParser.WILD)
                pass
            elif token in [ReqBlockParser.BLOCK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 329
                self.match(ReqBlockParser.BLOCK)
                pass
            elif token in [ReqBlockParser.IS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 330
                self.match(ReqBlockParser.IS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_thenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def stmt(self):
            return self.getTypedRuleContext(ReqBlockParser.StmtContext,0)


        def stmt_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Stmt_groupContext,0)


        def group_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_qualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def else_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Else_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_if_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_then" ):
                listener.enterIf_then(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_then" ):
                listener.exitIf_then(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_then" ):
                return visitor.visitIf_then(self)
            else:
                return visitor.visitChildren(self)




    def if_then(self):

        localctx = ReqBlockParser.If_thenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_if_then)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(ReqBlockParser.IF)
            self.state = 334
            self.expression(0)
            self.state = 335
            self.match(ReqBlockParser.THEN)
            self.state = 338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.BEGINSUB, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINRES, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 336
                self.stmt()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 337
                self.stmt_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 343
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 340
                    self.group_qualifier() 
                self.state = 345
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 346
                self.label()


            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 349
                self.else_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def stmt(self):
            return self.getTypedRuleContext(ReqBlockParser.StmtContext,0)


        def stmt_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Stmt_groupContext,0)


        def group_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_qualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_clause" ):
                return visitor.visitElse_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_clause(self):

        localctx = ReqBlockParser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_else_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(ReqBlockParser.ELSE)
            self.state = 355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.BEGINSUB, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINRES, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 353
                self.stmt()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 354
                self.stmt_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 360
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 357
                    self.group_qualifier() 
                self.state = 362
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

            self.state = 364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 363
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stmt_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StmtContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StmtContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_stmt_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt_group" ):
                listener.enterStmt_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt_group" ):
                listener.exitStmt_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt_group" ):
                return visitor.visitStmt_group(self)
            else:
                return visitor.visitChildren(self)




    def stmt_group(self):

        localctx = ReqBlockParser.Stmt_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_stmt_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.begin_if()
            self.state = 368 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 367
                self.stmt()
                self.state = 370 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & ((1 << (ReqBlockParser.BEGINSUB - 19)) | (1 << (ReqBlockParser.COPY_RULES - 19)) | (1 << (ReqBlockParser.DONT_SHARE - 19)) | (1 << (ReqBlockParser.LASTRES - 19)) | (1 << (ReqBlockParser.MAXCREDIT - 19)) | (1 << (ReqBlockParser.MAXTRANSFER - 19)) | (1 << (ReqBlockParser.MINGRADE - 19)) | (1 << (ReqBlockParser.MINCLASS - 19)) | (1 << (ReqBlockParser.MINCREDIT - 19)) | (1 << (ReqBlockParser.MINRES - 19)) | (1 << (ReqBlockParser.REMARK - 19)) | (1 << (ReqBlockParser.RULE_COMPLETE - 19)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 19)) | (1 << (ReqBlockParser.SHARE - 19)) | (1 << (ReqBlockParser.IF - 19)) | (1 << (ReqBlockParser.NUMBER - 19)))) != 0)):
                    break

            self.state = 372
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_then(self):
            return self.getTypedRuleContext(ReqBlockParser.If_thenContext,0)


        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def class_credit_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,0)


        def copy_rules(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,0)


        def group(self):
            return self.getTypedRuleContext(ReqBlockParser.GroupContext,0)


        def lastres(self):
            return self.getTypedRuleContext(ReqBlockParser.LastresContext,0)


        def maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minres(self):
            return self.getTypedRuleContext(ReqBlockParser.MinresContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def subset(self):
            return self.getTypedRuleContext(ReqBlockParser.SubsetContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = ReqBlockParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_stmt)
        try:
            self.state = 392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.if_then()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 376
                self.blocktype()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 377
                self.class_credit_body()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 378
                self.copy_rules()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 379
                self.group()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 380
                self.lastres()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 381
                self.maxcredit()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 382
                self.maxtransfer()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 383
                self.minclass()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 384
                self.mincredit()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 385
                self.mingrade()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 386
                self.minres()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 387
                self.noncourse()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 388
                self.remark()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 389
                self.rule_complete()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 390
                self.share()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 391
                self.subset()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINIF(self):
            return self.getToken(ReqBlockParser.BEGINIF, 0)

        def BEGINELSE(self):
            return self.getToken(ReqBlockParser.BEGINELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_begin_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_if" ):
                listener.enterBegin_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_if" ):
                listener.exitBegin_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBegin_if" ):
                return visitor.visitBegin_if(self)
            else:
                return visitor.visitChildren(self)




    def begin_if(self):

        localctx = ReqBlockParser.Begin_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_begin_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.BEGINELSE or _la==ReqBlockParser.BEGINIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENDIF(self):
            return self.getToken(ReqBlockParser.ENDIF, 0)

        def ENDELSE(self):
            return self.getToken(ReqBlockParser.ENDELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_end_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_if" ):
                listener.enterEnd_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_if" ):
                listener.exitEnd_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnd_if" ):
                return visitor.visitEnd_if(self)
            else:
                return visitor.visitChildren(self)




    def end_if(self):

        localctx = ReqBlockParser.End_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_end_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.ENDELSE or _la==ReqBlockParser.ENDIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def GROUP(self):
            return self.getToken(ReqBlockParser.GROUP, 0)

        def group_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_listContext,0)


        def group_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_qualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = ReqBlockParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(ReqBlockParser.NUMBER)
            self.state = 399
            self.match(ReqBlockParser.GROUP)
            self.state = 400
            self.group_list()
            self.state = 404
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 401
                    self.group_qualifier() 
                self.state = 406
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

            self.state = 408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 407
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_itemContext,i)


        def logical_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Logical_opContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_list" ):
                listener.enterGroup_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_list" ):
                listener.exitGroup_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_list" ):
                return visitor.visitGroup_list(self)
            else:
                return visitor.visitChildren(self)




    def group_list(self):

        localctx = ReqBlockParser.Group_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.group_item()
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 411
                self.logical_op()
                self.state = 412
                self.group_item()
                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def class_credit_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,0)


        def group(self):
            return self.getTypedRuleContext(ReqBlockParser.GroupContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def group_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_qualifierContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_item" ):
                listener.enterGroup_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_item" ):
                listener.exitGroup_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_item" ):
                return visitor.visitGroup_item(self)
            else:
                return visitor.visitChildren(self)




    def group_item(self):

        localctx = ReqBlockParser.Group_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_group_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(ReqBlockParser.LP)
            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 420
                self.block()
                pass

            elif la_ == 2:
                self.state = 421
                self.blocktype()
                pass

            elif la_ == 3:
                self.state = 422
                self.course_list()
                pass

            elif la_ == 4:
                self.state = 423
                self.class_credit_body()
                pass

            elif la_ == 5:
                self.state = 424
                self.group()
                pass

            elif la_ == 6:
                self.state = 425
                self.noncourse()
                pass

            elif la_ == 7:
                self.state = 426
                self.rule_complete()
                pass


            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.DONT_SHARE) | (1 << ReqBlockParser.MAXPASSFAIL) | (1 << ReqBlockParser.MAXPERDISC) | (1 << ReqBlockParser.MAXTRANSFER) | (1 << ReqBlockParser.MINGPA) | (1 << ReqBlockParser.MINGRADE) | (1 << ReqBlockParser.MINCLASS) | (1 << ReqBlockParser.MINCREDIT) | (1 << ReqBlockParser.MINPERDISC) | (1 << ReqBlockParser.RULE_TAG) | (1 << ReqBlockParser.SHARE) | (1 << ReqBlockParser.SAME_DISC))) != 0):
                self.state = 429
                self.group_qualifier()
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 435
                self.label()


            self.state = 438
            self.match(ReqBlockParser.RP)
            self.state = 442
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 439
                    self.group_qualifier() 
                self.state = 444
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

            self.state = 446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 445
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_qualifier" ):
                listener.enterGroup_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_qualifier" ):
                listener.exitGroup_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_qualifier" ):
                return visitor.visitGroup_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def group_qualifier(self):

        localctx = ReqBlockParser.Group_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_group_qualifier)
        try:
            self.state = 459
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 448
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 449
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 450
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINCLASS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 451
                self.minclass()
                pass
            elif token in [ReqBlockParser.MINCREDIT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 452
                self.mincredit()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 6)
                self.state = 453
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 454
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 8)
                self.state = 455
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 9)
                self.state = 456
                self.samedisc()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 10)
                self.state = 457
                self.rule_tag()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 458
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINSUB(self):
            return self.getToken(ReqBlockParser.BEGINSUB, 0)

        def ENDSUB(self):
            return self.getToken(ReqBlockParser.ENDSUB, 0)

        def if_then(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.If_thenContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.If_thenContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def class_credit_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def course_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_listContext,i)


        def group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.GroupContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.GroupContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def subset_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Subset_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Subset_qualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_subset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubset" ):
                listener.enterSubset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubset" ):
                listener.exitSubset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubset" ):
                return visitor.visitSubset(self)
            else:
                return visitor.visitChildren(self)




    def subset(self):

        localctx = ReqBlockParser.SubsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_subset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(ReqBlockParser.BEGINSUB)
            self.state = 471 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 471
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 462
                    self.if_then()
                    pass

                elif la_ == 2:
                    self.state = 463
                    self.block()
                    pass

                elif la_ == 3:
                    self.state = 464
                    self.blocktype()
                    pass

                elif la_ == 4:
                    self.state = 465
                    self.class_credit_body()
                    pass

                elif la_ == 5:
                    self.state = 466
                    self.copy_rules()
                    pass

                elif la_ == 6:
                    self.state = 467
                    self.course_list()
                    pass

                elif la_ == 7:
                    self.state = 468
                    self.group()
                    pass

                elif la_ == 8:
                    self.state = 469
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 470
                    self.rule_complete()
                    pass


                self.state = 473 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.STRING) | (1 << ReqBlockParser.BLOCK) | (1 << ReqBlockParser.COPY_RULES) | (1 << ReqBlockParser.RULE_COMPLETE) | (1 << ReqBlockParser.RULE_INCOMPLETE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ReqBlockParser.IF - 70)) | (1 << (ReqBlockParser.IS - 70)) | (1 << (ReqBlockParser.NUMBER - 70)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 70)) | (1 << (ReqBlockParser.WILD - 70)) | (1 << (ReqBlockParser.SYMBOL - 70)) | (1 << (ReqBlockParser.L_SQB - 70)))) != 0)):
                    break

            self.state = 475
            self.match(ReqBlockParser.ENDSUB)
            self.state = 479
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 476
                    self.subset_qualifier() 
                self.state = 481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 482
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subset_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_subset_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubset_qualifier" ):
                listener.enterSubset_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubset_qualifier" ):
                listener.exitSubset_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubset_qualifier" ):
                return visitor.visitSubset_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def subset_qualifier(self):

        localctx = ReqBlockParser.Subset_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_subset_qualifier)
        try:
            self.state = 495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 485
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 486
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 487
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 488
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 489
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 490
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 7)
                self.state = 491
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 492
                self.minspread()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 9)
                self.state = 493
                self.rule_tag()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 494
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ReqBlockParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(ReqBlockParser.NUMBER)
            self.state = 498
            self.match(ReqBlockParser.BLOCK)
            self.state = 499
            self.expression(0)
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.RULE_TAG:
                self.state = 500
                self.rule_tag()


            self.state = 503
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlocktypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCKTYPE(self):
            return self.getToken(ReqBlockParser.BLOCKTYPE, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_blocktype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlocktype" ):
                listener.enterBlocktype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlocktype" ):
                listener.exitBlocktype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlocktype" ):
                return visitor.visitBlocktype(self)
            else:
                return visitor.visitChildren(self)




    def blocktype(self):

        localctx = ReqBlockParser.BlocktypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_blocktype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(ReqBlockParser.NUMBER)
            self.state = 506
            self.match(ReqBlockParser.BLOCKTYPE)
            self.state = 507
            self.expression(0)
            self.state = 508
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allow_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def allow(self):
            return self.getTypedRuleContext(ReqBlockParser.AllowContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow_clause" ):
                listener.enterAllow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow_clause" ):
                listener.exitAllow_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow_clause" ):
                return visitor.visitAllow_clause(self)
            else:
                return visitor.visitChildren(self)




    def allow_clause(self):

        localctx = ReqBlockParser.Allow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_allow_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.match(ReqBlockParser.LP)
            self.state = 511
            self.allow()
            self.state = 512
            self.match(ReqBlockParser.NUMBER)
            self.state = 513
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_credit_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def pseudo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.PseudoContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.PseudoContext,i)


        def header_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.IS)
            else:
                return self.getToken(ReqBlockParser.IS, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_credit_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_credit_head" ):
                listener.enterClass_credit_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_credit_head" ):
                listener.exitClass_credit_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_credit_head" ):
                return visitor.visitClass_credit_head(self)
            else:
                return visitor.visitChildren(self)




    def class_credit_head(self):

        localctx = ReqBlockParser.Class_credit_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_class_credit_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 515
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 516
                self.num_credits()
                pass


            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 519
                self.logical_op()
                self.state = 522
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 520
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 521
                    self.num_credits()
                    pass




            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (ReqBlockParser.HEADER_TAG - 30)) | (1 << (ReqBlockParser.PSEUDO - 30)) | (1 << (ReqBlockParser.PSUEDO - 30)) | (1 << (ReqBlockParser.TAG - 30)) | (1 << (ReqBlockParser.IS - 30)))) != 0):
                self.state = 532
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.IS]:
                    self.state = 527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ReqBlockParser.IS:
                        self.state = 526
                        self.match(ReqBlockParser.IS)


                    self.state = 529
                    self.pseudo()
                    pass
                elif token in [ReqBlockParser.HEADER_TAG]:
                    self.state = 530
                    self.header_tag()
                    pass
                elif token in [ReqBlockParser.TAG]:
                    self.state = 531
                    self.tag()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 537
                self.display()
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 543
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_credit_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def course_list_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_bodyContext,i)


        def pseudo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.PseudoContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.PseudoContext,i)


        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.IS)
            else:
                return self.getToken(ReqBlockParser.IS, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_credit_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_credit_body" ):
                listener.enterClass_credit_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_credit_body" ):
                listener.exitClass_credit_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_credit_body" ):
                return visitor.visitClass_credit_body(self)
            else:
                return visitor.visitChildren(self)




    def class_credit_body(self):

        localctx = ReqBlockParser.Class_credit_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_class_credit_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 546
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 547
                self.num_credits()
                pass


            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 550
                self.logical_op()
                self.state = 553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 551
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 552
                    self.num_credits()
                    pass




            self.state = 567
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 565
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        self.state = 557
                        self.course_list_body()
                        pass

                    elif la_ == 2:
                        self.state = 559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.IS:
                            self.state = 558
                            self.match(ReqBlockParser.IS)


                        self.state = 561
                        self.pseudo()
                        pass

                    elif la_ == 3:
                        self.state = 562
                        self.share()
                        pass

                    elif la_ == 4:
                        self.state = 563
                        self.rule_tag()
                        pass

                    elif la_ == 5:
                        self.state = 564
                        self.tag()
                        pass

             
                self.state = 569
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 570
                self.display()
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 576
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW(self):
            return self.getToken(ReqBlockParser.ALLOW, 0)

        def ACCEPT(self):
            return self.getToken(ReqBlockParser.ACCEPT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow" ):
                listener.enterAllow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow" ):
                listener.exitAllow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow" ):
                return visitor.visitAllow(self)
            else:
                return visitor.visitChildren(self)




    def allow(self):

        localctx = ReqBlockParser.AllowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_allow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.ACCEPT or _la==ReqBlockParser.ALLOW):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_or_creditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_or_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_credit" ):
                listener.enterClass_or_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_credit" ):
                listener.exitClass_or_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_credit" ):
                return visitor.visitClass_or_credit(self)
            else:
                return visitor.visitChildren(self)




    def class_or_credit(self):

        localctx = ReqBlockParser.Class_or_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_class_or_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_rulesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY_RULES(self):
            return self.getToken(ReqBlockParser.COPY_RULES, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_copy_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_rules" ):
                listener.enterCopy_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_rules" ):
                listener.exitCopy_rules(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopy_rules" ):
                return visitor.visitCopy_rules(self)
            else:
                return visitor.visitChildren(self)




    def copy_rules(self):

        localctx = ReqBlockParser.Copy_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_copy_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(ReqBlockParser.COPY_RULES)
            self.state = 584
            self.expression(0)
            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 585
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(ReqBlockParser.DISPLAY, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_display

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplay" ):
                listener.enterDisplay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplay" ):
                listener.exitDisplay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplay" ):
                return visitor.visitDisplay(self)
            else:
                return visitor.visitChildren(self)




    def display(self):

        localctx = ReqBlockParser.DisplayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_display)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(ReqBlockParser.DISPLAY)
            self.state = 589
            self.string()
            self.state = 591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 590
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(ReqBlockParser.EXCEPT, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_except_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_list" ):
                listener.enterExcept_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_list" ):
                listener.exitExcept_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_list" ):
                return visitor.visitExcept_list(self)
            else:
                return visitor.visitChildren(self)




    def except_list(self):

        localctx = ReqBlockParser.Except_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_except_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(ReqBlockParser.EXCEPT)
            self.state = 594
            self.course_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_tagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEADER_TAG(self):
            return self.getToken(ReqBlockParser.HEADER_TAG, 0)

        def nv_pair(self):
            return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_tag" ):
                listener.enterHeader_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_tag" ):
                listener.exitHeader_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_tag" ):
                return visitor.visitHeader_tag(self)
            else:
                return visitor.visitChildren(self)




    def header_tag(self):

        localctx = ReqBlockParser.Header_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_header_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(ReqBlockParser.HEADER_TAG)
            self.state = 597
            self.nv_pair()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDING(self):
            return self.getToken(ReqBlockParser.INCLUDING, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_include_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_list" ):
                listener.enterInclude_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_list" ):
                listener.exitInclude_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclude_list" ):
                return visitor.visitInclude_list(self)
            else:
                return visitor.visitChildren(self)




    def include_list(self):

        localctx = ReqBlockParser.Include_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_include_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(ReqBlockParser.INCLUDING)
            self.state = 600
            self.course_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(ReqBlockParser.LABEL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = ReqBlockParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(ReqBlockParser.LABEL)
            self.state = 603
            self.string()
            self.state = 605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 604
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastresContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LASTRES(self):
            return self.getToken(ReqBlockParser.LASTRES, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.NUMBER)
            else:
                return self.getToken(ReqBlockParser.NUMBER, i)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def OF(self):
            return self.getToken(ReqBlockParser.OF, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_lastres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastres" ):
                listener.enterLastres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastres" ):
                listener.exitLastres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastres" ):
                return visitor.visitLastres(self)
            else:
                return visitor.visitChildren(self)




    def lastres(self):

        localctx = ReqBlockParser.LastresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_lastres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.match(ReqBlockParser.LASTRES)
            self.state = 608
            self.match(ReqBlockParser.NUMBER)
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.OF:
                self.state = 609
                self.match(ReqBlockParser.OF)
                self.state = 610
                self.match(ReqBlockParser.NUMBER)


            self.state = 613
            self.class_or_credit()
            self.state = 615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 614
                self.course_list()


            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 617
                self.tag()


            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 620
                self.display()
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 626
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxclassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCLASS(self):
            return self.getToken(ReqBlockParser.MAXCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxclass" ):
                listener.enterMaxclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxclass" ):
                listener.exitMaxclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxclass" ):
                return visitor.visitMaxclass(self)
            else:
                return visitor.visitChildren(self)




    def maxclass(self):

        localctx = ReqBlockParser.MaxclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_maxclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(ReqBlockParser.MAXCLASS)
            self.state = 630
            self.match(ReqBlockParser.NUMBER)
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 631
                self.course_list()


            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 634
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxcreditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCREDIT(self):
            return self.getToken(ReqBlockParser.MAXCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxcredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxcredit" ):
                listener.enterMaxcredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxcredit" ):
                listener.exitMaxcredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxcredit" ):
                return visitor.visitMaxcredit(self)
            else:
                return visitor.visitChildren(self)




    def maxcredit(self):

        localctx = ReqBlockParser.MaxcreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_maxcredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(ReqBlockParser.MAXCREDIT)
            self.state = 638
            self.match(ReqBlockParser.NUMBER)
            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 639
                self.course_list()


            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 642
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxpassfailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPASSFAIL(self):
            return self.getToken(ReqBlockParser.MAXPASSFAIL, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxpassfail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxpassfail" ):
                listener.enterMaxpassfail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxpassfail" ):
                listener.exitMaxpassfail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxpassfail" ):
                return visitor.visitMaxpassfail(self)
            else:
                return visitor.visitChildren(self)




    def maxpassfail(self):

        localctx = ReqBlockParser.MaxpassfailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_maxpassfail)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(ReqBlockParser.MAXPASSFAIL)
            self.state = 646
            self.match(ReqBlockParser.NUMBER)
            self.state = 647
            self.class_or_credit()
            self.state = 649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 648
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxperdiscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPERDISC(self):
            return self.getToken(ReqBlockParser.MAXPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxperdisc" ):
                listener.enterMaxperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxperdisc" ):
                listener.exitMaxperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxperdisc" ):
                return visitor.visitMaxperdisc(self)
            else:
                return visitor.visitChildren(self)




    def maxperdisc(self):

        localctx = ReqBlockParser.MaxperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_maxperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(ReqBlockParser.MAXPERDISC)
            self.state = 652
            self.match(ReqBlockParser.NUMBER)
            self.state = 653
            self.class_or_credit()
            self.state = 654
            self.match(ReqBlockParser.LP)
            self.state = 655
            self.match(ReqBlockParser.SYMBOL)
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 656
                self.list_or()
                self.state = 657
                self.match(ReqBlockParser.SYMBOL)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 664
            self.match(ReqBlockParser.RP)
            self.state = 666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 665
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxspreadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXSPREAD(self):
            return self.getToken(ReqBlockParser.MAXSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxspread" ):
                listener.enterMaxspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxspread" ):
                listener.exitMaxspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxspread" ):
                return visitor.visitMaxspread(self)
            else:
                return visitor.visitChildren(self)




    def maxspread(self):

        localctx = ReqBlockParser.MaxspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_maxspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.match(ReqBlockParser.MAXSPREAD)
            self.state = 669
            self.match(ReqBlockParser.NUMBER)
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 670
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTERM(self):
            return self.getToken(ReqBlockParser.MAXTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxterm" ):
                listener.enterMaxterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxterm" ):
                listener.exitMaxterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxterm" ):
                return visitor.visitMaxterm(self)
            else:
                return visitor.visitChildren(self)




    def maxterm(self):

        localctx = ReqBlockParser.MaxtermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_maxterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(ReqBlockParser.MAXTERM)
            self.state = 674
            self.match(ReqBlockParser.NUMBER)
            self.state = 675
            self.class_or_credit()
            self.state = 676
            self.course_list()
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 677
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtransferContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTRANSFER(self):
            return self.getToken(ReqBlockParser.MAXTRANSFER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxtransfer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxtransfer" ):
                listener.enterMaxtransfer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxtransfer" ):
                listener.exitMaxtransfer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxtransfer" ):
                return visitor.visitMaxtransfer(self)
            else:
                return visitor.visitChildren(self)




    def maxtransfer(self):

        localctx = ReqBlockParser.MaxtransferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_maxtransfer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(ReqBlockParser.MAXTRANSFER)
            self.state = 681
            self.match(ReqBlockParser.NUMBER)
            self.state = 682
            self.class_or_credit()
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 683
                self.match(ReqBlockParser.LP)
                self.state = 684
                self.match(ReqBlockParser.SYMBOL)
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                    self.state = 685
                    self.list_or()
                    self.state = 686
                    self.match(ReqBlockParser.SYMBOL)
                    self.state = 692
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 693
                self.match(ReqBlockParser.RP)


            self.state = 697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 696
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinareaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINAREA(self):
            return self.getToken(ReqBlockParser.MINAREA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minarea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinarea" ):
                listener.enterMinarea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinarea" ):
                listener.exitMinarea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinarea" ):
                return visitor.visitMinarea(self)
            else:
                return visitor.visitChildren(self)




    def minarea(self):

        localctx = ReqBlockParser.MinareaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_minarea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(ReqBlockParser.MINAREA)
            self.state = 700
            self.match(ReqBlockParser.NUMBER)
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 701
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinclassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCLASS(self):
            return self.getToken(ReqBlockParser.MINCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinclass" ):
                listener.enterMinclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinclass" ):
                listener.exitMinclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinclass" ):
                return visitor.visitMinclass(self)
            else:
                return visitor.visitChildren(self)




    def minclass(self):

        localctx = ReqBlockParser.MinclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_minclass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(ReqBlockParser.MINCLASS)
            self.state = 705
            self.match(ReqBlockParser.NUMBER)
            self.state = 706
            self.course_list()
            self.state = 708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 707
                self.tag()


            self.state = 713
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 710
                    self.display() 
                self.state = 715
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 716
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MincreditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCREDIT(self):
            return self.getToken(ReqBlockParser.MINCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mincredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMincredit" ):
                listener.enterMincredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMincredit" ):
                listener.exitMincredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMincredit" ):
                return visitor.visitMincredit(self)
            else:
                return visitor.visitChildren(self)




    def mincredit(self):

        localctx = ReqBlockParser.MincreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_mincredit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(ReqBlockParser.MINCREDIT)
            self.state = 720
            self.match(ReqBlockParser.NUMBER)
            self.state = 721
            self.course_list()
            self.state = 723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 722
                self.tag()


            self.state = 728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 725
                    self.display() 
                self.state = 730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 731
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingpaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGPA(self):
            return self.getToken(ReqBlockParser.MINGPA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingpa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingpa" ):
                listener.enterMingpa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingpa" ):
                listener.exitMingpa(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingpa" ):
                return visitor.visitMingpa(self)
            else:
                return visitor.visitChildren(self)




    def mingpa(self):

        localctx = ReqBlockParser.MingpaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_mingpa)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(ReqBlockParser.MINGPA)
            self.state = 735
            self.match(ReqBlockParser.NUMBER)
            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 736
                self.course_list()

            elif la_ == 2:
                self.state = 737
                self.expression(0)


            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 740
                self.tag()


            self.state = 746
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 743
                    self.display() 
                self.state = 748
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

            self.state = 750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 749
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingradeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGRADE(self):
            return self.getToken(ReqBlockParser.MINGRADE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingrade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingrade" ):
                listener.enterMingrade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingrade" ):
                listener.exitMingrade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingrade" ):
                return visitor.visitMingrade(self)
            else:
                return visitor.visitChildren(self)




    def mingrade(self):

        localctx = ReqBlockParser.MingradeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_mingrade)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(ReqBlockParser.MINGRADE)
            self.state = 753
            self.match(ReqBlockParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinperdiscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINPERDISC(self):
            return self.getToken(ReqBlockParser.MINPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinperdisc" ):
                listener.enterMinperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinperdisc" ):
                listener.exitMinperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinperdisc" ):
                return visitor.visitMinperdisc(self)
            else:
                return visitor.visitChildren(self)




    def minperdisc(self):

        localctx = ReqBlockParser.MinperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_minperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(ReqBlockParser.MINPERDISC)
            self.state = 756
            self.match(ReqBlockParser.NUMBER)
            self.state = 757
            self.class_or_credit()
            self.state = 758
            self.match(ReqBlockParser.LP)
            self.state = 759
            self.match(ReqBlockParser.SYMBOL)
            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 760
                self.list_or()
                self.state = 761
                self.match(ReqBlockParser.SYMBOL)
                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 768
            self.match(ReqBlockParser.RP)
            self.state = 770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 769
                self.tag()


            self.state = 775
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 772
                    self.display() 
                self.state = 777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinresContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINRES(self):
            return self.getToken(ReqBlockParser.MINRES, 0)

        def num_classes(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,0)


        def num_credits(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinres" ):
                listener.enterMinres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinres" ):
                listener.exitMinres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinres" ):
                return visitor.visitMinres(self)
            else:
                return visitor.visitChildren(self)




    def minres(self):

        localctx = ReqBlockParser.MinresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_minres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(ReqBlockParser.MINRES)
            self.state = 781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 779
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 780
                self.num_credits()
                pass


            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 783
                self.display()
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 789
                self.label()


            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 792
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinspreadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINSPREAD(self):
            return self.getToken(ReqBlockParser.MINSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinspread" ):
                listener.enterMinspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinspread" ):
                listener.exitMinspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinspread" ):
                return visitor.visitMinspread(self)
            else:
                return visitor.visitChildren(self)




    def minspread(self):

        localctx = ReqBlockParser.MinspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_minspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(ReqBlockParser.MINSPREAD)
            self.state = 796
            self.match(ReqBlockParser.NUMBER)
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 797
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MintermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINTERM(self):
            return self.getToken(ReqBlockParser.MINTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinterm" ):
                listener.enterMinterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinterm" ):
                listener.exitMinterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinterm" ):
                return visitor.visitMinterm(self)
            else:
                return visitor.visitChildren(self)




    def minterm(self):

        localctx = ReqBlockParser.MintermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_minterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(ReqBlockParser.MINTERM)
            self.state = 801
            self.match(ReqBlockParser.NUMBER)
            self.state = 802
            self.class_or_credit()
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.STRING or _la==ReqBlockParser.BLOCK or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ReqBlockParser.IS - 71)) | (1 << (ReqBlockParser.NUMBER - 71)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 71)) | (1 << (ReqBlockParser.WILD - 71)) | (1 << (ReqBlockParser.SYMBOL - 71)) | (1 << (ReqBlockParser.L_SQB - 71)))) != 0):
                self.state = 803
                self.course_list()


            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 806
                self.tag()


            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 809
                self.display()
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoncourseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_noncourse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoncourse" ):
                listener.enterNoncourse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoncourse" ):
                listener.exitNoncourse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoncourse" ):
                return visitor.visitNoncourse(self)
            else:
                return visitor.visitChildren(self)




    def noncourse(self):

        localctx = ReqBlockParser.NoncourseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_noncourse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(ReqBlockParser.NUMBER)
            self.state = 816
            self.match(ReqBlockParser.NONCOURSE)
            self.state = 817
            self.match(ReqBlockParser.LP)
            self.state = 818
            self.expression(0)
            self.state = 819
            self.match(ReqBlockParser.RP)
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 820
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_classesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_classes" ):
                listener.enterNum_classes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_classes" ):
                listener.exitNum_classes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_classes" ):
                return visitor.visitNum_classes(self)
            else:
                return visitor.visitChildren(self)




    def num_classes(self):

        localctx = ReqBlockParser.Num_classesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_num_classes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(ReqBlockParser.NUMBER)
            self.state = 824
            self.match(ReqBlockParser.CLASS)
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 825
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_creditsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_credits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_credits" ):
                listener.enterNum_credits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_credits" ):
                listener.exitNum_credits(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_credits" ):
                return visitor.visitNum_credits(self)
            else:
                return visitor.visitChildren(self)




    def num_credits(self):

        localctx = ReqBlockParser.Num_creditsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_num_credits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(ReqBlockParser.NUMBER)
            self.state = 829
            self.match(ReqBlockParser.CREDIT)
            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 830
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nv_pairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_nv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNv_pair" ):
                listener.enterNv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNv_pair" ):
                listener.exitNv_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNv_pair" ):
                return visitor.visitNv_pair(self)
            else:
                return visitor.visitChildren(self)




    def nv_pair(self):

        localctx = ReqBlockParser.Nv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_nv_pair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(ReqBlockParser.SYMBOL)
            self.state = 834
            self.match(ReqBlockParser.EQ)
            self.state = 835
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.STRING or _la==ReqBlockParser.SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(ReqBlockParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_optional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional" ):
                listener.enterOptional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional" ):
                listener.exitOptional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional" ):
                return visitor.visitOptional(self)
            else:
                return visitor.visitChildren(self)




    def optional(self):

        localctx = ReqBlockParser.OptionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_optional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(ReqBlockParser.OPTIONAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PSEUDO(self):
            return self.getToken(ReqBlockParser.PSEUDO, 0)

        def PSUEDO(self):
            return self.getToken(ReqBlockParser.PSUEDO, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_pseudo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudo" ):
                listener.enterPseudo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudo" ):
                listener.exitPseudo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudo" ):
                return visitor.visitPseudo(self)
            else:
                return visitor.visitChildren(self)




    def pseudo(self):

        localctx = ReqBlockParser.PseudoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_pseudo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.PSEUDO or _la==ReqBlockParser.PSUEDO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemarkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMARK(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.REMARK)
            else:
                return self.getToken(ReqBlockParser.REMARK, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StringContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StringContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SEMICOLON)
            else:
                return self.getToken(ReqBlockParser.SEMICOLON, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_remark

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemark" ):
                listener.enterRemark(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemark" ):
                listener.exitRemark(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemark" ):
                return visitor.visitRemark(self)
            else:
                return visitor.visitChildren(self)




    def remark(self):

        localctx = ReqBlockParser.RemarkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_remark)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 841
                    self.match(ReqBlockParser.REMARK)
                    self.state = 842
                    self.string()
                    self.state = 844
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                    if la_ == 1:
                        self.state = 843
                        self.match(ReqBlockParser.SEMICOLON)



                else:
                    raise NoViableAltException(self)
                self.state = 848 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_completeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_COMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_COMPLETE, 0)

        def RULE_INCOMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_INCOMPLETE, 0)

        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_complete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_complete" ):
                listener.enterRule_complete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_complete" ):
                listener.exitRule_complete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_complete" ):
                return visitor.visitRule_complete(self)
            else:
                return visitor.visitChildren(self)




    def rule_complete(self):

        localctx = ReqBlockParser.Rule_completeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_rule_complete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.RULE_COMPLETE or _la==ReqBlockParser.RULE_INCOMPLETE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 851
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_tagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_TAG(self):
            return self.getToken(ReqBlockParser.RULE_TAG, 0)

        def nv_pair(self):
            return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_tag" ):
                listener.enterRule_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_tag" ):
                listener.exitRule_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_tag" ):
                return visitor.visitRule_tag(self)
            else:
                return visitor.visitChildren(self)




    def rule_tag(self):

        localctx = ReqBlockParser.Rule_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_rule_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(ReqBlockParser.RULE_TAG)
            self.state = 855
            self.nv_pair()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SamediscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAME_DISC(self):
            return self.getToken(ReqBlockParser.SAME_DISC, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_samedisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSamedisc" ):
                listener.enterSamedisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSamedisc" ):
                listener.exitSamedisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSamedisc" ):
                return visitor.visitSamedisc(self)
            else:
                return visitor.visitChildren(self)




    def samedisc(self):

        localctx = ReqBlockParser.SamediscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_samedisc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(ReqBlockParser.SAME_DISC)
            self.state = 858
            self.expression(0)
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 859
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShareContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHARE(self):
            return self.getToken(ReqBlockParser.SHARE, 0)

        def DONT_SHARE(self):
            return self.getToken(ReqBlockParser.DONT_SHARE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShare" ):
                listener.enterShare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShare" ):
                listener.exitShare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShare" ):
                return visitor.visitShare(self)
            else:
                return visitor.visitChildren(self)




    def share(self):

        localctx = ReqBlockParser.ShareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_share)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.DONT_SHARE or _la==ReqBlockParser.SHARE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 863
                self.match(ReqBlockParser.NUMBER)
                self.state = 864
                self.class_or_credit()


            self.state = 868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 867
                self.expression(0)


            self.state = 871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 870
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(ReqBlockParser.STANDALONE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_standalone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalone" ):
                listener.enterStandalone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalone" ):
                listener.exitStandalone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandalone" ):
                return visitor.visitStandalone(self)
            else:
                return visitor.visitChildren(self)




    def standalone(self):

        localctx = ReqBlockParser.StandaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_standalone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(ReqBlockParser.STANDALONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = ReqBlockParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(ReqBlockParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = ReqBlockParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(ReqBlockParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAG(self):
            return self.getToken(ReqBlockParser.TAG, 0)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag" ):
                listener.enterTag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag" ):
                listener.exitTag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTag" ):
                return visitor.visitTag(self)
            else:
                return visitor.visitChildren(self)




    def tag(self):

        localctx = ReqBlockParser.TagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_tag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(ReqBlockParser.TAG)
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.EQ:
                self.state = 880
                self.match(ReqBlockParser.EQ)
                self.state = 881
                _la = self._input.LA(1)
                if not(((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (ReqBlockParser.NUMBER - 76)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 76)) | (1 << (ReqBlockParser.SYMBOL - 76)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(ReqBlockParser.UNDER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_under

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnder" ):
                listener.enterUnder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnder" ):
                listener.exitUnder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnder" ):
                return visitor.visitUnder(self)
            else:
                return visitor.visitChildren(self)




    def under(self):

        localctx = ReqBlockParser.UnderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_under)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.match(ReqBlockParser.UNDER)
            self.state = 885
            self.match(ReqBlockParser.NUMBER)
            self.state = 886
            self.class_or_credit()
            self.state = 887
            self.course_list()
            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 888
                self.display()
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 894
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def WITH(self):
            return self.getToken(ReqBlockParser.WITH, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = ReqBlockParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(ReqBlockParser.LP)
            self.state = 898
            self.match(ReqBlockParser.WITH)
            self.state = 899
            self.expression(0)
            self.state = 900
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_course(self):
            return self.getTypedRuleContext(ReqBlockParser.Full_courseContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def QUESTION_MARK(self):
            return self.getToken(ReqBlockParser.QUESTION_MARK, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,i)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def relational_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Relational_opContext,0)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ReqBlockParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 144
        self.enterRecursionRule(localctx, 144, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 903
                self.full_course()
                pass

            elif la_ == 2:
                self.state = 904
                self.discipline()
                pass

            elif la_ == 3:
                self.state = 905
                self.match(ReqBlockParser.NUMBER)
                pass

            elif la_ == 4:
                self.state = 906
                self.match(ReqBlockParser.QUESTION_MARK)
                pass

            elif la_ == 5:
                self.state = 907
                self.match(ReqBlockParser.SYMBOL)
                pass

            elif la_ == 6:
                self.state = 908
                self.string()
                pass

            elif la_ == 7:
                self.state = 909
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass

            elif la_ == 8:
                self.state = 910
                self.match(ReqBlockParser.LP)
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.NONCOURSE:
                    self.state = 911
                    self.match(ReqBlockParser.NONCOURSE)


                self.state = 914
                self.expression(0)
                self.state = 915
                self.match(ReqBlockParser.RP)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 932
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 930
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                    if la_ == 1:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 919
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 920
                        self.relational_op()
                        self.state = 921
                        self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 923
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 924
                        self.logical_op()
                        self.state = 925
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 927
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 928
                        self.match(ReqBlockParser.COMMA)
                        self.state = 929
                        self.expression(10)
                        pass

             
                self.state = 934
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Logical_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_logical_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_op" ):
                listener.enterLogical_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_op" ):
                listener.exitLogical_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_op" ):
                return visitor.visitLogical_op(self)
            else:
                return visitor.visitChildren(self)




    def logical_op(self):

        localctx = ReqBlockParser.Logical_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_logical_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.OR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def GE(self):
            return self.getToken(ReqBlockParser.GE, 0)

        def GT(self):
            return self.getToken(ReqBlockParser.GT, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def ISNT(self):
            return self.getToken(ReqBlockParser.ISNT, 0)

        def LE(self):
            return self.getToken(ReqBlockParser.LE, 0)

        def LT(self):
            return self.getToken(ReqBlockParser.LT, 0)

        def NE(self):
            return self.getToken(ReqBlockParser.NE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_op" ):
                return visitor.visitRelational_op(self)
            else:
                return visitor.visitChildren(self)




    def relational_op(self):

        localctx = ReqBlockParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ReqBlockParser.IS - 71)) | (1 << (ReqBlockParser.ISNT - 71)) | (1 << (ReqBlockParser.EQ - 71)) | (1 << (ReqBlockParser.GE - 71)) | (1 << (ReqBlockParser.GT - 71)) | (1 << (ReqBlockParser.LE - 71)) | (1 << (ReqBlockParser.LT - 71)) | (1 << (ReqBlockParser.NE - 71)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_orContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_or" ):
                listener.enterList_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_or" ):
                listener.exitList_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_or" ):
                return visitor.visitList_or(self)
            else:
                return visitor.visitChildren(self)




    def list_or(self):

        localctx = ReqBlockParser.List_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_list_or)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_andContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(ReqBlockParser.PLUS, 0)

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_and" ):
                listener.enterList_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_and" ):
                listener.exitList_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_and" ):
                return visitor.visitList_and(self)
            else:
                return visitor.visitChildren(self)




    def list_and(self):

        localctx = ReqBlockParser.List_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_list_and)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.PLUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[72] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         




