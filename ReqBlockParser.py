# Generated from ReqBlock.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3m")
        buf.write("\u03f1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\3\2\7\2\u00a6\n\2\f\2")
        buf.write("\16\2\u00a9\13\2\3\2\3\2\3\2\3\2\5\2\u00af\n\2\3\2\3\2")
        buf.write("\7\2\u00b3\n\2\f\2\16\2\u00b6\13\2\3\2\3\2\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\7\3\u00cf\n\3\f\3\16\3\u00d2\13\3\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\7\4\u00df\n")
        buf.write("\4\f\4\16\4\u00e2\13\4\3\5\5\5\u00e5\n\5\3\5\3\5\5\5\u00e9")
        buf.write("\n\5\3\5\3\5\5\5\u00ed\n\5\3\5\5\5\u00f0\n\5\3\5\3\5\5")
        buf.write("\5\u00f4\n\5\3\5\5\5\u00f7\n\5\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\5\6\u0100\n\6\3\7\3\7\3\7\5\7\u0105\n\7\7\7\u0107")
        buf.write("\n\7\f\7\16\7\u010a\13\7\3\7\5\7\u010d\n\7\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u011d")
        buf.write("\n\b\3\t\3\t\3\t\7\t\u0122\n\t\f\t\16\t\u0125\13\t\3\n")
        buf.write("\5\n\u0128\n\n\3\n\5\n\u012b\n\n\3\n\3\n\7\n\u012f\n\n")
        buf.write("\f\n\16\n\u0132\13\n\3\n\5\n\u0135\n\n\3\13\3\13\5\13")
        buf.write("\u0139\n\13\3\13\3\13\6\13\u013d\n\13\r\13\16\13\u013e")
        buf.write("\3\f\3\f\5\f\u0143\n\f\3\f\3\f\6\f\u0147\n\f\r\f\16\f")
        buf.write("\u0148\3\r\3\r\3\r\3\r\5\r\u014f\n\r\3\16\3\16\3\16\3")
        buf.write("\16\3\16\5\16\u0156\n\16\3\17\3\17\3\20\3\20\3\21\3\21")
        buf.write("\3\21\3\21\3\21\5\21\u0161\n\21\3\21\5\21\u0164\n\21\3")
        buf.write("\21\5\21\u0167\n\21\3\22\3\22\3\22\5\22\u016c\n\22\3\22")
        buf.write("\5\22\u016f\n\22\3\23\3\23\6\23\u0173\n\23\r\23\16\23")
        buf.write("\u0174\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\5\24\u018f\n\24\3\25\3\25\3\25\3")
        buf.write("\25\3\25\5\25\u0196\n\25\3\25\7\25\u0199\n\25\f\25\16")
        buf.write("\25\u019c\13\25\3\25\5\25\u019f\n\25\3\25\5\25\u01a2\n")
        buf.write("\25\3\26\3\26\3\26\5\26\u01a7\n\26\3\26\7\26\u01aa\n\26")
        buf.write("\f\26\16\26\u01ad\13\26\3\26\5\26\u01b0\n\26\3\27\3\27")
        buf.write("\6\27\u01b4\n\27\r\27\16\27\u01b5\3\27\3\27\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\5\30\u01cc\n\30\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u01d9")
        buf.write("\n\31\3\32\3\32\3\32\3\32\7\32\u01df\n\32\f\32\16\32\u01e2")
        buf.write("\13\32\3\32\5\32\u01e5\n\32\3\33\3\33\3\33\3\33\7\33\u01eb")
        buf.write("\n\33\f\33\16\33\u01ee\13\33\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\5\34\u01f8\n\34\3\34\7\34\u01fb\n\34\f")
        buf.write("\34\16\34\u01fe\13\34\3\34\5\34\u0201\n\34\3\34\3\34\7")
        buf.write("\34\u0205\n\34\f\34\16\34\u0208\13\34\3\34\5\34\u020b")
        buf.write("\n\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\6\35\u0217\n\35\r\35\16\35\u0218\3\35\3\35\7\35\u021d")
        buf.write("\n\35\f\35\16\35\u0220\13\35\3\35\5\35\u0223\n\35\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u022f")
        buf.write("\n\36\3\37\3\37\3\37\3\37\5\37\u0235\n\37\3\37\3\37\3")
        buf.write(" \3 \3 \3 \3 \3!\3!\3!\3!\3!\3\"\3\"\5\"\u0245\n\"\3\"")
        buf.write("\3\"\3\"\5\"\u024a\n\"\5\"\u024c\n\"\3\"\5\"\u024f\n\"")
        buf.write("\3\"\3\"\3\"\7\"\u0254\n\"\f\"\16\"\u0257\13\"\3\"\7\"")
        buf.write("\u025a\n\"\f\"\16\"\u025d\13\"\3\"\5\"\u0260\n\"\3#\3")
        buf.write("#\5#\u0264\n#\3#\3#\3#\5#\u0269\n#\5#\u026b\n#\3#\5#\u026e")
        buf.write("\n#\3#\5#\u0271\n#\3#\3#\3#\3#\7#\u0277\n#\f#\16#\u027a")
        buf.write("\13#\3#\7#\u027d\n#\f#\16#\u0280\13#\3#\5#\u0283\n#\3")
        buf.write("$\3$\3%\3%\3&\3&\3&\5&\u028c\n&\3\'\3\'\3\'\5\'\u0291")
        buf.write("\n\'\3(\3(\3(\3)\3)\3)\3*\3*\3*\3+\3+\3+\5+\u029f\n+\3")
        buf.write(",\3,\3,\3,\5,\u02a5\n,\3,\3,\5,\u02a9\n,\3,\5,\u02ac\n")
        buf.write(",\3,\7,\u02af\n,\f,\16,\u02b2\13,\3,\5,\u02b5\n,\3-\3")
        buf.write("-\3-\5-\u02ba\n-\3-\5-\u02bd\n-\3.\3.\3.\5.\u02c2\n.\3")
        buf.write(".\5.\u02c5\n.\3/\3/\3/\3/\5/\u02cb\n/\3\60\3\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\7\60\u02d5\n\60\f\60\16\60\u02d8")
        buf.write("\13\60\3\60\3\60\5\60\u02dc\n\60\3\61\3\61\3\61\5\61\u02e1")
        buf.write("\n\61\3\62\3\62\3\62\3\62\3\62\5\62\u02e8\n\62\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\7\63\u02f2\n\63\f\63")
        buf.write("\16\63\u02f5\13\63\3\63\5\63\u02f8\n\63\3\63\5\63\u02fb")
        buf.write("\n\63\3\64\3\64\3\64\5\64\u0300\n\64\3\65\3\65\3\65\3")
        buf.write("\65\5\65\u0306\n\65\3\65\7\65\u0309\n\65\f\65\16\65\u030c")
        buf.write("\13\65\3\65\5\65\u030f\n\65\3\66\3\66\3\66\3\66\5\66\u0315")
        buf.write("\n\66\3\66\7\66\u0318\n\66\f\66\16\66\u031b\13\66\3\66")
        buf.write("\5\66\u031e\n\66\3\67\3\67\3\67\3\67\5\67\u0324\n\67\3")
        buf.write("\67\5\67\u0327\n\67\3\67\7\67\u032a\n\67\f\67\16\67\u032d")
        buf.write("\13\67\3\67\5\67\u0330\n\67\38\38\38\39\39\39\39\39\3")
        buf.write("9\39\39\79\u033d\n9\f9\169\u0340\139\39\39\59\u0344\n")
        buf.write("9\39\79\u0347\n9\f9\169\u034a\139\3:\3:\3:\5:\u034f\n")
        buf.write(":\3:\7:\u0352\n:\f:\16:\u0355\13:\3:\5:\u0358\n:\3:\5")
        buf.write(":\u035b\n:\3;\3;\3;\5;\u0360\n;\3<\3<\3<\3<\5<\u0366\n")
        buf.write("<\3<\5<\u0369\n<\3<\7<\u036c\n<\f<\16<\u036f\13<\3=\3")
        buf.write("=\3=\3=\3=\3=\5=\u0377\n=\3>\3>\3>\5>\u037c\n>\3?\3?\3")
        buf.write("?\5?\u0381\n?\3@\3@\3@\3@\3A\3A\3B\3B\3C\3C\3C\5C\u038e")
        buf.write("\nC\6C\u0390\nC\rC\16C\u0391\3D\3D\5D\u0396\nD\3E\3E\3")
        buf.write("E\3F\3F\3F\5F\u039e\nF\3G\3G\3G\5G\u03a3\nG\3G\5G\u03a6")
        buf.write("\nG\3G\5G\u03a9\nG\3H\3H\3I\3I\3J\3J\3K\3K\3K\5K\u03b4")
        buf.write("\nK\3L\3L\3L\3L\3L\7L\u03bb\nL\fL\16L\u03be\13L\3L\5L")
        buf.write("\u03c1\nL\3M\3M\3M\3M\3M\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\5N\u03d2\nN\3N\3N\3N\5N\u03d7\nN\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\7N\u03e4\nN\fN\16N\u03e7\13N\3O\3O\3P\3")
        buf.write("P\3Q\3Q\3R\3R\3R\4\u00a7\u00b4\3\u009aS\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\2\17\3\2DE\3\2GH\3\2\23")
        buf.write("\24\4\2\31\31\33\33\4\2\3\3RR\3\289\3\2;<\4\2\34\34??")
        buf.write("\4\2OPRR\3\2MN\6\2JK\\^abee\4\2NNZZ\4\2MMgg\2\u04a7\2")
        buf.write("\u00a7\3\2\2\2\4\u00d0\3\2\2\2\6\u00e0\3\2\2\2\b\u00e4")
        buf.write("\3\2\2\2\n\u00ff\3\2\2\2\f\u0101\3\2\2\2\16\u011c\3\2")
        buf.write("\2\2\20\u011e\3\2\2\2\22\u0127\3\2\2\2\24\u013c\3\2\2")
        buf.write("\2\26\u0146\3\2\2\2\30\u014e\3\2\2\2\32\u0155\3\2\2\2")
        buf.write("\34\u0157\3\2\2\2\36\u0159\3\2\2\2 \u015b\3\2\2\2\"\u0168")
        buf.write("\3\2\2\2$\u0170\3\2\2\2&\u018e\3\2\2\2(\u0190\3\2\2\2")
        buf.write("*\u01a3\3\2\2\2,\u01b1\3\2\2\2.\u01cb\3\2\2\2\60\u01d8")
        buf.write("\3\2\2\2\62\u01da\3\2\2\2\64\u01e6\3\2\2\2\66\u01ef\3")
        buf.write("\2\2\28\u020c\3\2\2\2:\u022e\3\2\2\2<\u0230\3\2\2\2>\u0238")
        buf.write("\3\2\2\2@\u023d\3\2\2\2B\u0244\3\2\2\2D\u0263\3\2\2\2")
        buf.write("F\u0284\3\2\2\2H\u0286\3\2\2\2J\u0288\3\2\2\2L\u028d\3")
        buf.write("\2\2\2N\u0292\3\2\2\2P\u0295\3\2\2\2R\u0298\3\2\2\2T\u029b")
        buf.write("\3\2\2\2V\u02a0\3\2\2\2X\u02b6\3\2\2\2Z\u02be\3\2\2\2")
        buf.write("\\\u02c6\3\2\2\2^\u02cc\3\2\2\2`\u02dd\3\2\2\2b\u02e2")
        buf.write("\3\2\2\2d\u02e9\3\2\2\2f\u02fc\3\2\2\2h\u0301\3\2\2\2")
        buf.write("j\u0310\3\2\2\2l\u031f\3\2\2\2n\u0331\3\2\2\2p\u0334\3")
        buf.write("\2\2\2r\u034b\3\2\2\2t\u035c\3\2\2\2v\u0361\3\2\2\2x\u0370")
        buf.write("\3\2\2\2z\u0378\3\2\2\2|\u037d\3\2\2\2~\u0382\3\2\2\2")
        buf.write("\u0080\u0386\3\2\2\2\u0082\u0388\3\2\2\2\u0084\u038f\3")
        buf.write("\2\2\2\u0086\u0393\3\2\2\2\u0088\u0397\3\2\2\2\u008a\u039a")
        buf.write("\3\2\2\2\u008c\u039f\3\2\2\2\u008e\u03aa\3\2\2\2\u0090")
        buf.write("\u03ac\3\2\2\2\u0092\u03ae\3\2\2\2\u0094\u03b0\3\2\2\2")
        buf.write("\u0096\u03b5\3\2\2\2\u0098\u03c2\3\2\2\2\u009a\u03d6\3")
        buf.write("\2\2\2\u009c\u03e8\3\2\2\2\u009e\u03ea\3\2\2\2\u00a0\u03ec")
        buf.write("\3\2\2\2\u00a2\u03ee\3\2\2\2\u00a4\u00a6\13\2\2\2\u00a5")
        buf.write("\u00a4\3\2\2\2\u00a6\u00a9\3\2\2\2\u00a7\u00a8\3\2\2\2")
        buf.write("\u00a7\u00a5\3\2\2\2\u00a8\u00aa\3\2\2\2\u00a9\u00a7\3")
        buf.write("\2\2\2\u00aa\u00ab\7\25\2\2\u00ab\u00ae\5\4\3\2\u00ac")
        buf.write("\u00ad\7k\2\2\u00ad\u00af\5\6\4\2\u00ae\u00ac\3\2\2\2")
        buf.write("\u00ae\u00af\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00b4\7")
        buf.write("\35\2\2\u00b1\u00b3\13\2\2\2\u00b2\u00b1\3\2\2\2\u00b3")
        buf.write("\u00b6\3\2\2\2\u00b4\u00b5\3\2\2\2\u00b4\u00b2\3\2\2\2")
        buf.write("\u00b5\u00b7\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b7\u00b8\7")
        buf.write("\2\2\3\u00b8\3\3\2\2\2\u00b9\u00cf\5B\"\2\u00ba\u00cf")
        buf.write("\5 \21\2\u00bb\u00cf\5V,\2\u00bc\u00cf\5X-\2\u00bd\u00cf")
        buf.write("\5Z.\2\u00be\u00cf\5\\/\2\u00bf\u00cf\5^\60\2\u00c0\u00cf")
        buf.write("\5b\62\2\u00c1\u00cf\5d\63\2\u00c2\u00cf\5n8\2\u00c3\u00cf")
        buf.write("\5h\65\2\u00c4\u00cf\5j\66\2\u00c5\u00cf\5l\67\2\u00c6")
        buf.write("\u00cf\5p9\2\u00c7\u00cf\5r:\2\u00c8\u00cf\5\u0080A\2")
        buf.write("\u00c9\u00cf\5\u0084C\2\u00ca\u00cf\5\u008cG\2\u00cb\u00cf")
        buf.write("\5\u008eH\2\u00cc\u00cf\58\35\2\u00cd\u00cf\5\u0096L\2")
        buf.write("\u00ce\u00b9\3\2\2\2\u00ce\u00ba\3\2\2\2\u00ce\u00bb\3")
        buf.write("\2\2\2\u00ce\u00bc\3\2\2\2\u00ce\u00bd\3\2\2\2\u00ce\u00be")
        buf.write("\3\2\2\2\u00ce\u00bf\3\2\2\2\u00ce\u00c0\3\2\2\2\u00ce")
        buf.write("\u00c1\3\2\2\2\u00ce\u00c2\3\2\2\2\u00ce\u00c3\3\2\2\2")
        buf.write("\u00ce\u00c4\3\2\2\2\u00ce\u00c5\3\2\2\2\u00ce\u00c6\3")
        buf.write("\2\2\2\u00ce\u00c7\3\2\2\2\u00ce\u00c8\3\2\2\2\u00ce\u00c9")
        buf.write("\3\2\2\2\u00ce\u00ca\3\2\2\2\u00ce\u00cb\3\2\2\2\u00ce")
        buf.write("\u00cc\3\2\2\2\u00ce\u00cd\3\2\2\2\u00cf\u00d2\3\2\2\2")
        buf.write("\u00d0\u00ce\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\5\3\2\2")
        buf.write("\2\u00d2\u00d0\3\2\2\2\u00d3\u00df\5<\37\2\u00d4\u00df")
        buf.write("\5> \2\u00d5\u00df\5D#\2\u00d6\u00df\5J&\2\u00d7\u00df")
        buf.write("\5\62\32\2\u00d8\u00df\5(\25\2\u00d9\u00df\5T+\2\u00da")
        buf.write("\u00df\5x=\2\u00db\u00df\5\u0084C\2\u00dc\u00df\5\u0086")
        buf.write("D\2\u00dd\u00df\58\35\2\u00de\u00d3\3\2\2\2\u00de\u00d4")
        buf.write("\3\2\2\2\u00de\u00d5\3\2\2\2\u00de\u00d6\3\2\2\2\u00de")
        buf.write("\u00d7\3\2\2\2\u00de\u00d8\3\2\2\2\u00de\u00d9\3\2\2\2")
        buf.write("\u00de\u00da\3\2\2\2\u00de\u00db\3\2\2\2\u00de\u00dc\3")
        buf.write("\2\2\2\u00de\u00dd\3\2\2\2\u00df\u00e2\3\2\2\2\u00e0\u00de")
        buf.write("\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\7\3\2\2\2\u00e2\u00e0")
        buf.write("\3\2\2\2\u00e3\u00e5\7d\2\2\u00e4\u00e3\3\2\2\2\u00e4")
        buf.write("\u00e5\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e8\5\22\n")
        buf.write("\2\u00e7\u00e9\7j\2\2\u00e8\u00e7\3\2\2\2\u00e8\u00e9")
        buf.write("\3\2\2\2\u00e9\u00ec\3\2\2\2\u00ea\u00ed\5\24\13\2\u00eb")
        buf.write("\u00ed\5\26\f\2\u00ec\u00ea\3\2\2\2\u00ec\u00eb\3\2\2")
        buf.write("\2\u00ec\u00ed\3\2\2\2\u00ed\u00ef\3\2\2\2\u00ee\u00f0")
        buf.write("\7j\2\2\u00ef\u00ee\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0")
        buf.write("\u00f3\3\2\2\2\u00f1\u00f4\5N(\2\u00f2\u00f4\5R*\2\u00f3")
        buf.write("\u00f1\3\2\2\2\u00f3\u00f2\3\2\2\2\u00f3\u00f4\3\2\2\2")
        buf.write("\u00f4\u00f6\3\2\2\2\u00f5\u00f7\5T+\2\u00f6\u00f5\3\2")
        buf.write("\2\2\u00f6\u00f7\3\2\2\2\u00f7\t\3\2\2\2\u00f8\u0100\5")
        buf.write("`\61\2\u00f9\u0100\5l\67\2\u00fa\u0100\5n8\2\u00fb\u0100")
        buf.write("\5t;\2\u00fc\u0100\5P)\2\u00fd\u0100\5\u008aF\2\u00fe")
        buf.write("\u0100\5\u008cG\2\u00ff\u00f8\3\2\2\2\u00ff\u00f9\3\2")
        buf.write("\2\2\u00ff\u00fa\3\2\2\2\u00ff\u00fb\3\2\2\2\u00ff\u00fc")
        buf.write("\3\2\2\2\u00ff\u00fd\3\2\2\2\u00ff\u00fe\3\2\2\2\u0100")
        buf.write("\13\3\2\2\2\u0101\u0108\5\b\5\2\u0102\u0104\5\16\b\2\u0103")
        buf.write("\u0105\5\u0094K\2\u0104\u0103\3\2\2\2\u0104\u0105\3\2")
        buf.write("\2\2\u0105\u0107\3\2\2\2\u0106\u0102\3\2\2\2\u0107\u010a")
        buf.write("\3\2\2\2\u0108\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109")
        buf.write("\u010c\3\2\2\2\u010a\u0108\3\2\2\2\u010b\u010d\5T+\2\u010c")
        buf.write("\u010b\3\2\2\2\u010c\u010d\3\2\2\2\u010d\r\3\2\2\2\u010e")
        buf.write("\u011d\5\\/\2\u010f\u011d\5^\60\2\u0110\u011d\5`\61\2")
        buf.write("\u0111\u011d\5d\63\2\u0112\u011d\5f\64\2\u0113\u011d\5")
        buf.write("h\65\2\u0114\u011d\5j\66\2\u0115\u011d\5l\67\2\u0116\u011d")
        buf.write("\5n8\2\u0117\u011d\5p9\2\u0118\u011d\5t;\2\u0119\u011d")
        buf.write("\5\u0088E\2\u011a\u011d\5\u008aF\2\u011b\u011d\5\u008c")
        buf.write("G\2\u011c\u010e\3\2\2\2\u011c\u010f\3\2\2\2\u011c\u0110")
        buf.write("\3\2\2\2\u011c\u0111\3\2\2\2\u011c\u0112\3\2\2\2\u011c")
        buf.write("\u0113\3\2\2\2\u011c\u0114\3\2\2\2\u011c\u0115\3\2\2\2")
        buf.write("\u011c\u0116\3\2\2\2\u011c\u0117\3\2\2\2\u011c\u0118\3")
        buf.write("\2\2\2\u011c\u0119\3\2\2\2\u011c\u011a\3\2\2\2\u011c\u011b")
        buf.write("\3\2\2\2\u011d\17\3\2\2\2\u011e\u011f\5\32\16\2\u011f")
        buf.write("\u0123\5\30\r\2\u0120\u0122\5\u0098M\2\u0121\u0120\3\2")
        buf.write("\2\2\u0122\u0125\3\2\2\2\u0123\u0121\3\2\2\2\u0123\u0124")
        buf.write("\3\2\2\2\u0124\21\3\2\2\2\u0125\u0123\3\2\2\2\u0126\u0128")
        buf.write("\7d\2\2\u0127\u0126\3\2\2\2\u0127\u0128\3\2\2\2\u0128")
        buf.write("\u012a\3\2\2\2\u0129\u012b\5\32\16\2\u012a\u0129\3\2\2")
        buf.write("\2\u012a\u012b\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u0130")
        buf.write("\5\30\r\2\u012d\u012f\5\u0098M\2\u012e\u012d\3\2\2\2\u012f")
        buf.write("\u0132\3\2\2\2\u0130\u012e\3\2\2\2\u0130\u0131\3\2\2\2")
        buf.write("\u0131\u0134\3\2\2\2\u0132\u0130\3\2\2\2\u0133\u0135\7")
        buf.write("j\2\2\u0134\u0133\3\2\2\2\u0134\u0135\3\2\2\2\u0135\23")
        buf.write("\3\2\2\2\u0136\u0138\5\u00a2R\2\u0137\u0139\7j\2\2\u0138")
        buf.write("\u0137\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u013a\3\2\2\2")
        buf.write("\u013a\u013b\5\22\n\2\u013b\u013d\3\2\2\2\u013c\u0136")
        buf.write("\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u013c\3\2\2\2\u013e")
        buf.write("\u013f\3\2\2\2\u013f\25\3\2\2\2\u0140\u0142\5\u00a0Q\2")
        buf.write("\u0141\u0143\7j\2\2\u0142\u0141\3\2\2\2\u0142\u0143\3")
        buf.write("\2\2\2\u0143\u0144\3\2\2\2\u0144\u0145\5\22\n\2\u0145")
        buf.write("\u0147\3\2\2\2\u0146\u0140\3\2\2\2\u0147\u0148\3\2\2\2")
        buf.write("\u0148\u0146\3\2\2\2\u0148\u0149\3\2\2\2\u0149\27\3\2")
        buf.write("\2\2\u014a\u014f\5\u0092J\2\u014b\u014f\7O\2\2\u014c\u014f")
        buf.write("\7P\2\2\u014d\u014f\7Q\2\2\u014e\u014a\3\2\2\2\u014e\u014b")
        buf.write("\3\2\2\2\u014e\u014c\3\2\2\2\u014e\u014d\3\2\2\2\u014f")
        buf.write("\31\3\2\2\2\u0150\u0156\5\u0092J\2\u0151\u0156\5\u0090")
        buf.write("I\2\u0152\u0156\7Q\2\2\u0153\u0156\7\27\2\2\u0154\u0156")
        buf.write("\7J\2\2\u0155\u0150\3\2\2\2\u0155\u0151\3\2\2\2\u0155")
        buf.write("\u0152\3\2\2\2\u0155\u0153\3\2\2\2\u0155\u0154\3\2\2\2")
        buf.write("\u0156\33\3\2\2\2\u0157\u0158\t\2\2\2\u0158\35\3\2\2\2")
        buf.write("\u0159\u015a\t\3\2\2\u015a\37\3\2\2\2\u015b\u015c\7I\2")
        buf.write("\2\u015c\u015d\5\u009aN\2\u015d\u0160\7L\2\2\u015e\u0161")
        buf.write("\5&\24\2\u015f\u0161\5$\23\2\u0160\u015e\3\2\2\2\u0160")
        buf.write("\u015f\3\2\2\2\u0161\u0163\3\2\2\2\u0162\u0164\5T+\2\u0163")
        buf.write("\u0162\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0166\3\2\2\2")
        buf.write("\u0165\u0167\5\"\22\2\u0166\u0165\3\2\2\2\u0166\u0167")
        buf.write("\3\2\2\2\u0167!\3\2\2\2\u0168\u016b\7F\2\2\u0169\u016c")
        buf.write("\5&\24\2\u016a\u016c\5$\23\2\u016b\u0169\3\2\2\2\u016b")
        buf.write("\u016a\3\2\2\2\u016c\u016e\3\2\2\2\u016d\u016f\5T+\2\u016e")
        buf.write("\u016d\3\2\2\2\u016e\u016f\3\2\2\2\u016f#\3\2\2\2\u0170")
        buf.write("\u0172\5\34\17\2\u0171\u0173\5&\24\2\u0172\u0171\3\2\2")
        buf.write("\2\u0173\u0174\3\2\2\2\u0174\u0172\3\2\2\2\u0174\u0175")
        buf.write("\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0177\5\36\20\2\u0177")
        buf.write("%\3\2\2\2\u0178\u018f\5 \21\2\u0179\u018f\5<\37\2\u017a")
        buf.write("\u018f\5> \2\u017b\u018f\5B\"\2\u017c\u018f\5J&\2\u017d")
        buf.write("\u018f\5V,\2\u017e\u018f\5Z.\2\u017f\u018f\5\\/\2\u0180")
        buf.write("\u018f\5b\62\2\u0181\u018f\5d\63\2\u0182\u018f\5h\65\2")
        buf.write("\u0183\u018f\5j\66\2\u0184\u018f\5l\67\2\u0185\u018f\5")
        buf.write("n8\2\u0186\u018f\5p9\2\u0187\u018f\5r:\2\u0188\u018f\5")
        buf.write("v<\2\u0189\u018f\5x=\2\u018a\u018f\5\u0084C\2\u018b\u018f")
        buf.write("\5\u0086D\2\u018c\u018f\5\u008cG\2\u018d\u018f\58\35\2")
        buf.write("\u018e\u0178\3\2\2\2\u018e\u0179\3\2\2\2\u018e\u017a\3")
        buf.write("\2\2\2\u018e\u017b\3\2\2\2\u018e\u017c\3\2\2\2\u018e\u017d")
        buf.write("\3\2\2\2\u018e\u017e\3\2\2\2\u018e\u017f\3\2\2\2\u018e")
        buf.write("\u0180\3\2\2\2\u018e\u0181\3\2\2\2\u018e\u0182\3\2\2\2")
        buf.write("\u018e\u0183\3\2\2\2\u018e\u0184\3\2\2\2\u018e\u0185\3")
        buf.write("\2\2\2\u018e\u0186\3\2\2\2\u018e\u0187\3\2\2\2\u018e\u0188")
        buf.write("\3\2\2\2\u018e\u0189\3\2\2\2\u018e\u018a\3\2\2\2\u018e")
        buf.write("\u018b\3\2\2\2\u018e\u018c\3\2\2\2\u018e\u018d\3\2\2\2")
        buf.write("\u018f\'\3\2\2\2\u0190\u0191\7I\2\2\u0191\u0192\5\u009a")
        buf.write("N\2\u0192\u0195\7L\2\2\u0193\u0196\5.\30\2\u0194\u0196")
        buf.write("\5,\27\2\u0195\u0193\3\2\2\2\u0195\u0194\3\2\2\2\u0196")
        buf.write("\u019a\3\2\2\2\u0197\u0199\5\60\31\2\u0198\u0197\3\2\2")
        buf.write("\2\u0199\u019c\3\2\2\2\u019a\u0198\3\2\2\2\u019a\u019b")
        buf.write("\3\2\2\2\u019b\u019e\3\2\2\2\u019c\u019a\3\2\2\2\u019d")
        buf.write("\u019f\5T+\2\u019e\u019d\3\2\2\2\u019e\u019f\3\2\2\2\u019f")
        buf.write("\u01a1\3\2\2\2\u01a0\u01a2\5*\26\2\u01a1\u01a0\3\2\2\2")
        buf.write("\u01a1\u01a2\3\2\2\2\u01a2)\3\2\2\2\u01a3\u01a6\7F\2\2")
        buf.write("\u01a4\u01a7\5.\30\2\u01a5\u01a7\5,\27\2\u01a6\u01a4\3")
        buf.write("\2\2\2\u01a6\u01a5\3\2\2\2\u01a7\u01ab\3\2\2\2\u01a8\u01aa")
        buf.write("\5\60\31\2\u01a9\u01a8\3\2\2\2\u01aa\u01ad\3\2\2\2\u01ab")
        buf.write("\u01a9\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01af\3\2\2\2")
        buf.write("\u01ad\u01ab\3\2\2\2\u01ae\u01b0\5T+\2\u01af\u01ae\3\2")
        buf.write("\2\2\u01af\u01b0\3\2\2\2\u01b0+\3\2\2\2\u01b1\u01b3\5")
        buf.write("\34\17\2\u01b2\u01b4\5.\30\2\u01b3\u01b2\3\2\2\2\u01b4")
        buf.write("\u01b5\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2")
        buf.write("\u01b6\u01b7\3\2\2\2\u01b7\u01b8\5\36\20\2\u01b8-\3\2")
        buf.write("\2\2\u01b9\u01cc\5(\25\2\u01ba\u01cc\5<\37\2\u01bb\u01cc")
        buf.write("\5> \2\u01bc\u01cc\5D#\2\u01bd\u01cc\5J&\2\u01be\u01cc")
        buf.write("\5\62\32\2\u01bf\u01cc\5V,\2\u01c0\u01cc\5Z.\2\u01c1\u01cc")
        buf.write("\5d\63\2\u01c2\u01cc\5h\65\2\u01c3\u01cc\5j\66\2\u01c4")
        buf.write("\u01cc\5n8\2\u01c5\u01cc\5r:\2\u01c6\u01cc\5x=\2\u01c7")
        buf.write("\u01cc\5\u0084C\2\u01c8\u01cc\5\u0086D\2\u01c9\u01cc\5")
        buf.write("\u008cG\2\u01ca\u01cc\58\35\2\u01cb\u01b9\3\2\2\2\u01cb")
        buf.write("\u01ba\3\2\2\2\u01cb\u01bb\3\2\2\2\u01cb\u01bc\3\2\2\2")
        buf.write("\u01cb\u01bd\3\2\2\2\u01cb\u01be\3\2\2\2\u01cb\u01bf\3")
        buf.write("\2\2\2\u01cb\u01c0\3\2\2\2\u01cb\u01c1\3\2\2\2\u01cb\u01c2")
        buf.write("\3\2\2\2\u01cb\u01c3\3\2\2\2\u01cb\u01c4\3\2\2\2\u01cb")
        buf.write("\u01c5\3\2\2\2\u01cb\u01c6\3\2\2\2\u01cb\u01c7\3\2\2\2")
        buf.write("\u01cb\u01c8\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cb\u01ca\3")
        buf.write("\2\2\2\u01cc/\3\2\2\2\u01cd\u01d9\5\\/\2\u01ce\u01d9\5")
        buf.write("^\60\2\u01cf\u01d9\5d\63\2\u01d0\u01d9\5h\65\2\u01d1\u01d9")
        buf.write("\5j\66\2\u01d2\u01d9\5l\67\2\u01d3\u01d9\5n8\2\u01d4\u01d9")
        buf.write("\5p9\2\u01d5\u01d9\5\u008aF\2\u01d6\u01d9\5\u0088E\2\u01d7")
        buf.write("\u01d9\5\u008cG\2\u01d8\u01cd\3\2\2\2\u01d8\u01ce\3\2")
        buf.write("\2\2\u01d8\u01cf\3\2\2\2\u01d8\u01d0\3\2\2\2\u01d8\u01d1")
        buf.write("\3\2\2\2\u01d8\u01d2\3\2\2\2\u01d8\u01d3\3\2\2\2\u01d8")
        buf.write("\u01d4\3\2\2\2\u01d8\u01d5\3\2\2\2\u01d8\u01d6\3\2\2\2")
        buf.write("\u01d8\u01d7\3\2\2\2\u01d9\61\3\2\2\2\u01da\u01db\7O\2")
        buf.write("\2\u01db\u01dc\7 \2\2\u01dc\u01e0\5\64\33\2\u01dd\u01df")
        buf.write("\5\60\31\2\u01de\u01dd\3\2\2\2\u01df\u01e2\3\2\2\2\u01e0")
        buf.write("\u01de\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e4\3\2\2\2")
        buf.write("\u01e2\u01e0\3\2\2\2\u01e3\u01e5\5T+\2\u01e4\u01e3\3\2")
        buf.write("\2\2\u01e4\u01e5\3\2\2\2\u01e5\63\3\2\2\2\u01e6\u01ec")
        buf.write("\5\66\34\2\u01e7\u01e8\5\u009cO\2\u01e8\u01e9\5\66\34")
        buf.write("\2\u01e9\u01eb\3\2\2\2\u01ea\u01e7\3\2\2\2\u01eb\u01ee")
        buf.write("\3\2\2\2\u01ec\u01ea\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed")
        buf.write("\65\3\2\2\2\u01ee\u01ec\3\2\2\2\u01ef\u01f7\7c\2\2\u01f0")
        buf.write("\u01f8\5<\37\2\u01f1\u01f8\5> \2\u01f2\u01f8\5\b\5\2\u01f3")
        buf.write("\u01f8\5D#\2\u01f4\u01f8\5\62\32\2\u01f5\u01f8\5x=\2\u01f6")
        buf.write("\u01f8\5\u0086D\2\u01f7\u01f0\3\2\2\2\u01f7\u01f1\3\2")
        buf.write("\2\2\u01f7\u01f2\3\2\2\2\u01f7\u01f3\3\2\2\2\u01f7\u01f4")
        buf.write("\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7\u01f6\3\2\2\2\u01f8")
        buf.write("\u01fc\3\2\2\2\u01f9\u01fb\5\60\31\2\u01fa\u01f9\3\2\2")
        buf.write("\2\u01fb\u01fe\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fc\u01fd")
        buf.write("\3\2\2\2\u01fd\u0200\3\2\2\2\u01fe\u01fc\3\2\2\2\u01ff")
        buf.write("\u0201\5T+\2\u0200\u01ff\3\2\2\2\u0200\u0201\3\2\2\2\u0201")
        buf.write("\u0202\3\2\2\2\u0202\u0206\7i\2\2\u0203\u0205\5\60\31")
        buf.write("\2\u0204\u0203\3\2\2\2\u0205\u0208\3\2\2\2\u0206\u0204")
        buf.write("\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u020a\3\2\2\2\u0208")
        buf.write("\u0206\3\2\2\2\u0209\u020b\5T+\2\u020a\u0209\3\2\2\2\u020a")
        buf.write("\u020b\3\2\2\2\u020b\67\3\2\2\2\u020c\u0216\7\26\2\2\u020d")
        buf.write("\u0217\5(\25\2\u020e\u0217\5<\37\2\u020f\u0217\5> \2\u0210")
        buf.write("\u0217\5D#\2\u0211\u0217\5J&\2\u0212\u0217\5\b\5\2\u0213")
        buf.write("\u0217\5\62\32\2\u0214\u0217\5x=\2\u0215\u0217\5\u0086")
        buf.write("D\2\u0216\u020d\3\2\2\2\u0216\u020e\3\2\2\2\u0216\u020f")
        buf.write("\3\2\2\2\u0216\u0210\3\2\2\2\u0216\u0211\3\2\2\2\u0216")
        buf.write("\u0212\3\2\2\2\u0216\u0213\3\2\2\2\u0216\u0214\3\2\2\2")
        buf.write("\u0216\u0215\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u0216\3")
        buf.write("\2\2\2\u0218\u0219\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021e")
        buf.write("\7\36\2\2\u021b\u021d\5:\36\2\u021c\u021b\3\2\2\2\u021d")
        buf.write("\u0220\3\2\2\2\u021e\u021c\3\2\2\2\u021e\u021f\3\2\2\2")
        buf.write("\u021f\u0222\3\2\2\2\u0220\u021e\3\2\2\2\u0221\u0223\5")
        buf.write("T+\2\u0222\u0221\3\2\2\2\u0222\u0223\3\2\2\2\u02239\3")
        buf.write("\2\2\2\u0224\u022f\5\\/\2\u0225\u022f\5^\60\2\u0226\u022f")
        buf.write("\5`\61\2\u0227\u022f\5d\63\2\u0228\u022f\5l\67\2\u0229")
        buf.write("\u022f\5n8\2\u022a\u022f\5p9\2\u022b\u022f\5t;\2\u022c")
        buf.write("\u022f\5\u0088E\2\u022d\u022f\5\u008cG\2\u022e\u0224\3")
        buf.write("\2\2\2\u022e\u0225\3\2\2\2\u022e\u0226\3\2\2\2\u022e\u0227")
        buf.write("\3\2\2\2\u022e\u0228\3\2\2\2\u022e\u0229\3\2\2\2\u022e")
        buf.write("\u022a\3\2\2\2\u022e\u022b\3\2\2\2\u022e\u022c\3\2\2\2")
        buf.write("\u022e\u022d\3\2\2\2\u022f;\3\2\2\2\u0230\u0231\7O\2\2")
        buf.write("\u0231\u0232\7\27\2\2\u0232\u0234\5\u009aN\2\u0233\u0235")
        buf.write("\5\u0088E\2\u0234\u0233\3\2\2\2\u0234\u0235\3\2\2\2\u0235")
        buf.write("\u0236\3\2\2\2\u0236\u0237\5T+\2\u0237=\3\2\2\2\u0238")
        buf.write("\u0239\7O\2\2\u0239\u023a\7\30\2\2\u023a\u023b\5\u009a")
        buf.write("N\2\u023b\u023c\5T+\2\u023c?\3\2\2\2\u023d\u023e\7c\2")
        buf.write("\2\u023e\u023f\5F$\2\u023f\u0240\7O\2\2\u0240\u0241\7")
        buf.write("i\2\2\u0241A\3\2\2\2\u0242\u0245\5z>\2\u0243\u0245\5|")
        buf.write("?\2\u0244\u0242\3\2\2\2\u0244\u0243\3\2\2\2\u0245\u024b")
        buf.write("\3\2\2\2\u0246\u0249\5\u009cO\2\u0247\u024a\5z>\2\u0248")
        buf.write("\u024a\5|?\2\u0249\u0247\3\2\2\2\u0249\u0248\3\2\2\2\u024a")
        buf.write("\u024c\3\2\2\2\u024b\u0246\3\2\2\2\u024b\u024c\3\2\2\2")
        buf.write("\u024c\u0255\3\2\2\2\u024d\u024f\7J\2\2\u024e\u024d\3")
        buf.write("\2\2\2\u024e\u024f\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0254")
        buf.write("\5\u0082B\2\u0251\u0254\5P)\2\u0252\u0254\5\u0094K\2\u0253")
        buf.write("\u024e\3\2\2\2\u0253\u0251\3\2\2\2\u0253\u0252\3\2\2\2")
        buf.write("\u0254\u0257\3\2\2\2\u0255\u0253\3\2\2\2\u0255\u0256\3")
        buf.write("\2\2\2\u0256\u025b\3\2\2\2\u0257\u0255\3\2\2\2\u0258\u025a")
        buf.write("\5L\'\2\u0259\u0258\3\2\2\2\u025a\u025d\3\2\2\2\u025b")
        buf.write("\u0259\3\2\2\2\u025b\u025c\3\2\2\2\u025c\u025f\3\2\2\2")
        buf.write("\u025d\u025b\3\2\2\2\u025e\u0260\5T+\2\u025f\u025e\3\2")
        buf.write("\2\2\u025f\u0260\3\2\2\2\u0260C\3\2\2\2\u0261\u0264\5")
        buf.write("z>\2\u0262\u0264\5|?\2\u0263\u0261\3\2\2\2\u0263\u0262")
        buf.write("\3\2\2\2\u0264\u026a\3\2\2\2\u0265\u0268\5\u009cO\2\u0266")
        buf.write("\u0269\5z>\2\u0267\u0269\5|?\2\u0268\u0266\3\2\2\2\u0268")
        buf.write("\u0267\3\2\2\2\u0269\u026b\3\2\2\2\u026a\u0265\3\2\2\2")
        buf.write("\u026a\u026b\3\2\2\2\u026b\u026d\3\2\2\2\u026c\u026e\5")
        buf.write("\f\7\2\u026d\u026c\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u0278")
        buf.write("\3\2\2\2\u026f\u0271\7J\2\2\u0270\u026f\3\2\2\2\u0270")
        buf.write("\u0271\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0277\5\u0082")
        buf.write("B\2\u0273\u0277\5\u008cG\2\u0274\u0277\5\u0088E\2\u0275")
        buf.write("\u0277\5\u0094K\2\u0276\u0270\3\2\2\2\u0276\u0273\3\2")
        buf.write("\2\2\u0276\u0274\3\2\2\2\u0276\u0275\3\2\2\2\u0277\u027a")
        buf.write("\3\2\2\2\u0278\u0276\3\2\2\2\u0278\u0279\3\2\2\2\u0279")
        buf.write("\u027e\3\2\2\2\u027a\u0278\3\2\2\2\u027b\u027d\5L\'\2")
        buf.write("\u027c\u027b\3\2\2\2\u027d\u0280\3\2\2\2\u027e\u027c\3")
        buf.write("\2\2\2\u027e\u027f\3\2\2\2\u027f\u0282\3\2\2\2\u0280\u027e")
        buf.write("\3\2\2\2\u0281\u0283\5T+\2\u0282\u0281\3\2\2\2\u0282\u0283")
        buf.write("\3\2\2\2\u0283E\3\2\2\2\u0284\u0285\t\4\2\2\u0285G\3\2")
        buf.write("\2\2\u0286\u0287\t\5\2\2\u0287I\3\2\2\2\u0288\u0289\7")
        buf.write("\32\2\2\u0289\u028b\5\u009aN\2\u028a\u028c\7k\2\2\u028b")
        buf.write("\u028a\3\2\2\2\u028b\u028c\3\2\2\2\u028cK\3\2\2\2\u028d")
        buf.write("\u028e\7\b\2\2\u028e\u0290\5\u0090I\2\u028f\u0291\7k\2")
        buf.write("\2\u0290\u028f\3\2\2\2\u0290\u0291\3\2\2\2\u0291M\3\2")
        buf.write("\2\2\u0292\u0293\7\37\2\2\u0293\u0294\5\b\5\2\u0294O\3")
        buf.write("\2\2\2\u0295\u0296\7!\2\2\u0296\u0297\5~@\2\u0297Q\3\2")
        buf.write("\2\2\u0298\u0299\7\"\2\2\u0299\u029a\5\b\5\2\u029aS\3")
        buf.write("\2\2\2\u029b\u029c\7#\2\2\u029c\u029e\5\u0090I\2\u029d")
        buf.write("\u029f\7k\2\2\u029e\u029d\3\2\2\2\u029e\u029f\3\2\2\2")
        buf.write("\u029fU\3\2\2\2\u02a0\u02a1\7$\2\2\u02a1\u02a4\7O\2\2")
        buf.write("\u02a2\u02a3\7\67\2\2\u02a3\u02a5\7O\2\2\u02a4\u02a2\3")
        buf.write("\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02a8")
        buf.write("\5H%\2\u02a7\u02a9\5\b\5\2\u02a8\u02a7\3\2\2\2\u02a8\u02a9")
        buf.write("\3\2\2\2\u02a9\u02ab\3\2\2\2\u02aa\u02ac\5\u0094K\2\u02ab")
        buf.write("\u02aa\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02b0\3\2\2\2")
        buf.write("\u02ad\u02af\5L\'\2\u02ae\u02ad\3\2\2\2\u02af\u02b2\3")
        buf.write("\2\2\2\u02b0\u02ae\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02b4")
        buf.write("\3\2\2\2\u02b2\u02b0\3\2\2\2\u02b3\u02b5\5T+\2\u02b4\u02b3")
        buf.write("\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5W\3\2\2\2\u02b6\u02b7")
        buf.write("\7%\2\2\u02b7\u02b9\7O\2\2\u02b8\u02ba\5\b\5\2\u02b9\u02b8")
        buf.write("\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bc\3\2\2\2\u02bb")
        buf.write("\u02bd\5\u0094K\2\u02bc\u02bb\3\2\2\2\u02bc\u02bd\3\2")
        buf.write("\2\2\u02bdY\3\2\2\2\u02be\u02bf\7&\2\2\u02bf\u02c1\7O")
        buf.write("\2\2\u02c0\u02c2\5\b\5\2\u02c1\u02c0\3\2\2\2\u02c1\u02c2")
        buf.write("\3\2\2\2\u02c2\u02c4\3\2\2\2\u02c3\u02c5\5\u0094K\2\u02c4")
        buf.write("\u02c3\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5[\3\2\2\2\u02c6")
        buf.write("\u02c7\7\'\2\2\u02c7\u02c8\7O\2\2\u02c8\u02ca\5H%\2\u02c9")
        buf.write("\u02cb\5\u0094K\2\u02ca\u02c9\3\2\2\2\u02ca\u02cb\3\2")
        buf.write("\2\2\u02cb]\3\2\2\2\u02cc\u02cd\7(\2\2\u02cd\u02ce\7O")
        buf.write("\2\2\u02ce\u02cf\5H%\2\u02cf\u02d0\7c\2\2\u02d0\u02d6")
        buf.write("\7R\2\2\u02d1\u02d2\5\u00a0Q\2\u02d2\u02d3\7R\2\2\u02d3")
        buf.write("\u02d5\3\2\2\2\u02d4\u02d1\3\2\2\2\u02d5\u02d8\3\2\2\2")
        buf.write("\u02d6\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d9\3")
        buf.write("\2\2\2\u02d8\u02d6\3\2\2\2\u02d9\u02db\7i\2\2\u02da\u02dc")
        buf.write("\5\u0094K\2\u02db\u02da\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc")
        buf.write("_\3\2\2\2\u02dd\u02de\7)\2\2\u02de\u02e0\7O\2\2\u02df")
        buf.write("\u02e1\5\u0094K\2\u02e0\u02df\3\2\2\2\u02e0\u02e1\3\2")
        buf.write("\2\2\u02e1a\3\2\2\2\u02e2\u02e3\7*\2\2\u02e3\u02e4\7O")
        buf.write("\2\2\u02e4\u02e5\5H%\2\u02e5\u02e7\5\b\5\2\u02e6\u02e8")
        buf.write("\5\u0094K\2\u02e7\u02e6\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8")
        buf.write("c\3\2\2\2\u02e9\u02ea\7+\2\2\u02ea\u02eb\7O\2\2\u02eb")
        buf.write("\u02f7\5H%\2\u02ec\u02ed\7c\2\2\u02ed\u02f3\7R\2\2\u02ee")
        buf.write("\u02ef\5\u00a0Q\2\u02ef\u02f0\7R\2\2\u02f0\u02f2\3\2\2")
        buf.write("\2\u02f1\u02ee\3\2\2\2\u02f2\u02f5\3\2\2\2\u02f3\u02f1")
        buf.write("\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f6\3\2\2\2\u02f5")
        buf.write("\u02f3\3\2\2\2\u02f6\u02f8\7i\2\2\u02f7\u02ec\3\2\2\2")
        buf.write("\u02f7\u02f8\3\2\2\2\u02f8\u02fa\3\2\2\2\u02f9\u02fb\5")
        buf.write("\u0094K\2\u02fa\u02f9\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb")
        buf.write("e\3\2\2\2\u02fc\u02fd\7,\2\2\u02fd\u02ff\7O\2\2\u02fe")
        buf.write("\u0300\5\u0094K\2\u02ff\u02fe\3\2\2\2\u02ff\u0300\3\2")
        buf.write("\2\2\u0300g\3\2\2\2\u0301\u0302\7/\2\2\u0302\u0303\7O")
        buf.write("\2\2\u0303\u0305\5\b\5\2\u0304\u0306\5\u0094K\2\u0305")
        buf.write("\u0304\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u030a\3\2\2\2")
        buf.write("\u0307\u0309\5L\'\2\u0308\u0307\3\2\2\2\u0309\u030c\3")
        buf.write("\2\2\2\u030a\u0308\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u030e")
        buf.write("\3\2\2\2\u030c\u030a\3\2\2\2\u030d\u030f\5T+\2\u030e\u030d")
        buf.write("\3\2\2\2\u030e\u030f\3\2\2\2\u030fi\3\2\2\2\u0310\u0311")
        buf.write("\7\60\2\2\u0311\u0312\7O\2\2\u0312\u0314\5\b\5\2\u0313")
        buf.write("\u0315\5\u0094K\2\u0314\u0313\3\2\2\2\u0314\u0315\3\2")
        buf.write("\2\2\u0315\u0319\3\2\2\2\u0316\u0318\5L\'\2\u0317\u0316")
        buf.write("\3\2\2\2\u0318\u031b\3\2\2\2\u0319\u0317\3\2\2\2\u0319")
        buf.write("\u031a\3\2\2\2\u031a\u031d\3\2\2\2\u031b\u0319\3\2\2\2")
        buf.write("\u031c\u031e\5T+\2\u031d\u031c\3\2\2\2\u031d\u031e\3\2")
        buf.write("\2\2\u031ek\3\2\2\2\u031f\u0320\7-\2\2\u0320\u0323\7O")
        buf.write("\2\2\u0321\u0324\5\b\5\2\u0322\u0324\5\u009aN\2\u0323")
        buf.write("\u0321\3\2\2\2\u0323\u0322\3\2\2\2\u0323\u0324\3\2\2\2")
        buf.write("\u0324\u0326\3\2\2\2\u0325\u0327\5\u0094K\2\u0326\u0325")
        buf.write("\3\2\2\2\u0326\u0327\3\2\2\2\u0327\u032b\3\2\2\2\u0328")
        buf.write("\u032a\5L\'\2\u0329\u0328\3\2\2\2\u032a\u032d\3\2\2\2")
        buf.write("\u032b\u0329\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u032f\3")
        buf.write("\2\2\2\u032d\u032b\3\2\2\2\u032e\u0330\5T+\2\u032f\u032e")
        buf.write("\3\2\2\2\u032f\u0330\3\2\2\2\u0330m\3\2\2\2\u0331\u0332")
        buf.write("\7.\2\2\u0332\u0333\7O\2\2\u0333o\3\2\2\2\u0334\u0335")
        buf.write("\7\61\2\2\u0335\u0336\7O\2\2\u0336\u0337\5H%\2\u0337\u0338")
        buf.write("\7c\2\2\u0338\u033e\7R\2\2\u0339\u033a\5\u00a0Q\2\u033a")
        buf.write("\u033b\7R\2\2\u033b\u033d\3\2\2\2\u033c\u0339\3\2\2\2")
        buf.write("\u033d\u0340\3\2\2\2\u033e\u033c\3\2\2\2\u033e\u033f\3")
        buf.write("\2\2\2\u033f\u0341\3\2\2\2\u0340\u033e\3\2\2\2\u0341\u0343")
        buf.write("\7i\2\2\u0342\u0344\5\u0094K\2\u0343\u0342\3\2\2\2\u0343")
        buf.write("\u0344\3\2\2\2\u0344\u0348\3\2\2\2\u0345\u0347\5L\'\2")
        buf.write("\u0346\u0345\3\2\2\2\u0347\u034a\3\2\2\2\u0348\u0346\3")
        buf.write("\2\2\2\u0348\u0349\3\2\2\2\u0349q\3\2\2\2\u034a\u0348")
        buf.write("\3\2\2\2\u034b\u034e\7\62\2\2\u034c\u034f\5z>\2\u034d")
        buf.write("\u034f\5|?\2\u034e\u034c\3\2\2\2\u034e\u034d\3\2\2\2\u034f")
        buf.write("\u0353\3\2\2\2\u0350\u0352\5L\'\2\u0351\u0350\3\2\2\2")
        buf.write("\u0352\u0355\3\2\2\2\u0353\u0351\3\2\2\2\u0353\u0354\3")
        buf.write("\2\2\2\u0354\u0357\3\2\2\2\u0355\u0353\3\2\2\2\u0356\u0358")
        buf.write("\5T+\2\u0357\u0356\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u035a")
        buf.write("\3\2\2\2\u0359\u035b\5\u0094K\2\u035a\u0359\3\2\2\2\u035a")
        buf.write("\u035b\3\2\2\2\u035bs\3\2\2\2\u035c\u035d\7\63\2\2\u035d")
        buf.write("\u035f\7O\2\2\u035e\u0360\5\u0094K\2\u035f\u035e\3\2\2")
        buf.write("\2\u035f\u0360\3\2\2\2\u0360u\3\2\2\2\u0361\u0362\7\64")
        buf.write("\2\2\u0362\u0363\7O\2\2\u0363\u0365\5H%\2\u0364\u0366")
        buf.write("\5\b\5\2\u0365\u0364\3\2\2\2\u0365\u0366\3\2\2\2\u0366")
        buf.write("\u0368\3\2\2\2\u0367\u0369\5\u0094K\2\u0368\u0367\3\2")
        buf.write("\2\2\u0368\u0369\3\2\2\2\u0369\u036d\3\2\2\2\u036a\u036c")
        buf.write("\5L\'\2\u036b\u036a\3\2\2\2\u036c\u036f\3\2\2\2\u036d")
        buf.write("\u036b\3\2\2\2\u036d\u036e\3\2\2\2\u036ew\3\2\2\2\u036f")
        buf.write("\u036d\3\2\2\2\u0370\u0371\7O\2\2\u0371\u0372\7\65\2\2")
        buf.write("\u0372\u0373\7c\2\2\u0373\u0374\5\u009aN\2\u0374\u0376")
        buf.write("\7i\2\2\u0375\u0377\5T+\2\u0376\u0375\3\2\2\2\u0376\u0377")
        buf.write("\3\2\2\2\u0377y\3\2\2\2\u0378\u0379\7O\2\2\u0379\u037b")
        buf.write("\7\31\2\2\u037a\u037c\5@!\2\u037b\u037a\3\2\2\2\u037b")
        buf.write("\u037c\3\2\2\2\u037c{\3\2\2\2\u037d\u037e\7O\2\2\u037e")
        buf.write("\u0380\7\33\2\2\u037f\u0381\5@!\2\u0380\u037f\3\2\2\2")
        buf.write("\u0380\u0381\3\2\2\2\u0381}\3\2\2\2\u0382\u0383\7R\2\2")
        buf.write("\u0383\u0384\7\\\2\2\u0384\u0385\t\6\2\2\u0385\177\3\2")
        buf.write("\2\2\u0386\u0387\7\66\2\2\u0387\u0081\3\2\2\2\u0388\u0389")
        buf.write("\t\7\2\2\u0389\u0083\3\2\2\2\u038a\u038b\7:\2\2\u038b")
        buf.write("\u038d\5\u0090I\2\u038c\u038e\7k\2\2\u038d\u038c\3\2\2")
        buf.write("\2\u038d\u038e\3\2\2\2\u038e\u0390\3\2\2\2\u038f\u038a")
        buf.write("\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u038f\3\2\2\2\u0391")
        buf.write("\u0392\3\2\2\2\u0392\u0085\3\2\2\2\u0393\u0395\t\b\2\2")
        buf.write("\u0394\u0396\5T+\2\u0395\u0394\3\2\2\2\u0395\u0396\3\2")
        buf.write("\2\2\u0396\u0087\3\2\2\2\u0397\u0398\7=\2\2\u0398\u0399")
        buf.write("\5~@\2\u0399\u0089\3\2\2\2\u039a\u039b\7A\2\2\u039b\u039d")
        buf.write("\5\u009aN\2\u039c\u039e\5\u0094K\2\u039d\u039c\3\2\2\2")
        buf.write("\u039d\u039e\3\2\2\2\u039e\u008b\3\2\2\2\u039f\u03a2\t")
        buf.write("\t\2\2\u03a0\u03a1\7O\2\2\u03a1\u03a3\5H%\2\u03a2\u03a0")
        buf.write("\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a5\3\2\2\2\u03a4")
        buf.write("\u03a6\5\u009aN\2\u03a5\u03a4\3\2\2\2\u03a5\u03a6\3\2")
        buf.write("\2\2\u03a6\u03a8\3\2\2\2\u03a7\u03a9\5\u0094K\2\u03a8")
        buf.write("\u03a7\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u008d\3\2\2\2")
        buf.write("\u03aa\u03ab\7>\2\2\u03ab\u008f\3\2\2\2\u03ac\u03ad\7")
        buf.write("\3\2\2\u03ad\u0091\3\2\2\2\u03ae\u03af\7R\2\2\u03af\u0093")
        buf.write("\3\2\2\2\u03b0\u03b3\7@\2\2\u03b1\u03b2\7\\\2\2\u03b2")
        buf.write("\u03b4\t\n\2\2\u03b3\u03b1\3\2\2\2\u03b3\u03b4\3\2\2\2")
        buf.write("\u03b4\u0095\3\2\2\2\u03b5\u03b6\7B\2\2\u03b6\u03b7\7")
        buf.write("O\2\2\u03b7\u03b8\5H%\2\u03b8\u03bc\5\b\5\2\u03b9\u03bb")
        buf.write("\5L\'\2\u03ba\u03b9\3\2\2\2\u03bb\u03be\3\2\2\2\u03bc")
        buf.write("\u03ba\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03c0\3\2\2\2")
        buf.write("\u03be\u03bc\3\2\2\2\u03bf\u03c1\5T+\2\u03c0\u03bf\3\2")
        buf.write("\2\2\u03c0\u03c1\3\2\2\2\u03c1\u0097\3\2\2\2\u03c2\u03c3")
        buf.write("\7c\2\2\u03c3\u03c4\7C\2\2\u03c4\u03c5\5\u009aN\2\u03c5")
        buf.write("\u03c6\7i\2\2\u03c6\u0099\3\2\2\2\u03c7\u03c8\bN\1\2\u03c8")
        buf.write("\u03d7\5\20\t\2\u03c9\u03d7\5\32\16\2\u03ca\u03d7\7O\2")
        buf.write("\2\u03cb\u03d7\7h\2\2\u03cc\u03d7\7R\2\2\u03cd\u03d7\5")
        buf.write("\u0090I\2\u03ce\u03d7\7P\2\2\u03cf\u03d1\7c\2\2\u03d0")
        buf.write("\u03d2\7\65\2\2\u03d1\u03d0\3\2\2\2\u03d1\u03d2\3\2\2")
        buf.write("\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4\5\u009aN\2\u03d4\u03d5")
        buf.write("\7i\2\2\u03d5\u03d7\3\2\2\2\u03d6\u03c7\3\2\2\2\u03d6")
        buf.write("\u03c9\3\2\2\2\u03d6\u03ca\3\2\2\2\u03d6\u03cb\3\2\2\2")
        buf.write("\u03d6\u03cc\3\2\2\2\u03d6\u03cd\3\2\2\2\u03d6\u03ce\3")
        buf.write("\2\2\2\u03d6\u03cf\3\2\2\2\u03d7\u03e5\3\2\2\2\u03d8\u03d9")
        buf.write("\f\r\2\2\u03d9\u03da\5\u009eP\2\u03da\u03db\5\u009aN\16")
        buf.write("\u03db\u03e4\3\2\2\2\u03dc\u03dd\f\f\2\2\u03dd\u03de\5")
        buf.write("\u009cO\2\u03de\u03df\5\u009aN\r\u03df\u03e4\3\2\2\2\u03e0")
        buf.write("\u03e1\f\13\2\2\u03e1\u03e2\7Z\2\2\u03e2\u03e4\5\u009a")
        buf.write("N\f\u03e3\u03d8\3\2\2\2\u03e3\u03dc\3\2\2\2\u03e3\u03e0")
        buf.write("\3\2\2\2\u03e4\u03e7\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e5")
        buf.write("\u03e6\3\2\2\2\u03e6\u009b\3\2\2\2\u03e7\u03e5\3\2\2\2")
        buf.write("\u03e8\u03e9\t\13\2\2\u03e9\u009d\3\2\2\2\u03ea\u03eb")
        buf.write("\t\f\2\2\u03eb\u009f\3\2\2\2\u03ec\u03ed\t\r\2\2\u03ed")
        buf.write("\u00a1\3\2\2\2\u03ee\u03ef\t\16\2\2\u03ef\u00a3\3\2\2")
        buf.write("\2\u008a\u00a7\u00ae\u00b4\u00ce\u00d0\u00de\u00e0\u00e4")
        buf.write("\u00e8\u00ec\u00ef\u00f3\u00f6\u00ff\u0104\u0108\u010c")
        buf.write("\u011c\u0123\u0127\u012a\u0130\u0134\u0138\u013e\u0142")
        buf.write("\u0148\u014e\u0155\u0160\u0163\u0166\u016b\u016e\u0174")
        buf.write("\u018e\u0195\u019a\u019e\u01a1\u01a6\u01ab\u01af\u01b5")
        buf.write("\u01cb\u01d8\u01e0\u01e4\u01ec\u01f7\u01fc\u0200\u0206")
        buf.write("\u020a\u0216\u0218\u021e\u0222\u022e\u0234\u0244\u0249")
        buf.write("\u024b\u024e\u0253\u0255\u025b\u025f\u0263\u0268\u026a")
        buf.write("\u026d\u0270\u0276\u0278\u027e\u0282\u028b\u0290\u029e")
        buf.write("\u02a4\u02a8\u02ab\u02b0\u02b4\u02b9\u02bc\u02c1\u02c4")
        buf.write("\u02ca\u02d6\u02db\u02e0\u02e7\u02f3\u02f7\u02fa\u02ff")
        buf.write("\u0305\u030a\u030e\u0314\u0319\u031d\u0323\u0326\u032b")
        buf.write("\u032f\u033e\u0343\u0348\u034e\u0353\u0357\u035a\u035f")
        buf.write("\u0365\u0368\u036d\u0376\u037b\u0380\u038d\u0391\u0395")
        buf.write("\u039d\u03a2\u03a5\u03a8\u03b3\u03bc\u03c0\u03d1\u03d6")
        buf.write("\u03e3\u03e5")
        return buf.getvalue()


class ReqBlockParser ( Parser ):

    grammarFileName = "ReqBlock.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'&'", "'*'", "<INVALID>", "'!'", "'`'", 
                     "'\\'", "':'", "','", "'\"'", "'='", "'>='", "'>'", 
                     "'#'", "'-'", "'<='", "'<'", "'('", "'['", "'<>'", 
                     "'%'", "'+'", "'?'", "')'", "']'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "STRING", "CHECKELECTIVES", "COMMENT", 
                      "CURLY_BRACES", "DECIDE", "DISPLAY", "FROM", "FROM_ADVICE", 
                      "HIDE_RULE", "HIGH_PRIORITY", "IN", "LOW_PRIORITY", 
                      "NOCOUNT", "NOTGPA", "PROXYADVICE", "WHITESPACE", 
                      "ACCEPT", "ALLOW", "BEGIN", "BEGINSUB", "BLOCK", "BLOCKTYPE", 
                      "CLASS", "COPY_RULES", "CREDIT", "DONT_SHARE", "ENDOT", 
                      "ENDSUB", "EXCEPT", "GROUP", "HEADER_TAG", "INCLUDING", 
                      "LABEL", "LASTRES", "MAXCLASS", "MAXCREDIT", "MAXPASSFAIL", 
                      "MAXPERDISC", "MAXSPREAD", "MAXTERM", "MAXTRANSFER", 
                      "MINAREA", "MINGPA", "MINGRADE", "MINCLASS", "MINCREDIT", 
                      "MINPERDISC", "MINRES", "MINSPREAD", "MINTERM", "NONCOURSE", 
                      "OPTIONAL", "OF", "PSEUDO", "PSUEDO", "REMARK", "RULE_COMPLETE", 
                      "RULE_INCOMPLETE", "RULE_TAG", "STANDALONE", "SHARE", 
                      "TAG", "SAME_DISC", "UNDER", "WITH", "BEGINELSE", 
                      "BEGINIF", "ELSE", "ENDELSE", "ENDIF", "IF", "IS", 
                      "ISNT", "THEN", "AND", "OR", "NUMBER", "CATALOG_NUMBER", 
                      "WILD", "SYMBOL", "AMPERSAND", "ASTERISK", "AT", "BANG", 
                      "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", "DBL_QUOTE", 
                      "EQ", "GE", "GT", "HASH", "HYPHEN", "LE", "LT", "LP", 
                      "L_SQB", "NE", "PERCENT", "PLUS", "QUESTION_MARK", 
                      "RP", "R_SQB", "SEMICOLON", "SLASH", "UNDERSCORE" ]

    RULE_req_block = 0
    RULE_head = 1
    RULE_body = 2
    RULE_course_list = 3
    RULE_course_list_head_qualifier = 4
    RULE_course_list_body = 5
    RULE_course_list_body_qualifier = 6
    RULE_full_course = 7
    RULE_course_item = 8
    RULE_and_list = 9
    RULE_or_list = 10
    RULE_catalog_number = 11
    RULE_discipline = 12
    RULE_begin_if = 13
    RULE_end_if = 14
    RULE_if_then_head = 15
    RULE_else_head = 16
    RULE_head_rule_group = 17
    RULE_head_rule = 18
    RULE_if_then_body = 19
    RULE_else_body = 20
    RULE_body_rule_group = 21
    RULE_body_rule = 22
    RULE_requirement = 23
    RULE_group = 24
    RULE_group_list = 25
    RULE_group_item = 26
    RULE_subset = 27
    RULE_subset_qualifier = 28
    RULE_block = 29
    RULE_blocktype = 30
    RULE_allow_clause = 31
    RULE_class_credit_head = 32
    RULE_class_credit_body = 33
    RULE_allow = 34
    RULE_class_or_credit = 35
    RULE_copy_rules = 36
    RULE_display = 37
    RULE_except_list = 38
    RULE_header_tag = 39
    RULE_include_list = 40
    RULE_label = 41
    RULE_lastres = 42
    RULE_maxclass = 43
    RULE_maxcredit = 44
    RULE_maxpassfail = 45
    RULE_maxperdisc = 46
    RULE_maxspread = 47
    RULE_maxterm = 48
    RULE_maxtransfer = 49
    RULE_minarea = 50
    RULE_minclass = 51
    RULE_mincredit = 52
    RULE_mingpa = 53
    RULE_mingrade = 54
    RULE_minperdisc = 55
    RULE_minres = 56
    RULE_minspread = 57
    RULE_minterm = 58
    RULE_noncourse = 59
    RULE_num_classes = 60
    RULE_num_credits = 61
    RULE_nv_pair = 62
    RULE_optional = 63
    RULE_pseudo = 64
    RULE_remark = 65
    RULE_rule_complete = 66
    RULE_rule_tag = 67
    RULE_samedisc = 68
    RULE_share = 69
    RULE_standalone = 70
    RULE_string = 71
    RULE_symbol = 72
    RULE_tag = 73
    RULE_under = 74
    RULE_with_clause = 75
    RULE_expression = 76
    RULE_logical_op = 77
    RULE_relational_op = 78
    RULE_list_or = 79
    RULE_list_and = 80

    ruleNames =  [ "req_block", "head", "body", "course_list", "course_list_head_qualifier", 
                   "course_list_body", "course_list_body_qualifier", "full_course", 
                   "course_item", "and_list", "or_list", "catalog_number", 
                   "discipline", "begin_if", "end_if", "if_then_head", "else_head", 
                   "head_rule_group", "head_rule", "if_then_body", "else_body", 
                   "body_rule_group", "body_rule", "requirement", "group", 
                   "group_list", "group_item", "subset", "subset_qualifier", 
                   "block", "blocktype", "allow_clause", "class_credit_head", 
                   "class_credit_body", "allow", "class_or_credit", "copy_rules", 
                   "display", "except_list", "header_tag", "include_list", 
                   "label", "lastres", "maxclass", "maxcredit", "maxpassfail", 
                   "maxperdisc", "maxspread", "maxterm", "maxtransfer", 
                   "minarea", "minclass", "mincredit", "mingpa", "mingrade", 
                   "minperdisc", "minres", "minspread", "minterm", "noncourse", 
                   "num_classes", "num_credits", "nv_pair", "optional", 
                   "pseudo", "remark", "rule_complete", "rule_tag", "samedisc", 
                   "share", "standalone", "string", "symbol", "tag", "under", 
                   "with_clause", "expression", "logical_op", "relational_op", 
                   "list_or", "list_and" ]

    EOF = Token.EOF
    STRING=1
    CHECKELECTIVES=2
    COMMENT=3
    CURLY_BRACES=4
    DECIDE=5
    DISPLAY=6
    FROM=7
    FROM_ADVICE=8
    HIDE_RULE=9
    HIGH_PRIORITY=10
    IN=11
    LOW_PRIORITY=12
    NOCOUNT=13
    NOTGPA=14
    PROXYADVICE=15
    WHITESPACE=16
    ACCEPT=17
    ALLOW=18
    BEGIN=19
    BEGINSUB=20
    BLOCK=21
    BLOCKTYPE=22
    CLASS=23
    COPY_RULES=24
    CREDIT=25
    DONT_SHARE=26
    ENDOT=27
    ENDSUB=28
    EXCEPT=29
    GROUP=30
    HEADER_TAG=31
    INCLUDING=32
    LABEL=33
    LASTRES=34
    MAXCLASS=35
    MAXCREDIT=36
    MAXPASSFAIL=37
    MAXPERDISC=38
    MAXSPREAD=39
    MAXTERM=40
    MAXTRANSFER=41
    MINAREA=42
    MINGPA=43
    MINGRADE=44
    MINCLASS=45
    MINCREDIT=46
    MINPERDISC=47
    MINRES=48
    MINSPREAD=49
    MINTERM=50
    NONCOURSE=51
    OPTIONAL=52
    OF=53
    PSEUDO=54
    PSUEDO=55
    REMARK=56
    RULE_COMPLETE=57
    RULE_INCOMPLETE=58
    RULE_TAG=59
    STANDALONE=60
    SHARE=61
    TAG=62
    SAME_DISC=63
    UNDER=64
    WITH=65
    BEGINELSE=66
    BEGINIF=67
    ELSE=68
    ENDELSE=69
    ENDIF=70
    IF=71
    IS=72
    ISNT=73
    THEN=74
    AND=75
    OR=76
    NUMBER=77
    CATALOG_NUMBER=78
    WILD=79
    SYMBOL=80
    AMPERSAND=81
    ASTERISK=82
    AT=83
    BANG=84
    BACKQUOTE=85
    BACKSLASH=86
    COLON=87
    COMMA=88
    DBL_QUOTE=89
    EQ=90
    GE=91
    GT=92
    HASH=93
    HYPHEN=94
    LE=95
    LT=96
    LP=97
    L_SQB=98
    NE=99
    PERCENT=100
    PLUS=101
    QUESTION_MARK=102
    RP=103
    R_SQB=104
    SEMICOLON=105
    SLASH=106
    UNDERSCORE=107

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Req_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(ReqBlockParser.BEGIN, 0)

        def head(self):
            return self.getTypedRuleContext(ReqBlockParser.HeadContext,0)


        def ENDOT(self):
            return self.getToken(ReqBlockParser.ENDOT, 0)

        def EOF(self):
            return self.getToken(ReqBlockParser.EOF, 0)

        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def body(self):
            return self.getTypedRuleContext(ReqBlockParser.BodyContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_req_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReq_block" ):
                listener.enterReq_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReq_block" ):
                listener.exitReq_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReq_block" ):
                return visitor.visitReq_block(self)
            else:
                return visitor.visitChildren(self)




    def req_block(self):

        localctx = ReqBlockParser.Req_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_req_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 165
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 162
                    self.matchWildcard() 
                self.state = 167
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 168
            self.match(ReqBlockParser.BEGIN)
            self.state = 169
            self.head()
            self.state = 172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.SEMICOLON:
                self.state = 170
                self.match(ReqBlockParser.SEMICOLON)
                self.state = 171
                self.body()


            self.state = 174
            self.match(ReqBlockParser.ENDOT)
            self.state = 178
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 175
                    self.matchWildcard() 
                self.state = 180
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 181
            self.match(ReqBlockParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_credit_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_headContext,i)


        def if_then_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.If_then_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.If_then_headContext,i)


        def lastres(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LastresContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LastresContext,i)


        def maxclass(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxclassContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxclassContext,i)


        def maxcredit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxcreditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,i)


        def maxpassfail(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxpassfailContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,i)


        def maxperdisc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxperdiscContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,i)


        def maxterm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxtermContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxtermContext,i)


        def maxtransfer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxtransferContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,i)


        def mingrade(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MingradeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MingradeContext,i)


        def minclass(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MinclassContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MinclassContext,i)


        def mincredit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MincreditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MincreditContext,i)


        def mingpa(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MingpaContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MingpaContext,i)


        def minperdisc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MinperdiscContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,i)


        def minres(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MinresContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MinresContext,i)


        def optional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.OptionalContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.OptionalContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def standalone(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StandaloneContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StandaloneContext,i)


        def subset(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.SubsetContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.SubsetContext,i)


        def under(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.UnderContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.UnderContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead" ):
                listener.enterHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead" ):
                listener.exitHead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHead" ):
                return visitor.visitHead(self)
            else:
                return visitor.visitChildren(self)




    def head(self):

        localctx = ReqBlockParser.HeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ReqBlockParser.BEGINSUB - 20)) | (1 << (ReqBlockParser.DONT_SHARE - 20)) | (1 << (ReqBlockParser.LASTRES - 20)) | (1 << (ReqBlockParser.MAXCLASS - 20)) | (1 << (ReqBlockParser.MAXCREDIT - 20)) | (1 << (ReqBlockParser.MAXPASSFAIL - 20)) | (1 << (ReqBlockParser.MAXPERDISC - 20)) | (1 << (ReqBlockParser.MAXTERM - 20)) | (1 << (ReqBlockParser.MAXTRANSFER - 20)) | (1 << (ReqBlockParser.MINGPA - 20)) | (1 << (ReqBlockParser.MINGRADE - 20)) | (1 << (ReqBlockParser.MINCLASS - 20)) | (1 << (ReqBlockParser.MINCREDIT - 20)) | (1 << (ReqBlockParser.MINPERDISC - 20)) | (1 << (ReqBlockParser.MINRES - 20)) | (1 << (ReqBlockParser.OPTIONAL - 20)) | (1 << (ReqBlockParser.REMARK - 20)) | (1 << (ReqBlockParser.STANDALONE - 20)) | (1 << (ReqBlockParser.SHARE - 20)) | (1 << (ReqBlockParser.UNDER - 20)) | (1 << (ReqBlockParser.IF - 20)) | (1 << (ReqBlockParser.NUMBER - 20)))) != 0):
                self.state = 204
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ReqBlockParser.NUMBER]:
                    self.state = 183
                    self.class_credit_head()
                    pass
                elif token in [ReqBlockParser.IF]:
                    self.state = 184
                    self.if_then_head()
                    pass
                elif token in [ReqBlockParser.LASTRES]:
                    self.state = 185
                    self.lastres()
                    pass
                elif token in [ReqBlockParser.MAXCLASS]:
                    self.state = 186
                    self.maxclass()
                    pass
                elif token in [ReqBlockParser.MAXCREDIT]:
                    self.state = 187
                    self.maxcredit()
                    pass
                elif token in [ReqBlockParser.MAXPASSFAIL]:
                    self.state = 188
                    self.maxpassfail()
                    pass
                elif token in [ReqBlockParser.MAXPERDISC]:
                    self.state = 189
                    self.maxperdisc()
                    pass
                elif token in [ReqBlockParser.MAXTERM]:
                    self.state = 190
                    self.maxterm()
                    pass
                elif token in [ReqBlockParser.MAXTRANSFER]:
                    self.state = 191
                    self.maxtransfer()
                    pass
                elif token in [ReqBlockParser.MINGRADE]:
                    self.state = 192
                    self.mingrade()
                    pass
                elif token in [ReqBlockParser.MINCLASS]:
                    self.state = 193
                    self.minclass()
                    pass
                elif token in [ReqBlockParser.MINCREDIT]:
                    self.state = 194
                    self.mincredit()
                    pass
                elif token in [ReqBlockParser.MINGPA]:
                    self.state = 195
                    self.mingpa()
                    pass
                elif token in [ReqBlockParser.MINPERDISC]:
                    self.state = 196
                    self.minperdisc()
                    pass
                elif token in [ReqBlockParser.MINRES]:
                    self.state = 197
                    self.minres()
                    pass
                elif token in [ReqBlockParser.OPTIONAL]:
                    self.state = 198
                    self.optional()
                    pass
                elif token in [ReqBlockParser.REMARK]:
                    self.state = 199
                    self.remark()
                    pass
                elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                    self.state = 200
                    self.share()
                    pass
                elif token in [ReqBlockParser.STANDALONE]:
                    self.state = 201
                    self.standalone()
                    pass
                elif token in [ReqBlockParser.BEGINSUB]:
                    self.state = 202
                    self.subset()
                    pass
                elif token in [ReqBlockParser.UNDER]:
                    self.state = 203
                    self.under()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def class_credit_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.GroupContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.GroupContext,i)


        def if_then_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.If_then_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.If_then_bodyContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def subset(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.SubsetContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.SubsetContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = ReqBlockParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ReqBlockParser.BEGINSUB - 20)) | (1 << (ReqBlockParser.COPY_RULES - 20)) | (1 << (ReqBlockParser.LABEL - 20)) | (1 << (ReqBlockParser.REMARK - 20)) | (1 << (ReqBlockParser.RULE_COMPLETE - 20)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 20)) | (1 << (ReqBlockParser.IF - 20)) | (1 << (ReqBlockParser.NUMBER - 20)))) != 0):
                self.state = 220
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 209
                    self.block()
                    pass

                elif la_ == 2:
                    self.state = 210
                    self.blocktype()
                    pass

                elif la_ == 3:
                    self.state = 211
                    self.class_credit_body()
                    pass

                elif la_ == 4:
                    self.state = 212
                    self.copy_rules()
                    pass

                elif la_ == 5:
                    self.state = 213
                    self.group()
                    pass

                elif la_ == 6:
                    self.state = 214
                    self.if_then_body()
                    pass

                elif la_ == 7:
                    self.state = 215
                    self.label()
                    pass

                elif la_ == 8:
                    self.state = 216
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 217
                    self.remark()
                    pass

                elif la_ == 10:
                    self.state = 218
                    self.rule_complete()
                    pass

                elif la_ == 11:
                    self.state = 219
                    self.subset()
                    pass


                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def L_SQB(self):
            return self.getToken(ReqBlockParser.L_SQB, 0)

        def R_SQB(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.R_SQB)
            else:
                return self.getToken(ReqBlockParser.R_SQB, i)

        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def except_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Except_listContext,0)


        def include_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Include_listContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list" ):
                listener.enterCourse_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list" ):
                listener.exitCourse_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list" ):
                return visitor.visitCourse_list(self)
            else:
                return visitor.visitChildren(self)




    def course_list(self):

        localctx = ReqBlockParser.Course_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_course_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 225
                self.match(ReqBlockParser.L_SQB)


            self.state = 228
            self.course_item()
            self.state = 230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 229
                self.match(ReqBlockParser.R_SQB)


            self.state = 234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 232
                self.and_list()

            elif la_ == 2:
                self.state = 233
                self.or_list()


            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.R_SQB:
                self.state = 236
                self.match(ReqBlockParser.R_SQB)


            self.state = 241
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.EXCEPT]:
                self.state = 239
                self.except_list()
                pass
            elif token in [ReqBlockParser.INCLUDING]:
                self.state = 240
                self.include_list()
                pass
            elif token in [ReqBlockParser.EOF, ReqBlockParser.STRING, ReqBlockParser.DISPLAY, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.ENDOT, ReqBlockParser.ENDSUB, ReqBlockParser.LABEL, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXSPREAD, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINAREA, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINSPREAD, ReqBlockParser.MINTERM, ReqBlockParser.OPTIONAL, ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.RULE_TAG, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.TAG, ReqBlockParser.SAME_DISC, ReqBlockParser.UNDER, ReqBlockParser.ELSE, ReqBlockParser.ENDELSE, ReqBlockParser.ENDIF, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.AND, ReqBlockParser.OR, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB, ReqBlockParser.RP, ReqBlockParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 243
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_head_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def header_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_head_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_head_qualifier" ):
                listener.enterCourse_list_head_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_head_qualifier" ):
                listener.exitCourse_list_head_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_head_qualifier" ):
                return visitor.visitCourse_list_head_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def course_list_head_qualifier(self):

        localctx = ReqBlockParser.Course_list_head_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_course_list_head_qualifier)
        try:
            self.state = 253
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 246
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 247
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 248
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 249
                self.minspread()
                pass
            elif token in [ReqBlockParser.HEADER_TAG]:
                self.enterOuterAlt(localctx, 5)
                self.state = 250
                self.header_tag()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 251
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 252
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def course_list_body_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_body_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_body_qualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_body" ):
                listener.enterCourse_list_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_body" ):
                listener.exitCourse_list_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_body" ):
                return visitor.visitCourse_list_body(self)
            else:
                return visitor.visitChildren(self)




    def course_list_body(self):

        localctx = ReqBlockParser.Course_list_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_course_list_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.course_list()
            self.state = 262
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 256
                    self.course_list_body_qualifier()
                    self.state = 258
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                    if la_ == 1:
                        self.state = 257
                        self.tag()

             
                self.state = 264
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

            self.state = 266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 265
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_body_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minarea(self):
            return self.getTypedRuleContext(ReqBlockParser.MinareaContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_body_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_body_qualifier" ):
                listener.enterCourse_list_body_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_body_qualifier" ):
                listener.exitCourse_list_body_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_body_qualifier" ):
                return visitor.visitCourse_list_body_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def course_list_body_qualifier(self):

        localctx = ReqBlockParser.Course_list_body_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_course_list_body_qualifier)
        try:
            self.state = 282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 268
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 269
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 270
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 271
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINAREA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 272
                self.minarea()
                pass
            elif token in [ReqBlockParser.MINCLASS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 273
                self.minclass()
                pass
            elif token in [ReqBlockParser.MINCREDIT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 274
                self.mincredit()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 8)
                self.state = 275
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 276
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 277
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 11)
                self.state = 278
                self.minspread()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 12)
                self.state = 279
                self.rule_tag()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 13)
                self.state = 280
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 281
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_courseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_full_course

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_course" ):
                listener.enterFull_course(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_course" ):
                listener.exitFull_course(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_course" ):
                return visitor.visitFull_course(self)
            else:
                return visitor.visitChildren(self)




    def full_course(self):

        localctx = ReqBlockParser.Full_courseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_full_course)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.discipline()
            self.state = 285
            self.catalog_number()
            self.state = 289
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 286
                    self.with_clause() 
                self.state = 291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def L_SQB(self):
            return self.getToken(ReqBlockParser.L_SQB, 0)

        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def R_SQB(self):
            return self.getToken(ReqBlockParser.R_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_item" ):
                listener.enterCourse_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_item" ):
                listener.exitCourse_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_item" ):
                return visitor.visitCourse_item(self)
            else:
                return visitor.visitChildren(self)




    def course_item(self):

        localctx = ReqBlockParser.Course_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_course_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.L_SQB:
                self.state = 292
                self.match(ReqBlockParser.L_SQB)


            self.state = 296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 295
                self.discipline()


            self.state = 298
            self.catalog_number()
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.LP:
                self.state = 299
                self.with_clause()
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 305
                self.match(ReqBlockParser.R_SQB)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_andContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_andContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def R_SQB(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.R_SQB)
            else:
                return self.getToken(ReqBlockParser.R_SQB, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_and_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_list" ):
                listener.enterAnd_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_list" ):
                listener.exitAnd_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_list" ):
                return visitor.visitAnd_list(self)
            else:
                return visitor.visitChildren(self)




    def and_list(self):

        localctx = ReqBlockParser.And_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_and_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 308
                    self.list_and()
                    self.state = 310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ReqBlockParser.R_SQB:
                        self.state = 309
                        self.match(ReqBlockParser.R_SQB)


                    self.state = 312
                    self.course_item()

                else:
                    raise NoViableAltException(self)
                self.state = 316 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def R_SQB(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.R_SQB)
            else:
                return self.getToken(ReqBlockParser.R_SQB, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_or_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_list" ):
                listener.enterOr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_list" ):
                listener.exitOr_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_list" ):
                return visitor.visitOr_list(self)
            else:
                return visitor.visitChildren(self)




    def or_list(self):

        localctx = ReqBlockParser.Or_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_or_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 318
                    self.list_or()
                    self.state = 320
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ReqBlockParser.R_SQB:
                        self.state = 319
                        self.match(ReqBlockParser.R_SQB)


                    self.state = 322
                    self.course_item()

                else:
                    raise NoViableAltException(self)
                self.state = 326 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catalog_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_catalog_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalog_number" ):
                listener.enterCatalog_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalog_number" ):
                listener.exitCatalog_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatalog_number" ):
                return visitor.visitCatalog_number(self)
            else:
                return visitor.visitChildren(self)




    def catalog_number(self):

        localctx = ReqBlockParser.Catalog_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_catalog_number)
        try:
            self.state = 332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 328
                self.symbol()
                pass
            elif token in [ReqBlockParser.NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 329
                self.match(ReqBlockParser.NUMBER)
                pass
            elif token in [ReqBlockParser.CATALOG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 330
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 331
                self.match(ReqBlockParser.WILD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisciplineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_discipline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscipline" ):
                listener.enterDiscipline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscipline" ):
                listener.exitDiscipline(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscipline" ):
                return visitor.visitDiscipline(self)
            else:
                return visitor.visitChildren(self)




    def discipline(self):

        localctx = ReqBlockParser.DisciplineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_discipline)
        try:
            self.state = 339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 334
                self.symbol()
                pass
            elif token in [ReqBlockParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 335
                self.string()
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 336
                self.match(ReqBlockParser.WILD)
                pass
            elif token in [ReqBlockParser.BLOCK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 337
                self.match(ReqBlockParser.BLOCK)
                pass
            elif token in [ReqBlockParser.IS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 338
                self.match(ReqBlockParser.IS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINIF(self):
            return self.getToken(ReqBlockParser.BEGINIF, 0)

        def BEGINELSE(self):
            return self.getToken(ReqBlockParser.BEGINELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_begin_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_if" ):
                listener.enterBegin_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_if" ):
                listener.exitBegin_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBegin_if" ):
                return visitor.visitBegin_if(self)
            else:
                return visitor.visitChildren(self)




    def begin_if(self):

        localctx = ReqBlockParser.Begin_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_begin_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.BEGINELSE or _la==ReqBlockParser.BEGINIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENDIF(self):
            return self.getToken(ReqBlockParser.ENDIF, 0)

        def ENDELSE(self):
            return self.getToken(ReqBlockParser.ENDELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_end_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_if" ):
                listener.enterEnd_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_if" ):
                listener.exitEnd_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnd_if" ):
                return visitor.visitEnd_if(self)
            else:
                return visitor.visitChildren(self)




    def end_if(self):

        localctx = ReqBlockParser.End_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_end_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.ENDELSE or _la==ReqBlockParser.ENDIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_then_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def head_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Head_ruleContext,0)


        def head_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Head_rule_groupContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def else_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Else_headContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_if_then_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_then_head" ):
                listener.enterIf_then_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_then_head" ):
                listener.exitIf_then_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_then_head" ):
                return visitor.visitIf_then_head(self)
            else:
                return visitor.visitChildren(self)




    def if_then_head(self):

        localctx = ReqBlockParser.If_then_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_if_then_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(ReqBlockParser.IF)
            self.state = 346
            self.expression(0)
            self.state = 347
            self.match(ReqBlockParser.THEN)
            self.state = 350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.BEGINSUB, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINTERM, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 348
                self.head_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 349
                self.head_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 352
                self.label()


            self.state = 356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 355
                self.else_head()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def head_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Head_ruleContext,0)


        def head_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Head_rule_groupContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_else_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_head" ):
                listener.enterElse_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_head" ):
                listener.exitElse_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_head" ):
                return visitor.visitElse_head(self)
            else:
                return visitor.visitChildren(self)




    def else_head(self):

        localctx = ReqBlockParser.Else_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_else_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(ReqBlockParser.ELSE)
            self.state = 361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.BEGINSUB, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINTERM, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 359
                self.head_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 360
                self.head_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 363
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Head_rule_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def head_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Head_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Head_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_head_rule_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead_rule_group" ):
                listener.enterHead_rule_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead_rule_group" ):
                listener.exitHead_rule_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHead_rule_group" ):
                return visitor.visitHead_rule_group(self)
            else:
                return visitor.visitChildren(self)




    def head_rule_group(self):

        localctx = ReqBlockParser.Head_rule_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_head_rule_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.begin_if()
            self.state = 368 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 367
                self.head_rule()
                self.state = 370 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ReqBlockParser.BEGINSUB - 20)) | (1 << (ReqBlockParser.COPY_RULES - 20)) | (1 << (ReqBlockParser.DONT_SHARE - 20)) | (1 << (ReqBlockParser.LASTRES - 20)) | (1 << (ReqBlockParser.MAXCREDIT - 20)) | (1 << (ReqBlockParser.MAXPASSFAIL - 20)) | (1 << (ReqBlockParser.MAXTERM - 20)) | (1 << (ReqBlockParser.MAXTRANSFER - 20)) | (1 << (ReqBlockParser.MINGPA - 20)) | (1 << (ReqBlockParser.MINGRADE - 20)) | (1 << (ReqBlockParser.MINCLASS - 20)) | (1 << (ReqBlockParser.MINCREDIT - 20)) | (1 << (ReqBlockParser.MINPERDISC - 20)) | (1 << (ReqBlockParser.MINRES - 20)) | (1 << (ReqBlockParser.MINTERM - 20)) | (1 << (ReqBlockParser.REMARK - 20)) | (1 << (ReqBlockParser.RULE_COMPLETE - 20)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 20)) | (1 << (ReqBlockParser.SHARE - 20)) | (1 << (ReqBlockParser.IF - 20)) | (1 << (ReqBlockParser.NUMBER - 20)))) != 0)):
                    break

            self.state = 372
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Head_ruleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_then_head(self):
            return self.getTypedRuleContext(ReqBlockParser.If_then_headContext,0)


        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def class_credit_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_headContext,0)


        def copy_rules(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,0)


        def lastres(self):
            return self.getTypedRuleContext(ReqBlockParser.LastresContext,0)


        def maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,0)


        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtermContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minres(self):
            return self.getTypedRuleContext(ReqBlockParser.MinresContext,0)


        def minterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MintermContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def subset(self):
            return self.getTypedRuleContext(ReqBlockParser.SubsetContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_head_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead_rule" ):
                listener.enterHead_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead_rule" ):
                listener.exitHead_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHead_rule" ):
                return visitor.visitHead_rule(self)
            else:
                return visitor.visitChildren(self)




    def head_rule(self):

        localctx = ReqBlockParser.Head_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_head_rule)
        try:
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.if_then_head()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 376
                self.blocktype()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 377
                self.class_credit_head()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 378
                self.copy_rules()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 379
                self.lastres()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 380
                self.maxcredit()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 381
                self.maxpassfail()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 382
                self.maxterm()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 383
                self.maxtransfer()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 384
                self.minclass()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 385
                self.mincredit()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 386
                self.mingpa()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 387
                self.mingrade()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 388
                self.minperdisc()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 389
                self.minres()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 390
                self.minterm()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 391
                self.noncourse()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 392
                self.remark()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 393
                self.rule_complete()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 394
                self.share()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 395
                self.subset()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_then_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def body_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,0)


        def body_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_rule_groupContext,0)


        def requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RequirementContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RequirementContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def else_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Else_bodyContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_if_then_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_then_body" ):
                listener.enterIf_then_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_then_body" ):
                listener.exitIf_then_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_then_body" ):
                return visitor.visitIf_then_body(self)
            else:
                return visitor.visitChildren(self)




    def if_then_body(self):

        localctx = ReqBlockParser.If_then_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_if_then_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(ReqBlockParser.IF)
            self.state = 399
            self.expression(0)
            self.state = 400
            self.match(ReqBlockParser.THEN)
            self.state = 403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.BEGINSUB, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINRES, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 401
                self.body_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 402
                self.body_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 408
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 405
                    self.requirement() 
                self.state = 410
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

            self.state = 412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 411
                self.label()


            self.state = 415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 414
                self.else_body()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def body_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,0)


        def body_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_rule_groupContext,0)


        def requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RequirementContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RequirementContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_else_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_body" ):
                listener.enterElse_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_body" ):
                listener.exitElse_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_body" ):
                return visitor.visitElse_body(self)
            else:
                return visitor.visitChildren(self)




    def else_body(self):

        localctx = ReqBlockParser.Else_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_else_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(ReqBlockParser.ELSE)
            self.state = 420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.BEGINSUB, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINRES, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 418
                self.body_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 419
                self.body_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 425
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 422
                    self.requirement() 
                self.state = 427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

            self.state = 429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 428
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_rule_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def body_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_rule_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_rule_group" ):
                listener.enterBody_rule_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_rule_group" ):
                listener.exitBody_rule_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_rule_group" ):
                return visitor.visitBody_rule_group(self)
            else:
                return visitor.visitChildren(self)




    def body_rule_group(self):

        localctx = ReqBlockParser.Body_rule_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_body_rule_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.begin_if()
            self.state = 433 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 432
                self.body_rule()
                self.state = 435 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ReqBlockParser.BEGINSUB - 20)) | (1 << (ReqBlockParser.COPY_RULES - 20)) | (1 << (ReqBlockParser.DONT_SHARE - 20)) | (1 << (ReqBlockParser.LASTRES - 20)) | (1 << (ReqBlockParser.MAXCREDIT - 20)) | (1 << (ReqBlockParser.MAXTRANSFER - 20)) | (1 << (ReqBlockParser.MINGRADE - 20)) | (1 << (ReqBlockParser.MINCLASS - 20)) | (1 << (ReqBlockParser.MINCREDIT - 20)) | (1 << (ReqBlockParser.MINRES - 20)) | (1 << (ReqBlockParser.REMARK - 20)) | (1 << (ReqBlockParser.RULE_COMPLETE - 20)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 20)) | (1 << (ReqBlockParser.SHARE - 20)) | (1 << (ReqBlockParser.IF - 20)) | (1 << (ReqBlockParser.NUMBER - 20)))) != 0)):
                    break

            self.state = 437
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_ruleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_then_body(self):
            return self.getTypedRuleContext(ReqBlockParser.If_then_bodyContext,0)


        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def class_credit_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,0)


        def copy_rules(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,0)


        def group(self):
            return self.getTypedRuleContext(ReqBlockParser.GroupContext,0)


        def lastres(self):
            return self.getTypedRuleContext(ReqBlockParser.LastresContext,0)


        def maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minres(self):
            return self.getTypedRuleContext(ReqBlockParser.MinresContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def subset(self):
            return self.getTypedRuleContext(ReqBlockParser.SubsetContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_rule" ):
                listener.enterBody_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_rule" ):
                listener.exitBody_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_rule" ):
                return visitor.visitBody_rule(self)
            else:
                return visitor.visitChildren(self)




    def body_rule(self):

        localctx = ReqBlockParser.Body_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_body_rule)
        try:
            self.state = 457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 439
                self.if_then_body()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 440
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 441
                self.blocktype()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 442
                self.class_credit_body()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 443
                self.copy_rules()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 444
                self.group()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 445
                self.lastres()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 446
                self.maxcredit()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 447
                self.maxtransfer()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 448
                self.minclass()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 449
                self.mincredit()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 450
                self.mingrade()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 451
                self.minres()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 452
                self.noncourse()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 453
                self.remark()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 454
                self.rule_complete()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 455
                self.share()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 456
                self.subset()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequirementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirement" ):
                listener.enterRequirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirement" ):
                listener.exitRequirement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequirement" ):
                return visitor.visitRequirement(self)
            else:
                return visitor.visitChildren(self)




    def requirement(self):

        localctx = ReqBlockParser.RequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_requirement)
        try:
            self.state = 470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 459
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 460
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 461
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINCLASS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 462
                self.minclass()
                pass
            elif token in [ReqBlockParser.MINCREDIT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 463
                self.mincredit()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 6)
                self.state = 464
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 465
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 8)
                self.state = 466
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 9)
                self.state = 467
                self.samedisc()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 10)
                self.state = 468
                self.rule_tag()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 469
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def GROUP(self):
            return self.getToken(ReqBlockParser.GROUP, 0)

        def group_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_listContext,0)


        def requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RequirementContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RequirementContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = ReqBlockParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(ReqBlockParser.NUMBER)
            self.state = 473
            self.match(ReqBlockParser.GROUP)
            self.state = 474
            self.group_list()
            self.state = 478
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 475
                    self.requirement() 
                self.state = 480
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 481
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_itemContext,i)


        def logical_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Logical_opContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_list" ):
                listener.enterGroup_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_list" ):
                listener.exitGroup_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_list" ):
                return visitor.visitGroup_list(self)
            else:
                return visitor.visitChildren(self)




    def group_list(self):

        localctx = ReqBlockParser.Group_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_group_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.group_item()
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 485
                self.logical_op()
                self.state = 486
                self.group_item()
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def class_credit_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,0)


        def group(self):
            return self.getTypedRuleContext(ReqBlockParser.GroupContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RequirementContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RequirementContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_item" ):
                listener.enterGroup_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_item" ):
                listener.exitGroup_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_item" ):
                return visitor.visitGroup_item(self)
            else:
                return visitor.visitChildren(self)




    def group_item(self):

        localctx = ReqBlockParser.Group_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_group_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(ReqBlockParser.LP)
            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 494
                self.block()
                pass

            elif la_ == 2:
                self.state = 495
                self.blocktype()
                pass

            elif la_ == 3:
                self.state = 496
                self.course_list()
                pass

            elif la_ == 4:
                self.state = 497
                self.class_credit_body()
                pass

            elif la_ == 5:
                self.state = 498
                self.group()
                pass

            elif la_ == 6:
                self.state = 499
                self.noncourse()
                pass

            elif la_ == 7:
                self.state = 500
                self.rule_complete()
                pass


            self.state = 506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.DONT_SHARE) | (1 << ReqBlockParser.MAXPASSFAIL) | (1 << ReqBlockParser.MAXPERDISC) | (1 << ReqBlockParser.MAXTRANSFER) | (1 << ReqBlockParser.MINGPA) | (1 << ReqBlockParser.MINGRADE) | (1 << ReqBlockParser.MINCLASS) | (1 << ReqBlockParser.MINCREDIT) | (1 << ReqBlockParser.MINPERDISC) | (1 << ReqBlockParser.RULE_TAG) | (1 << ReqBlockParser.SHARE) | (1 << ReqBlockParser.SAME_DISC))) != 0):
                self.state = 503
                self.requirement()
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 509
                self.label()


            self.state = 512
            self.match(ReqBlockParser.RP)
            self.state = 516
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 513
                    self.requirement() 
                self.state = 518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 519
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINSUB(self):
            return self.getToken(ReqBlockParser.BEGINSUB, 0)

        def ENDSUB(self):
            return self.getToken(ReqBlockParser.ENDSUB, 0)

        def if_then_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.If_then_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.If_then_bodyContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def class_credit_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def course_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_listContext,i)


        def group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.GroupContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.GroupContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def subset_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Subset_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Subset_qualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_subset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubset" ):
                listener.enterSubset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubset" ):
                listener.exitSubset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubset" ):
                return visitor.visitSubset(self)
            else:
                return visitor.visitChildren(self)




    def subset(self):

        localctx = ReqBlockParser.SubsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_subset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.match(ReqBlockParser.BEGINSUB)
            self.state = 532 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 532
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 523
                    self.if_then_body()
                    pass

                elif la_ == 2:
                    self.state = 524
                    self.block()
                    pass

                elif la_ == 3:
                    self.state = 525
                    self.blocktype()
                    pass

                elif la_ == 4:
                    self.state = 526
                    self.class_credit_body()
                    pass

                elif la_ == 5:
                    self.state = 527
                    self.copy_rules()
                    pass

                elif la_ == 6:
                    self.state = 528
                    self.course_list()
                    pass

                elif la_ == 7:
                    self.state = 529
                    self.group()
                    pass

                elif la_ == 8:
                    self.state = 530
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 531
                    self.rule_complete()
                    pass


                self.state = 534 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.STRING) | (1 << ReqBlockParser.BLOCK) | (1 << ReqBlockParser.COPY_RULES) | (1 << ReqBlockParser.RULE_COMPLETE) | (1 << ReqBlockParser.RULE_INCOMPLETE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ReqBlockParser.IF - 71)) | (1 << (ReqBlockParser.IS - 71)) | (1 << (ReqBlockParser.NUMBER - 71)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 71)) | (1 << (ReqBlockParser.WILD - 71)) | (1 << (ReqBlockParser.SYMBOL - 71)) | (1 << (ReqBlockParser.L_SQB - 71)))) != 0)):
                    break

            self.state = 536
            self.match(ReqBlockParser.ENDSUB)
            self.state = 540
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 537
                    self.subset_qualifier() 
                self.state = 542
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 543
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subset_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_subset_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubset_qualifier" ):
                listener.enterSubset_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubset_qualifier" ):
                listener.exitSubset_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubset_qualifier" ):
                return visitor.visitSubset_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def subset_qualifier(self):

        localctx = ReqBlockParser.Subset_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_subset_qualifier)
        try:
            self.state = 556
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 546
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 547
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 548
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 549
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 550
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 551
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 7)
                self.state = 552
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 553
                self.minspread()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 9)
                self.state = 554
                self.rule_tag()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 555
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ReqBlockParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(ReqBlockParser.NUMBER)
            self.state = 559
            self.match(ReqBlockParser.BLOCK)
            self.state = 560
            self.expression(0)
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.RULE_TAG:
                self.state = 561
                self.rule_tag()


            self.state = 564
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlocktypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCKTYPE(self):
            return self.getToken(ReqBlockParser.BLOCKTYPE, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_blocktype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlocktype" ):
                listener.enterBlocktype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlocktype" ):
                listener.exitBlocktype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlocktype" ):
                return visitor.visitBlocktype(self)
            else:
                return visitor.visitChildren(self)




    def blocktype(self):

        localctx = ReqBlockParser.BlocktypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_blocktype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(ReqBlockParser.NUMBER)
            self.state = 567
            self.match(ReqBlockParser.BLOCKTYPE)
            self.state = 568
            self.expression(0)
            self.state = 569
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allow_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def allow(self):
            return self.getTypedRuleContext(ReqBlockParser.AllowContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow_clause" ):
                listener.enterAllow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow_clause" ):
                listener.exitAllow_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow_clause" ):
                return visitor.visitAllow_clause(self)
            else:
                return visitor.visitChildren(self)




    def allow_clause(self):

        localctx = ReqBlockParser.Allow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_allow_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(ReqBlockParser.LP)
            self.state = 572
            self.allow()
            self.state = 573
            self.match(ReqBlockParser.NUMBER)
            self.state = 574
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_credit_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def pseudo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.PseudoContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.PseudoContext,i)


        def header_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.IS)
            else:
                return self.getToken(ReqBlockParser.IS, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_credit_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_credit_head" ):
                listener.enterClass_credit_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_credit_head" ):
                listener.exitClass_credit_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_credit_head" ):
                return visitor.visitClass_credit_head(self)
            else:
                return visitor.visitChildren(self)




    def class_credit_head(self):

        localctx = ReqBlockParser.Class_credit_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_class_credit_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 576
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 577
                self.num_credits()
                pass


            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 580
                self.logical_op()
                self.state = 583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 581
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 582
                    self.num_credits()
                    pass




            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 31)) & ~0x3f) == 0 and ((1 << (_la - 31)) & ((1 << (ReqBlockParser.HEADER_TAG - 31)) | (1 << (ReqBlockParser.PSEUDO - 31)) | (1 << (ReqBlockParser.PSUEDO - 31)) | (1 << (ReqBlockParser.TAG - 31)) | (1 << (ReqBlockParser.IS - 31)))) != 0):
                self.state = 593
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.IS]:
                    self.state = 588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ReqBlockParser.IS:
                        self.state = 587
                        self.match(ReqBlockParser.IS)


                    self.state = 590
                    self.pseudo()
                    pass
                elif token in [ReqBlockParser.HEADER_TAG]:
                    self.state = 591
                    self.header_tag()
                    pass
                elif token in [ReqBlockParser.TAG]:
                    self.state = 592
                    self.tag()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 598
                self.display()
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 604
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_credit_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def course_list_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_bodyContext,0)


        def pseudo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.PseudoContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.PseudoContext,i)


        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.IS)
            else:
                return self.getToken(ReqBlockParser.IS, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_credit_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_credit_body" ):
                listener.enterClass_credit_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_credit_body" ):
                listener.exitClass_credit_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_credit_body" ):
                return visitor.visitClass_credit_body(self)
            else:
                return visitor.visitChildren(self)




    def class_credit_body(self):

        localctx = ReqBlockParser.Class_credit_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_class_credit_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 607
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 608
                self.num_credits()
                pass


            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 611
                self.logical_op()
                self.state = 614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 612
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 613
                    self.num_credits()
                    pass




            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 618
                self.course_list_body()


            self.state = 630
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 628
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.IS]:
                        self.state = 622
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.IS:
                            self.state = 621
                            self.match(ReqBlockParser.IS)


                        self.state = 624
                        self.pseudo()
                        pass
                    elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                        self.state = 625
                        self.share()
                        pass
                    elif token in [ReqBlockParser.RULE_TAG]:
                        self.state = 626
                        self.rule_tag()
                        pass
                    elif token in [ReqBlockParser.TAG]:
                        self.state = 627
                        self.tag()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 632
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 633
                self.display()
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 639
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW(self):
            return self.getToken(ReqBlockParser.ALLOW, 0)

        def ACCEPT(self):
            return self.getToken(ReqBlockParser.ACCEPT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow" ):
                listener.enterAllow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow" ):
                listener.exitAllow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow" ):
                return visitor.visitAllow(self)
            else:
                return visitor.visitChildren(self)




    def allow(self):

        localctx = ReqBlockParser.AllowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_allow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.ACCEPT or _la==ReqBlockParser.ALLOW):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_or_creditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_or_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_credit" ):
                listener.enterClass_or_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_credit" ):
                listener.exitClass_or_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_credit" ):
                return visitor.visitClass_or_credit(self)
            else:
                return visitor.visitChildren(self)




    def class_or_credit(self):

        localctx = ReqBlockParser.Class_or_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_class_or_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_rulesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY_RULES(self):
            return self.getToken(ReqBlockParser.COPY_RULES, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_copy_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_rules" ):
                listener.enterCopy_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_rules" ):
                listener.exitCopy_rules(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopy_rules" ):
                return visitor.visitCopy_rules(self)
            else:
                return visitor.visitChildren(self)




    def copy_rules(self):

        localctx = ReqBlockParser.Copy_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_copy_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(ReqBlockParser.COPY_RULES)
            self.state = 647
            self.expression(0)
            self.state = 649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 648
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(ReqBlockParser.DISPLAY, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_display

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplay" ):
                listener.enterDisplay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplay" ):
                listener.exitDisplay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplay" ):
                return visitor.visitDisplay(self)
            else:
                return visitor.visitChildren(self)




    def display(self):

        localctx = ReqBlockParser.DisplayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_display)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(ReqBlockParser.DISPLAY)
            self.state = 652
            self.string()
            self.state = 654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 653
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(ReqBlockParser.EXCEPT, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_except_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_list" ):
                listener.enterExcept_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_list" ):
                listener.exitExcept_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_list" ):
                return visitor.visitExcept_list(self)
            else:
                return visitor.visitChildren(self)




    def except_list(self):

        localctx = ReqBlockParser.Except_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_except_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(ReqBlockParser.EXCEPT)
            self.state = 657
            self.course_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_tagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEADER_TAG(self):
            return self.getToken(ReqBlockParser.HEADER_TAG, 0)

        def nv_pair(self):
            return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_tag" ):
                listener.enterHeader_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_tag" ):
                listener.exitHeader_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_tag" ):
                return visitor.visitHeader_tag(self)
            else:
                return visitor.visitChildren(self)




    def header_tag(self):

        localctx = ReqBlockParser.Header_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_header_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(ReqBlockParser.HEADER_TAG)
            self.state = 660
            self.nv_pair()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDING(self):
            return self.getToken(ReqBlockParser.INCLUDING, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_include_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_list" ):
                listener.enterInclude_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_list" ):
                listener.exitInclude_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclude_list" ):
                return visitor.visitInclude_list(self)
            else:
                return visitor.visitChildren(self)




    def include_list(self):

        localctx = ReqBlockParser.Include_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_include_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(ReqBlockParser.INCLUDING)
            self.state = 663
            self.course_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(ReqBlockParser.LABEL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = ReqBlockParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(ReqBlockParser.LABEL)
            self.state = 666
            self.string()
            self.state = 668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 667
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastresContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LASTRES(self):
            return self.getToken(ReqBlockParser.LASTRES, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.NUMBER)
            else:
                return self.getToken(ReqBlockParser.NUMBER, i)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def OF(self):
            return self.getToken(ReqBlockParser.OF, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_lastres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastres" ):
                listener.enterLastres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastres" ):
                listener.exitLastres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastres" ):
                return visitor.visitLastres(self)
            else:
                return visitor.visitChildren(self)




    def lastres(self):

        localctx = ReqBlockParser.LastresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_lastres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(ReqBlockParser.LASTRES)
            self.state = 671
            self.match(ReqBlockParser.NUMBER)
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.OF:
                self.state = 672
                self.match(ReqBlockParser.OF)
                self.state = 673
                self.match(ReqBlockParser.NUMBER)


            self.state = 676
            self.class_or_credit()
            self.state = 678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 677
                self.course_list()


            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 680
                self.tag()


            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 683
                self.display()
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 689
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxclassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCLASS(self):
            return self.getToken(ReqBlockParser.MAXCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxclass" ):
                listener.enterMaxclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxclass" ):
                listener.exitMaxclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxclass" ):
                return visitor.visitMaxclass(self)
            else:
                return visitor.visitChildren(self)




    def maxclass(self):

        localctx = ReqBlockParser.MaxclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_maxclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(ReqBlockParser.MAXCLASS)
            self.state = 693
            self.match(ReqBlockParser.NUMBER)
            self.state = 695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 694
                self.course_list()


            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 697
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxcreditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCREDIT(self):
            return self.getToken(ReqBlockParser.MAXCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxcredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxcredit" ):
                listener.enterMaxcredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxcredit" ):
                listener.exitMaxcredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxcredit" ):
                return visitor.visitMaxcredit(self)
            else:
                return visitor.visitChildren(self)




    def maxcredit(self):

        localctx = ReqBlockParser.MaxcreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_maxcredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(ReqBlockParser.MAXCREDIT)
            self.state = 701
            self.match(ReqBlockParser.NUMBER)
            self.state = 703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 702
                self.course_list()


            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 705
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxpassfailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPASSFAIL(self):
            return self.getToken(ReqBlockParser.MAXPASSFAIL, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxpassfail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxpassfail" ):
                listener.enterMaxpassfail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxpassfail" ):
                listener.exitMaxpassfail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxpassfail" ):
                return visitor.visitMaxpassfail(self)
            else:
                return visitor.visitChildren(self)




    def maxpassfail(self):

        localctx = ReqBlockParser.MaxpassfailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_maxpassfail)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(ReqBlockParser.MAXPASSFAIL)
            self.state = 709
            self.match(ReqBlockParser.NUMBER)
            self.state = 710
            self.class_or_credit()
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 711
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxperdiscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPERDISC(self):
            return self.getToken(ReqBlockParser.MAXPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxperdisc" ):
                listener.enterMaxperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxperdisc" ):
                listener.exitMaxperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxperdisc" ):
                return visitor.visitMaxperdisc(self)
            else:
                return visitor.visitChildren(self)




    def maxperdisc(self):

        localctx = ReqBlockParser.MaxperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_maxperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(ReqBlockParser.MAXPERDISC)
            self.state = 715
            self.match(ReqBlockParser.NUMBER)
            self.state = 716
            self.class_or_credit()
            self.state = 717
            self.match(ReqBlockParser.LP)
            self.state = 718
            self.match(ReqBlockParser.SYMBOL)
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 719
                self.list_or()
                self.state = 720
                self.match(ReqBlockParser.SYMBOL)
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 727
            self.match(ReqBlockParser.RP)
            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 728
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxspreadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXSPREAD(self):
            return self.getToken(ReqBlockParser.MAXSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxspread" ):
                listener.enterMaxspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxspread" ):
                listener.exitMaxspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxspread" ):
                return visitor.visitMaxspread(self)
            else:
                return visitor.visitChildren(self)




    def maxspread(self):

        localctx = ReqBlockParser.MaxspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_maxspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(ReqBlockParser.MAXSPREAD)
            self.state = 732
            self.match(ReqBlockParser.NUMBER)
            self.state = 734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 733
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTERM(self):
            return self.getToken(ReqBlockParser.MAXTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxterm" ):
                listener.enterMaxterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxterm" ):
                listener.exitMaxterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxterm" ):
                return visitor.visitMaxterm(self)
            else:
                return visitor.visitChildren(self)




    def maxterm(self):

        localctx = ReqBlockParser.MaxtermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_maxterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(ReqBlockParser.MAXTERM)
            self.state = 737
            self.match(ReqBlockParser.NUMBER)
            self.state = 738
            self.class_or_credit()
            self.state = 739
            self.course_list()
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 740
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtransferContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTRANSFER(self):
            return self.getToken(ReqBlockParser.MAXTRANSFER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxtransfer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxtransfer" ):
                listener.enterMaxtransfer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxtransfer" ):
                listener.exitMaxtransfer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxtransfer" ):
                return visitor.visitMaxtransfer(self)
            else:
                return visitor.visitChildren(self)




    def maxtransfer(self):

        localctx = ReqBlockParser.MaxtransferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_maxtransfer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(ReqBlockParser.MAXTRANSFER)
            self.state = 744
            self.match(ReqBlockParser.NUMBER)
            self.state = 745
            self.class_or_credit()
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 746
                self.match(ReqBlockParser.LP)
                self.state = 747
                self.match(ReqBlockParser.SYMBOL)
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                    self.state = 748
                    self.list_or()
                    self.state = 749
                    self.match(ReqBlockParser.SYMBOL)
                    self.state = 755
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 756
                self.match(ReqBlockParser.RP)


            self.state = 760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 759
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinareaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINAREA(self):
            return self.getToken(ReqBlockParser.MINAREA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minarea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinarea" ):
                listener.enterMinarea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinarea" ):
                listener.exitMinarea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinarea" ):
                return visitor.visitMinarea(self)
            else:
                return visitor.visitChildren(self)




    def minarea(self):

        localctx = ReqBlockParser.MinareaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_minarea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(ReqBlockParser.MINAREA)
            self.state = 763
            self.match(ReqBlockParser.NUMBER)
            self.state = 765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 764
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinclassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCLASS(self):
            return self.getToken(ReqBlockParser.MINCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinclass" ):
                listener.enterMinclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinclass" ):
                listener.exitMinclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinclass" ):
                return visitor.visitMinclass(self)
            else:
                return visitor.visitChildren(self)




    def minclass(self):

        localctx = ReqBlockParser.MinclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_minclass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(ReqBlockParser.MINCLASS)
            self.state = 768
            self.match(ReqBlockParser.NUMBER)
            self.state = 769
            self.course_list()
            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 770
                self.tag()


            self.state = 776
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 773
                    self.display() 
                self.state = 778
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 779
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MincreditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCREDIT(self):
            return self.getToken(ReqBlockParser.MINCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mincredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMincredit" ):
                listener.enterMincredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMincredit" ):
                listener.exitMincredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMincredit" ):
                return visitor.visitMincredit(self)
            else:
                return visitor.visitChildren(self)




    def mincredit(self):

        localctx = ReqBlockParser.MincreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_mincredit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.match(ReqBlockParser.MINCREDIT)
            self.state = 783
            self.match(ReqBlockParser.NUMBER)
            self.state = 784
            self.course_list()
            self.state = 786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 785
                self.tag()


            self.state = 791
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 788
                    self.display() 
                self.state = 793
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 794
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingpaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGPA(self):
            return self.getToken(ReqBlockParser.MINGPA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingpa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingpa" ):
                listener.enterMingpa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingpa" ):
                listener.exitMingpa(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingpa" ):
                return visitor.visitMingpa(self)
            else:
                return visitor.visitChildren(self)




    def mingpa(self):

        localctx = ReqBlockParser.MingpaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_mingpa)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(ReqBlockParser.MINGPA)
            self.state = 798
            self.match(ReqBlockParser.NUMBER)
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 799
                self.course_list()

            elif la_ == 2:
                self.state = 800
                self.expression(0)


            self.state = 804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 803
                self.tag()


            self.state = 809
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 806
                    self.display() 
                self.state = 811
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

            self.state = 813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 812
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingradeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGRADE(self):
            return self.getToken(ReqBlockParser.MINGRADE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingrade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingrade" ):
                listener.enterMingrade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingrade" ):
                listener.exitMingrade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingrade" ):
                return visitor.visitMingrade(self)
            else:
                return visitor.visitChildren(self)




    def mingrade(self):

        localctx = ReqBlockParser.MingradeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_mingrade)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(ReqBlockParser.MINGRADE)
            self.state = 816
            self.match(ReqBlockParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinperdiscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINPERDISC(self):
            return self.getToken(ReqBlockParser.MINPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinperdisc" ):
                listener.enterMinperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinperdisc" ):
                listener.exitMinperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinperdisc" ):
                return visitor.visitMinperdisc(self)
            else:
                return visitor.visitChildren(self)




    def minperdisc(self):

        localctx = ReqBlockParser.MinperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_minperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(ReqBlockParser.MINPERDISC)
            self.state = 819
            self.match(ReqBlockParser.NUMBER)
            self.state = 820
            self.class_or_credit()
            self.state = 821
            self.match(ReqBlockParser.LP)
            self.state = 822
            self.match(ReqBlockParser.SYMBOL)
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 823
                self.list_or()
                self.state = 824
                self.match(ReqBlockParser.SYMBOL)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 831
            self.match(ReqBlockParser.RP)
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 832
                self.tag()


            self.state = 838
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 835
                    self.display() 
                self.state = 840
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinresContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINRES(self):
            return self.getToken(ReqBlockParser.MINRES, 0)

        def num_classes(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,0)


        def num_credits(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinres" ):
                listener.enterMinres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinres" ):
                listener.exitMinres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinres" ):
                return visitor.visitMinres(self)
            else:
                return visitor.visitChildren(self)




    def minres(self):

        localctx = ReqBlockParser.MinresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_minres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(ReqBlockParser.MINRES)
            self.state = 844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 842
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 843
                self.num_credits()
                pass


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 846
                self.display()
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 852
                self.label()


            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 855
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinspreadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINSPREAD(self):
            return self.getToken(ReqBlockParser.MINSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinspread" ):
                listener.enterMinspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinspread" ):
                listener.exitMinspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinspread" ):
                return visitor.visitMinspread(self)
            else:
                return visitor.visitChildren(self)




    def minspread(self):

        localctx = ReqBlockParser.MinspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_minspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(ReqBlockParser.MINSPREAD)
            self.state = 859
            self.match(ReqBlockParser.NUMBER)
            self.state = 861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 860
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MintermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINTERM(self):
            return self.getToken(ReqBlockParser.MINTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinterm" ):
                listener.enterMinterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinterm" ):
                listener.exitMinterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinterm" ):
                return visitor.visitMinterm(self)
            else:
                return visitor.visitChildren(self)




    def minterm(self):

        localctx = ReqBlockParser.MintermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_minterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(ReqBlockParser.MINTERM)
            self.state = 864
            self.match(ReqBlockParser.NUMBER)
            self.state = 865
            self.class_or_credit()
            self.state = 867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 866
                self.course_list()


            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 869
                self.tag()


            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 872
                self.display()
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoncourseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_noncourse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoncourse" ):
                listener.enterNoncourse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoncourse" ):
                listener.exitNoncourse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoncourse" ):
                return visitor.visitNoncourse(self)
            else:
                return visitor.visitChildren(self)




    def noncourse(self):

        localctx = ReqBlockParser.NoncourseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_noncourse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(ReqBlockParser.NUMBER)
            self.state = 879
            self.match(ReqBlockParser.NONCOURSE)
            self.state = 880
            self.match(ReqBlockParser.LP)
            self.state = 881
            self.expression(0)
            self.state = 882
            self.match(ReqBlockParser.RP)
            self.state = 884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 883
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_classesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_classes" ):
                listener.enterNum_classes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_classes" ):
                listener.exitNum_classes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_classes" ):
                return visitor.visitNum_classes(self)
            else:
                return visitor.visitChildren(self)




    def num_classes(self):

        localctx = ReqBlockParser.Num_classesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_num_classes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.match(ReqBlockParser.NUMBER)
            self.state = 887
            self.match(ReqBlockParser.CLASS)
            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 888
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_creditsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_credits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_credits" ):
                listener.enterNum_credits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_credits" ):
                listener.exitNum_credits(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_credits" ):
                return visitor.visitNum_credits(self)
            else:
                return visitor.visitChildren(self)




    def num_credits(self):

        localctx = ReqBlockParser.Num_creditsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_num_credits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(ReqBlockParser.NUMBER)
            self.state = 892
            self.match(ReqBlockParser.CREDIT)
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 893
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nv_pairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_nv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNv_pair" ):
                listener.enterNv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNv_pair" ):
                listener.exitNv_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNv_pair" ):
                return visitor.visitNv_pair(self)
            else:
                return visitor.visitChildren(self)




    def nv_pair(self):

        localctx = ReqBlockParser.Nv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_nv_pair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.match(ReqBlockParser.SYMBOL)
            self.state = 897
            self.match(ReqBlockParser.EQ)
            self.state = 898
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.STRING or _la==ReqBlockParser.SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(ReqBlockParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_optional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional" ):
                listener.enterOptional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional" ):
                listener.exitOptional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional" ):
                return visitor.visitOptional(self)
            else:
                return visitor.visitChildren(self)




    def optional(self):

        localctx = ReqBlockParser.OptionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_optional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(ReqBlockParser.OPTIONAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PSEUDO(self):
            return self.getToken(ReqBlockParser.PSEUDO, 0)

        def PSUEDO(self):
            return self.getToken(ReqBlockParser.PSUEDO, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_pseudo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudo" ):
                listener.enterPseudo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudo" ):
                listener.exitPseudo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudo" ):
                return visitor.visitPseudo(self)
            else:
                return visitor.visitChildren(self)




    def pseudo(self):

        localctx = ReqBlockParser.PseudoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_pseudo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.PSEUDO or _la==ReqBlockParser.PSUEDO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemarkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMARK(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.REMARK)
            else:
                return self.getToken(ReqBlockParser.REMARK, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StringContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StringContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SEMICOLON)
            else:
                return self.getToken(ReqBlockParser.SEMICOLON, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_remark

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemark" ):
                listener.enterRemark(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemark" ):
                listener.exitRemark(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemark" ):
                return visitor.visitRemark(self)
            else:
                return visitor.visitChildren(self)




    def remark(self):

        localctx = ReqBlockParser.RemarkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_remark)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 904
                    self.match(ReqBlockParser.REMARK)
                    self.state = 905
                    self.string()
                    self.state = 907
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                    if la_ == 1:
                        self.state = 906
                        self.match(ReqBlockParser.SEMICOLON)



                else:
                    raise NoViableAltException(self)
                self.state = 911 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_completeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_COMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_COMPLETE, 0)

        def RULE_INCOMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_INCOMPLETE, 0)

        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_complete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_complete" ):
                listener.enterRule_complete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_complete" ):
                listener.exitRule_complete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_complete" ):
                return visitor.visitRule_complete(self)
            else:
                return visitor.visitChildren(self)




    def rule_complete(self):

        localctx = ReqBlockParser.Rule_completeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_rule_complete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.RULE_COMPLETE or _la==ReqBlockParser.RULE_INCOMPLETE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 914
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_tagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_TAG(self):
            return self.getToken(ReqBlockParser.RULE_TAG, 0)

        def nv_pair(self):
            return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_tag" ):
                listener.enterRule_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_tag" ):
                listener.exitRule_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_tag" ):
                return visitor.visitRule_tag(self)
            else:
                return visitor.visitChildren(self)




    def rule_tag(self):

        localctx = ReqBlockParser.Rule_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_rule_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self.match(ReqBlockParser.RULE_TAG)
            self.state = 918
            self.nv_pair()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SamediscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAME_DISC(self):
            return self.getToken(ReqBlockParser.SAME_DISC, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_samedisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSamedisc" ):
                listener.enterSamedisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSamedisc" ):
                listener.exitSamedisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSamedisc" ):
                return visitor.visitSamedisc(self)
            else:
                return visitor.visitChildren(self)




    def samedisc(self):

        localctx = ReqBlockParser.SamediscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_samedisc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(ReqBlockParser.SAME_DISC)
            self.state = 921
            self.expression(0)
            self.state = 923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 922
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShareContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHARE(self):
            return self.getToken(ReqBlockParser.SHARE, 0)

        def DONT_SHARE(self):
            return self.getToken(ReqBlockParser.DONT_SHARE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShare" ):
                listener.enterShare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShare" ):
                listener.exitShare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShare" ):
                return visitor.visitShare(self)
            else:
                return visitor.visitChildren(self)




    def share(self):

        localctx = ReqBlockParser.ShareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_share)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.DONT_SHARE or _la==ReqBlockParser.SHARE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 926
                self.match(ReqBlockParser.NUMBER)
                self.state = 927
                self.class_or_credit()


            self.state = 931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 930
                self.expression(0)


            self.state = 934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 933
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(ReqBlockParser.STANDALONE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_standalone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalone" ):
                listener.enterStandalone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalone" ):
                listener.exitStandalone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandalone" ):
                return visitor.visitStandalone(self)
            else:
                return visitor.visitChildren(self)




    def standalone(self):

        localctx = ReqBlockParser.StandaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_standalone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(ReqBlockParser.STANDALONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = ReqBlockParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(ReqBlockParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = ReqBlockParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(ReqBlockParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAG(self):
            return self.getToken(ReqBlockParser.TAG, 0)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag" ):
                listener.enterTag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag" ):
                listener.exitTag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTag" ):
                return visitor.visitTag(self)
            else:
                return visitor.visitChildren(self)




    def tag(self):

        localctx = ReqBlockParser.TagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_tag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(ReqBlockParser.TAG)
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.EQ:
                self.state = 943
                self.match(ReqBlockParser.EQ)
                self.state = 944
                _la = self._input.LA(1)
                if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (ReqBlockParser.NUMBER - 77)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 77)) | (1 << (ReqBlockParser.SYMBOL - 77)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(ReqBlockParser.UNDER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_under

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnder" ):
                listener.enterUnder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnder" ):
                listener.exitUnder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnder" ):
                return visitor.visitUnder(self)
            else:
                return visitor.visitChildren(self)




    def under(self):

        localctx = ReqBlockParser.UnderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_under)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.match(ReqBlockParser.UNDER)
            self.state = 948
            self.match(ReqBlockParser.NUMBER)
            self.state = 949
            self.class_or_credit()
            self.state = 950
            self.course_list()
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 951
                self.display()
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 957
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def WITH(self):
            return self.getToken(ReqBlockParser.WITH, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = ReqBlockParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(ReqBlockParser.LP)
            self.state = 961
            self.match(ReqBlockParser.WITH)
            self.state = 962
            self.expression(0)
            self.state = 963
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_course(self):
            return self.getTypedRuleContext(ReqBlockParser.Full_courseContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def QUESTION_MARK(self):
            return self.getToken(ReqBlockParser.QUESTION_MARK, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,i)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def relational_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Relational_opContext,0)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ReqBlockParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 152
        self.enterRecursionRule(localctx, 152, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 966
                self.full_course()
                pass

            elif la_ == 2:
                self.state = 967
                self.discipline()
                pass

            elif la_ == 3:
                self.state = 968
                self.match(ReqBlockParser.NUMBER)
                pass

            elif la_ == 4:
                self.state = 969
                self.match(ReqBlockParser.QUESTION_MARK)
                pass

            elif la_ == 5:
                self.state = 970
                self.match(ReqBlockParser.SYMBOL)
                pass

            elif la_ == 6:
                self.state = 971
                self.string()
                pass

            elif la_ == 7:
                self.state = 972
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass

            elif la_ == 8:
                self.state = 973
                self.match(ReqBlockParser.LP)
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.NONCOURSE:
                    self.state = 974
                    self.match(ReqBlockParser.NONCOURSE)


                self.state = 977
                self.expression(0)
                self.state = 978
                self.match(ReqBlockParser.RP)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 995
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 993
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                    if la_ == 1:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 982
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 983
                        self.relational_op()
                        self.state = 984
                        self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 986
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 987
                        self.logical_op()
                        self.state = 988
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 990
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 991
                        self.match(ReqBlockParser.COMMA)
                        self.state = 992
                        self.expression(10)
                        pass

             
                self.state = 997
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Logical_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_logical_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_op" ):
                listener.enterLogical_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_op" ):
                listener.exitLogical_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_op" ):
                return visitor.visitLogical_op(self)
            else:
                return visitor.visitChildren(self)




    def logical_op(self):

        localctx = ReqBlockParser.Logical_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_logical_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.OR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def GE(self):
            return self.getToken(ReqBlockParser.GE, 0)

        def GT(self):
            return self.getToken(ReqBlockParser.GT, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def ISNT(self):
            return self.getToken(ReqBlockParser.ISNT, 0)

        def LE(self):
            return self.getToken(ReqBlockParser.LE, 0)

        def LT(self):
            return self.getToken(ReqBlockParser.LT, 0)

        def NE(self):
            return self.getToken(ReqBlockParser.NE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_op" ):
                return visitor.visitRelational_op(self)
            else:
                return visitor.visitChildren(self)




    def relational_op(self):

        localctx = ReqBlockParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (ReqBlockParser.IS - 72)) | (1 << (ReqBlockParser.ISNT - 72)) | (1 << (ReqBlockParser.EQ - 72)) | (1 << (ReqBlockParser.GE - 72)) | (1 << (ReqBlockParser.GT - 72)) | (1 << (ReqBlockParser.LE - 72)) | (1 << (ReqBlockParser.LT - 72)) | (1 << (ReqBlockParser.NE - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_orContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_or" ):
                listener.enterList_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_or" ):
                listener.exitList_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_or" ):
                return visitor.visitList_or(self)
            else:
                return visitor.visitChildren(self)




    def list_or(self):

        localctx = ReqBlockParser.List_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_list_or)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_andContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(ReqBlockParser.PLUS, 0)

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_and" ):
                listener.enterList_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_and" ):
                listener.exitList_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_and" ):
                return visitor.visitList_and(self)
            else:
                return visitor.visitChildren(self)




    def list_and(self):

        localctx = ReqBlockParser.List_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_list_and)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.PLUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[76] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         




