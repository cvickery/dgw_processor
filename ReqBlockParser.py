# Generated from ReqBlock.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3k")
        buf.write("\u03ba\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\3\2\7\2\u0092\n\2\f\2\16\2\u0095")
        buf.write("\13\2\3\2\3\2\3\2\3\2\5\2\u009b\n\2\3\2\3\2\7\2\u009f")
        buf.write("\n\2\f\2\16\2\u00a2\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\7\3\u00bb\n\3\f\3\16\3\u00be\13\3\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\7\4\u00cb\n\4\f\4\16")
        buf.write("\4\u00ce\13\4\3\5\5\5\u00d1\n\5\3\5\3\5\5\5\u00d5\n\5")
        buf.write("\3\5\3\5\5\5\u00d9\n\5\3\5\5\5\u00dc\n\5\3\5\3\5\5\5\u00e0")
        buf.write("\n\5\3\6\3\6\3\6\5\6\u00e5\n\6\7\6\u00e7\n\6\f\6\16\6")
        buf.write("\u00ea\13\6\3\6\5\6\u00ed\n\6\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u00f6\n\7\3\b\3\b\3\b\5\b\u00fb\n\b\7\b\u00fd")
        buf.write("\n\b\f\b\16\b\u0100\13\b\3\b\5\b\u0103\n\b\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0113")
        buf.write("\n\t\3\n\3\n\3\n\7\n\u0118\n\n\f\n\16\n\u011b\13\n\3\13")
        buf.write("\5\13\u011e\n\13\3\13\5\13\u0121\n\13\3\13\3\13\7\13\u0125")
        buf.write("\n\13\f\13\16\13\u0128\13\13\3\13\5\13\u012b\n\13\3\f")
        buf.write("\3\f\5\f\u012f\n\f\3\f\3\f\6\f\u0133\n\f\r\f\16\f\u0134")
        buf.write("\3\r\3\r\5\r\u0139\n\r\3\r\3\r\6\r\u013d\n\r\r\r\16\r")
        buf.write("\u013e\3\16\3\16\3\16\3\16\3\16\5\16\u0146\n\16\3\17\3")
        buf.write("\17\3\17\3\17\3\17\5\17\u014d\n\17\3\20\3\20\3\20\3\20")
        buf.write("\3\20\5\20\u0154\n\20\3\20\7\20\u0157\n\20\f\20\16\20")
        buf.write("\u015a\13\20\3\20\5\20\u015d\n\20\3\20\5\20\u0160\n\20")
        buf.write("\3\21\3\21\3\21\5\21\u0165\n\21\3\21\7\21\u0168\n\21\f")
        buf.write("\21\16\21\u016b\13\21\3\21\5\21\u016e\n\21\3\22\3\22\6")
        buf.write("\22\u0172\n\22\r\22\16\22\u0173\3\22\3\22\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\5\23\u018a\n\23\3\24\3\24\3")
        buf.write("\25\3\25\3\26\3\26\3\26\3\26\7\26\u0194\n\26\f\26\16\26")
        buf.write("\u0197\13\26\3\26\5\26\u019a\n\26\3\27\3\27\3\27\3\27")
        buf.write("\7\27\u01a0\n\27\f\27\16\27\u01a3\13\27\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\5\30\u01ad\n\30\3\30\7\30\u01b0")
        buf.write("\n\30\f\30\16\30\u01b3\13\30\3\30\5\30\u01b6\n\30\3\30")
        buf.write("\3\30\7\30\u01ba\n\30\f\30\16\30\u01bd\13\30\3\30\5\30")
        buf.write("\u01c0\n\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\5\31\u01cd\n\31\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\5\32\u01d9\n\32\3\32\5\32\u01dc")
        buf.write("\n\32\6\32\u01de\n\32\r\32\16\32\u01df\3\32\3\32\7\32")
        buf.write("\u01e4\n\32\f\32\16\32\u01e7\13\32\3\32\5\32\u01ea\n\32")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33")
        buf.write("\u01f6\n\33\3\34\3\34\3\34\3\34\5\34\u01fc\n\34\3\34\3")
        buf.write("\34\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0210\n\37\3\37\5")
        buf.write("\37\u0213\n\37\3\37\3\37\3\37\3\37\5\37\u0219\n\37\3\37")
        buf.write("\5\37\u021c\n\37\5\37\u021e\n\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\7\37\u0225\n\37\f\37\16\37\u0228\13\37\3\37\7\37\u022b")
        buf.write("\n\37\f\37\16\37\u022e\13\37\3\37\5\37\u0231\n\37\3 \3")
        buf.write(" \3 \3 \3 \3 \5 \u0239\n \3 \5 \u023c\n \3 \3 \3 \3 \5")
        buf.write(" \u0242\n \3 \5 \u0245\n \5 \u0247\n \3 \3 \3 \3 \3 \7")
        buf.write(" \u024e\n \f \16 \u0251\13 \3 \7 \u0254\n \f \16 \u0257")
        buf.write("\13 \3 \5 \u025a\n \3!\3!\3!\5!\u025f\n!\3\"\3\"\3\"\5")
        buf.write("\"\u0264\n\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\5%\u026f\n%\3")
        buf.write("&\3&\3&\3&\5&\u0275\n&\3&\3&\5&\u0279\n&\3&\5&\u027c\n")
        buf.write("&\3&\7&\u027f\n&\f&\16&\u0282\13&\3&\5&\u0285\n&\3\'\3")
        buf.write("\'\3\'\5\'\u028a\n\'\3\'\5\'\u028d\n\'\3(\3(\3(\5(\u0292")
        buf.write("\n(\3(\5(\u0295\n(\3)\3)\3)\3)\5)\u029b\n)\3)\5)\u029e")
        buf.write("\n)\3*\3*\3*\3*\3*\3*\3*\3*\7*\u02a8\n*\f*\16*\u02ab\13")
        buf.write("*\3*\3*\5*\u02af\n*\3+\3+\3+\5+\u02b4\n+\3,\3,\3,\3,\3")
        buf.write(",\5,\u02bb\n,\3-\3-\3-\3-\3-\3-\3-\3-\7-\u02c5\n-\f-\16")
        buf.write("-\u02c8\13-\3-\5-\u02cb\n-\3-\5-\u02ce\n-\3.\3.\3.\5.")
        buf.write("\u02d3\n.\3/\3/\3/\3/\5/\u02d9\n/\3/\7/\u02dc\n/\f/\16")
        buf.write("/\u02df\13/\3/\5/\u02e2\n/\3\60\3\60\3\60\3\60\5\60\u02e8")
        buf.write("\n\60\3\60\7\60\u02eb\n\60\f\60\16\60\u02ee\13\60\3\60")
        buf.write("\5\60\u02f1\n\60\3\61\3\61\3\61\3\61\5\61\u02f7\n\61\3")
        buf.write("\61\5\61\u02fa\n\61\3\61\7\61\u02fd\n\61\f\61\16\61\u0300")
        buf.write("\13\61\3\61\5\61\u0303\n\61\3\62\3\62\3\62\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\7\63\u0310\n\63\f\63\16\63")
        buf.write("\u0313\13\63\3\63\3\63\5\63\u0317\n\63\3\63\7\63\u031a")
        buf.write("\n\63\f\63\16\63\u031d\13\63\3\64\3\64\3\64\3\64\7\64")
        buf.write("\u0323\n\64\f\64\16\64\u0326\13\64\3\64\5\64\u0329\n\64")
        buf.write("\3\64\5\64\u032c\n\64\3\65\3\65\3\65\5\65\u0331\n\65\3")
        buf.write("\66\3\66\3\66\3\66\5\66\u0337\n\66\3\66\5\66\u033a\n\66")
        buf.write("\3\66\7\66\u033d\n\66\f\66\16\66\u0340\13\66\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\5\67\u0348\n\67\38\38\39\39\39\5")
        buf.write("9\u034f\n9\39\79\u0352\n9\f9\169\u0355\139\3:\3:\5:\u0359")
        buf.write("\n:\3;\3;\3;\3<\3<\3<\5<\u0361\n<\3=\3=\3=\5=\u0366\n")
        buf.write("=\3=\5=\u0369\n=\3=\5=\u036c\n=\3>\3>\3?\3?\3@\3@\3@\3")
        buf.write("@\5@\u0376\n@\3A\3A\3A\5A\u037b\nA\3B\3B\3B\3B\3B\5B\u0382")
        buf.write("\nB\3B\7B\u0385\nB\fB\16B\u0388\13B\3B\3B\3C\3C\3C\3C")
        buf.write("\3C\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u039b\nD\3D\3D\3")
        buf.write("D\5D\u03a0\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u03ad")
        buf.write("\nD\fD\16D\u03b0\13D\3E\3E\3F\3F\3G\3G\3H\3H\3H\4\u0093")
        buf.write("\u00a0\3\u0086I\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt")
        buf.write("vxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\2\r\3\2@A\3\2CD\3\2KL\4\2\27\27\31\31\3\2\678\4\2\32")
        buf.write("\32;;\5\2KKMMOO\3\2IJ\6\2FGY[^_bb\4\2JJWW\4\2IIdd\2\u0466")
        buf.write("\2\u0093\3\2\2\2\4\u00bc\3\2\2\2\6\u00cc\3\2\2\2\b\u00d0")
        buf.write("\3\2\2\2\n\u00e1\3\2\2\2\f\u00f5\3\2\2\2\16\u00f7\3\2")
        buf.write("\2\2\20\u0112\3\2\2\2\22\u0114\3\2\2\2\24\u011d\3\2\2")
        buf.write("\2\26\u0132\3\2\2\2\30\u013c\3\2\2\2\32\u0145\3\2\2\2")
        buf.write("\34\u014c\3\2\2\2\36\u014e\3\2\2\2 \u0161\3\2\2\2\"\u016f")
        buf.write("\3\2\2\2$\u0189\3\2\2\2&\u018b\3\2\2\2(\u018d\3\2\2\2")
        buf.write("*\u018f\3\2\2\2,\u019b\3\2\2\2.\u01a4\3\2\2\2\60\u01cc")
        buf.write("\3\2\2\2\62\u01ce\3\2\2\2\64\u01f5\3\2\2\2\66\u01f7\3")
        buf.write("\2\2\28\u01ff\3\2\2\2:\u0204\3\2\2\2<\u0209\3\2\2\2>\u0232")
        buf.write("\3\2\2\2@\u025b\3\2\2\2B\u0260\3\2\2\2D\u0265\3\2\2\2")
        buf.write("F\u0268\3\2\2\2H\u026b\3\2\2\2J\u0270\3\2\2\2L\u0286\3")
        buf.write("\2\2\2N\u028e\3\2\2\2P\u0296\3\2\2\2R\u029f\3\2\2\2T\u02b0")
        buf.write("\3\2\2\2V\u02b5\3\2\2\2X\u02bc\3\2\2\2Z\u02cf\3\2\2\2")
        buf.write("\\\u02d4\3\2\2\2^\u02e3\3\2\2\2`\u02f2\3\2\2\2b\u0304")
        buf.write("\3\2\2\2d\u0307\3\2\2\2f\u031e\3\2\2\2h\u032d\3\2\2\2")
        buf.write("j\u0332\3\2\2\2l\u0341\3\2\2\2n\u0349\3\2\2\2p\u034b\3")
        buf.write("\2\2\2r\u0356\3\2\2\2t\u035a\3\2\2\2v\u035d\3\2\2\2x\u0362")
        buf.write("\3\2\2\2z\u036d\3\2\2\2|\u036f\3\2\2\2~\u0375\3\2\2\2")
        buf.write("\u0080\u0377\3\2\2\2\u0082\u037c\3\2\2\2\u0084\u038b\3")
        buf.write("\2\2\2\u0086\u039f\3\2\2\2\u0088\u03b1\3\2\2\2\u008a\u03b3")
        buf.write("\3\2\2\2\u008c\u03b5\3\2\2\2\u008e\u03b7\3\2\2\2\u0090")
        buf.write("\u0092\13\2\2\2\u0091\u0090\3\2\2\2\u0092\u0095\3\2\2")
        buf.write("\2\u0093\u0094\3\2\2\2\u0093\u0091\3\2\2\2\u0094\u0096")
        buf.write("\3\2\2\2\u0095\u0093\3\2\2\2\u0096\u0097\7\23\2\2\u0097")
        buf.write("\u009a\5\4\3\2\u0098\u0099\7i\2\2\u0099\u009b\5\6\4\2")
        buf.write("\u009a\u0098\3\2\2\2\u009a\u009b\3\2\2\2\u009b\u009c\3")
        buf.write("\2\2\2\u009c\u00a0\7\33\2\2\u009d\u009f\13\2\2\2\u009e")
        buf.write("\u009d\3\2\2\2\u009f\u00a2\3\2\2\2\u00a0\u00a1\3\2\2\2")
        buf.write("\u00a0\u009e\3\2\2\2\u00a1\u00a3\3\2\2\2\u00a2\u00a0\3")
        buf.write("\2\2\2\u00a3\u00a4\7\2\2\3\u00a4\3\3\2\2\2\u00a5\u00bb")
        buf.write("\5<\37\2\u00a6\u00bb\5\36\20\2\u00a7\u00bb\5J&\2\u00a8")
        buf.write("\u00bb\5L\'\2\u00a9\u00bb\5N(\2\u00aa\u00bb\5P)\2\u00ab")
        buf.write("\u00bb\5R*\2\u00ac\u00bb\5V,\2\u00ad\u00bb\5X-\2\u00ae")
        buf.write("\u00bb\5b\62\2\u00af\u00bb\5\\/\2\u00b0\u00bb\5^\60\2")
        buf.write("\u00b1\u00bb\5`\61\2\u00b2\u00bb\5d\63\2\u00b3\u00bb\5")
        buf.write("f\64\2\u00b4\u00bb\5n8\2\u00b5\u00bb\5p9\2\u00b6\u00bb")
        buf.write("\5x=\2\u00b7\u00bb\5z>\2\u00b8\u00bb\5\62\32\2\u00b9\u00bb")
        buf.write("\5\u0082B\2\u00ba\u00a5\3\2\2\2\u00ba\u00a6\3\2\2\2\u00ba")
        buf.write("\u00a7\3\2\2\2\u00ba\u00a8\3\2\2\2\u00ba\u00a9\3\2\2\2")
        buf.write("\u00ba\u00aa\3\2\2\2\u00ba\u00ab\3\2\2\2\u00ba\u00ac\3")
        buf.write("\2\2\2\u00ba\u00ad\3\2\2\2\u00ba\u00ae\3\2\2\2\u00ba\u00af")
        buf.write("\3\2\2\2\u00ba\u00b0\3\2\2\2\u00ba\u00b1\3\2\2\2\u00ba")
        buf.write("\u00b2\3\2\2\2\u00ba\u00b3\3\2\2\2\u00ba\u00b4\3\2\2\2")
        buf.write("\u00ba\u00b5\3\2\2\2\u00ba\u00b6\3\2\2\2\u00ba\u00b7\3")
        buf.write("\2\2\2\u00ba\u00b8\3\2\2\2\u00ba\u00b9\3\2\2\2\u00bb\u00be")
        buf.write("\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd")
        buf.write("\5\3\2\2\2\u00be\u00bc\3\2\2\2\u00bf\u00cb\5\66\34\2\u00c0")
        buf.write("\u00cb\58\35\2\u00c1\u00cb\5> \2\u00c2\u00cb\5@!\2\u00c3")
        buf.write("\u00cb\5*\26\2\u00c4\u00cb\5\36\20\2\u00c5\u00cb\5H%\2")
        buf.write("\u00c6\u00cb\5l\67\2\u00c7\u00cb\5p9\2\u00c8\u00cb\5r")
        buf.write(":\2\u00c9\u00cb\5\62\32\2\u00ca\u00bf\3\2\2\2\u00ca\u00c0")
        buf.write("\3\2\2\2\u00ca\u00c1\3\2\2\2\u00ca\u00c2\3\2\2\2\u00ca")
        buf.write("\u00c3\3\2\2\2\u00ca\u00c4\3\2\2\2\u00ca\u00c5\3\2\2\2")
        buf.write("\u00ca\u00c6\3\2\2\2\u00ca\u00c7\3\2\2\2\u00ca\u00c8\3")
        buf.write("\2\2\2\u00ca\u00c9\3\2\2\2\u00cb\u00ce\3\2\2\2\u00cc\u00ca")
        buf.write("\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\7\3\2\2\2\u00ce\u00cc")
        buf.write("\3\2\2\2\u00cf\u00d1\7a\2\2\u00d0\u00cf\3\2\2\2\u00d0")
        buf.write("\u00d1\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d4\5\24\13")
        buf.write("\2\u00d3\u00d5\7h\2\2\u00d4\u00d3\3\2\2\2\u00d4\u00d5")
        buf.write("\3\2\2\2\u00d5\u00d8\3\2\2\2\u00d6\u00d9\5\26\f\2\u00d7")
        buf.write("\u00d9\5\30\r\2\u00d8\u00d6\3\2\2\2\u00d8\u00d7\3\2\2")
        buf.write("\2\u00d8\u00d9\3\2\2\2\u00d9\u00db\3\2\2\2\u00da\u00dc")
        buf.write("\7h\2\2\u00db\u00da\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc")
        buf.write("\u00df\3\2\2\2\u00dd\u00e0\5D#\2\u00de\u00e0\5F$\2\u00df")
        buf.write("\u00dd\3\2\2\2\u00df\u00de\3\2\2\2\u00df\u00e0\3\2\2\2")
        buf.write("\u00e0\t\3\2\2\2\u00e1\u00e8\5\b\5\2\u00e2\u00e4\5\f\7")
        buf.write("\2\u00e3\u00e5\5\u0080A\2\u00e4\u00e3\3\2\2\2\u00e4\u00e5")
        buf.write("\3\2\2\2\u00e5\u00e7\3\2\2\2\u00e6\u00e2\3\2\2\2\u00e7")
        buf.write("\u00ea\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e8\u00e9\3\2\2\2")
        buf.write("\u00e9\u00ec\3\2\2\2\u00ea\u00e8\3\2\2\2\u00eb\u00ed\5")
        buf.write("H%\2\u00ec\u00eb\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed\13")
        buf.write("\3\2\2\2\u00ee\u00f6\5T+\2\u00ef\u00f6\5`\61\2\u00f0\u00f6")
        buf.write("\5b\62\2\u00f1\u00f6\5h\65\2\u00f2\u00f6\5t;\2\u00f3\u00f6")
        buf.write("\5v<\2\u00f4\u00f6\5x=\2\u00f5\u00ee\3\2\2\2\u00f5\u00ef")
        buf.write("\3\2\2\2\u00f5\u00f0\3\2\2\2\u00f5\u00f1\3\2\2\2\u00f5")
        buf.write("\u00f2\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f5\u00f4\3\2\2\2")
        buf.write("\u00f6\r\3\2\2\2\u00f7\u00fe\5\b\5\2\u00f8\u00fa\5\20")
        buf.write("\t\2\u00f9\u00fb\5\u0080A\2\u00fa\u00f9\3\2\2\2\u00fa")
        buf.write("\u00fb\3\2\2\2\u00fb\u00fd\3\2\2\2\u00fc\u00f8\3\2\2\2")
        buf.write("\u00fd\u0100\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff\3")
        buf.write("\2\2\2\u00ff\u0102\3\2\2\2\u0100\u00fe\3\2\2\2\u0101\u0103")
        buf.write("\5H%\2\u0102\u0101\3\2\2\2\u0102\u0103\3\2\2\2\u0103\17")
        buf.write("\3\2\2\2\u0104\u0113\5P)\2\u0105\u0113\5R*\2\u0106\u0113")
        buf.write("\5T+\2\u0107\u0113\5X-\2\u0108\u0113\5Z.\2\u0109\u0113")
        buf.write("\5\\/\2\u010a\u0113\5^\60\2\u010b\u0113\5`\61\2\u010c")
        buf.write("\u0113\5b\62\2\u010d\u0113\5d\63\2\u010e\u0113\5h\65\2")
        buf.write("\u010f\u0113\5t;\2\u0110\u0113\5v<\2\u0111\u0113\5x=\2")
        buf.write("\u0112\u0104\3\2\2\2\u0112\u0105\3\2\2\2\u0112\u0106\3")
        buf.write("\2\2\2\u0112\u0107\3\2\2\2\u0112\u0108\3\2\2\2\u0112\u0109")
        buf.write("\3\2\2\2\u0112\u010a\3\2\2\2\u0112\u010b\3\2\2\2\u0112")
        buf.write("\u010c\3\2\2\2\u0112\u010d\3\2\2\2\u0112\u010e\3\2\2\2")
        buf.write("\u0112\u010f\3\2\2\2\u0112\u0110\3\2\2\2\u0112\u0111\3")
        buf.write("\2\2\2\u0113\21\3\2\2\2\u0114\u0115\5\34\17\2\u0115\u0119")
        buf.write("\5\32\16\2\u0116\u0118\5\u0084C\2\u0117\u0116\3\2\2\2")
        buf.write("\u0118\u011b\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u011a\3")
        buf.write("\2\2\2\u011a\23\3\2\2\2\u011b\u0119\3\2\2\2\u011c\u011e")
        buf.write("\7a\2\2\u011d\u011c\3\2\2\2\u011d\u011e\3\2\2\2\u011e")
        buf.write("\u0120\3\2\2\2\u011f\u0121\5\34\17\2\u0120\u011f\3\2\2")
        buf.write("\2\u0120\u0121\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0126")
        buf.write("\5\32\16\2\u0123\u0125\5\u0084C\2\u0124\u0123\3\2\2\2")
        buf.write("\u0125\u0128\3\2\2\2\u0126\u0124\3\2\2\2\u0126\u0127\3")
        buf.write("\2\2\2\u0127\u012a\3\2\2\2\u0128\u0126\3\2\2\2\u0129\u012b")
        buf.write("\7h\2\2\u012a\u0129\3\2\2\2\u012a\u012b\3\2\2\2\u012b")
        buf.write("\25\3\2\2\2\u012c\u012e\5\u008eH\2\u012d\u012f\7h\2\2")
        buf.write("\u012e\u012d\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u0130\3")
        buf.write("\2\2\2\u0130\u0131\5\24\13\2\u0131\u0133\3\2\2\2\u0132")
        buf.write("\u012c\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0132\3\2\2\2")
        buf.write("\u0134\u0135\3\2\2\2\u0135\27\3\2\2\2\u0136\u0138\5\u008c")
        buf.write("G\2\u0137\u0139\7h\2\2\u0138\u0137\3\2\2\2\u0138\u0139")
        buf.write("\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013b\5\24\13\2\u013b")
        buf.write("\u013d\3\2\2\2\u013c\u0136\3\2\2\2\u013d\u013e\3\2\2\2")
        buf.write("\u013e\u013c\3\2\2\2\u013e\u013f\3\2\2\2\u013f\31\3\2")
        buf.write("\2\2\u0140\u0146\5~@\2\u0141\u0146\7K\2\2\u0142\u0146")
        buf.write("\7M\2\2\u0143\u0146\7L\2\2\u0144\u0146\7N\2\2\u0145\u0140")
        buf.write("\3\2\2\2\u0145\u0141\3\2\2\2\u0145\u0142\3\2\2\2\u0145")
        buf.write("\u0143\3\2\2\2\u0145\u0144\3\2\2\2\u0146\33\3\2\2\2\u0147")
        buf.write("\u014d\5~@\2\u0148\u014d\5|?\2\u0149\u014d\7N\2\2\u014a")
        buf.write("\u014d\7\25\2\2\u014b\u014d\7F\2\2\u014c\u0147\3\2\2\2")
        buf.write("\u014c\u0148\3\2\2\2\u014c\u0149\3\2\2\2\u014c\u014a\3")
        buf.write("\2\2\2\u014c\u014b\3\2\2\2\u014d\35\3\2\2\2\u014e\u014f")
        buf.write("\7E\2\2\u014f\u0150\5\u0086D\2\u0150\u0153\7H\2\2\u0151")
        buf.write("\u0154\5$\23\2\u0152\u0154\5\"\22\2\u0153\u0151\3\2\2")
        buf.write("\2\u0153\u0152\3\2\2\2\u0154\u0158\3\2\2\2\u0155\u0157")
        buf.write("\5\60\31\2\u0156\u0155\3\2\2\2\u0157\u015a\3\2\2\2\u0158")
        buf.write("\u0156\3\2\2\2\u0158\u0159\3\2\2\2\u0159\u015c\3\2\2\2")
        buf.write("\u015a\u0158\3\2\2\2\u015b\u015d\5H%\2\u015c\u015b\3\2")
        buf.write("\2\2\u015c\u015d\3\2\2\2\u015d\u015f\3\2\2\2\u015e\u0160")
        buf.write("\5 \21\2\u015f\u015e\3\2\2\2\u015f\u0160\3\2\2\2\u0160")
        buf.write("\37\3\2\2\2\u0161\u0164\7B\2\2\u0162\u0165\5$\23\2\u0163")
        buf.write("\u0165\5\"\22\2\u0164\u0162\3\2\2\2\u0164\u0163\3\2\2")
        buf.write("\2\u0165\u0169\3\2\2\2\u0166\u0168\5\60\31\2\u0167\u0166")
        buf.write("\3\2\2\2\u0168\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u0169")
        buf.write("\u016a\3\2\2\2\u016a\u016d\3\2\2\2\u016b\u0169\3\2\2\2")
        buf.write("\u016c\u016e\5H%\2\u016d\u016c\3\2\2\2\u016d\u016e\3\2")
        buf.write("\2\2\u016e!\3\2\2\2\u016f\u0171\5&\24\2\u0170\u0172\5")
        buf.write("$\23\2\u0171\u0170\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0171")
        buf.write("\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0175\3\2\2\2\u0175")
        buf.write("\u0176\5(\25\2\u0176#\3\2\2\2\u0177\u018a\5\36\20\2\u0178")
        buf.write("\u018a\5\66\34\2\u0179\u018a\58\35\2\u017a\u018a\5> \2")
        buf.write("\u017b\u018a\5@!\2\u017c\u018a\5*\26\2\u017d\u018a\5J")
        buf.write("&\2\u017e\u018a\5N(\2\u017f\u018a\5X-\2\u0180\u018a\5")
        buf.write("\\/\2\u0181\u018a\5^\60\2\u0182\u018a\5b\62\2\u0183\u018a")
        buf.write("\5f\64\2\u0184\u018a\5l\67\2\u0185\u018a\5p9\2\u0186\u018a")
        buf.write("\5r:\2\u0187\u018a\5x=\2\u0188\u018a\5\62\32\2\u0189\u0177")
        buf.write("\3\2\2\2\u0189\u0178\3\2\2\2\u0189\u0179\3\2\2\2\u0189")
        buf.write("\u017a\3\2\2\2\u0189\u017b\3\2\2\2\u0189\u017c\3\2\2\2")
        buf.write("\u0189\u017d\3\2\2\2\u0189\u017e\3\2\2\2\u0189\u017f\3")
        buf.write("\2\2\2\u0189\u0180\3\2\2\2\u0189\u0181\3\2\2\2\u0189\u0182")
        buf.write("\3\2\2\2\u0189\u0183\3\2\2\2\u0189\u0184\3\2\2\2\u0189")
        buf.write("\u0185\3\2\2\2\u0189\u0186\3\2\2\2\u0189\u0187\3\2\2\2")
        buf.write("\u0189\u0188\3\2\2\2\u018a%\3\2\2\2\u018b\u018c\t\2\2")
        buf.write("\2\u018c\'\3\2\2\2\u018d\u018e\t\3\2\2\u018e)\3\2\2\2")
        buf.write("\u018f\u0190\7K\2\2\u0190\u0191\7\36\2\2\u0191\u0195\5")
        buf.write(",\27\2\u0192\u0194\5\60\31\2\u0193\u0192\3\2\2\2\u0194")
        buf.write("\u0197\3\2\2\2\u0195\u0193\3\2\2\2\u0195\u0196\3\2\2\2")
        buf.write("\u0196\u0199\3\2\2\2\u0197\u0195\3\2\2\2\u0198\u019a\5")
        buf.write("H%\2\u0199\u0198\3\2\2\2\u0199\u019a\3\2\2\2\u019a+\3")
        buf.write("\2\2\2\u019b\u01a1\5.\30\2\u019c\u019d\5\u0088E\2\u019d")
        buf.write("\u019e\5.\30\2\u019e\u01a0\3\2\2\2\u019f\u019c\3\2\2\2")
        buf.write("\u01a0\u01a3\3\2\2\2\u01a1\u019f\3\2\2\2\u01a1\u01a2\3")
        buf.write("\2\2\2\u01a2-\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a4\u01ac")
        buf.write("\7`\2\2\u01a5\u01ad\5\66\34\2\u01a6\u01ad\58\35\2\u01a7")
        buf.write("\u01ad\5\b\5\2\u01a8\u01ad\5> \2\u01a9\u01ad\5*\26\2\u01aa")
        buf.write("\u01ad\5l\67\2\u01ab\u01ad\5r:\2\u01ac\u01a5\3\2\2\2\u01ac")
        buf.write("\u01a6\3\2\2\2\u01ac\u01a7\3\2\2\2\u01ac\u01a8\3\2\2\2")
        buf.write("\u01ac\u01a9\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ac\u01ab\3")
        buf.write("\2\2\2\u01ad\u01b1\3\2\2\2\u01ae\u01b0\5\60\31\2\u01af")
        buf.write("\u01ae\3\2\2\2\u01b0\u01b3\3\2\2\2\u01b1\u01af\3\2\2\2")
        buf.write("\u01b1\u01b2\3\2\2\2\u01b2\u01b5\3\2\2\2\u01b3\u01b1\3")
        buf.write("\2\2\2\u01b4\u01b6\5H%\2\u01b5\u01b4\3\2\2\2\u01b5\u01b6")
        buf.write("\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01bb\7g\2\2\u01b8")
        buf.write("\u01ba\5\60\31\2\u01b9\u01b8\3\2\2\2\u01ba\u01bd\3\2\2")
        buf.write("\2\u01bb\u01b9\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01bf")
        buf.write("\3\2\2\2\u01bd\u01bb\3\2\2\2\u01be\u01c0\5H%\2\u01bf\u01be")
        buf.write("\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0/\3\2\2\2\u01c1\u01cd")
        buf.write("\5P)\2\u01c2\u01cd\5R*\2\u01c3\u01cd\5X-\2\u01c4\u01cd")
        buf.write("\5b\62\2\u01c5\u01cd\5`\61\2\u01c6\u01cd\5d\63\2\u01c7")
        buf.write("\u01cd\5v<\2\u01c8\u01cd\5x=\2\u01c9\u01cd\5\\/\2\u01ca")
        buf.write("\u01cd\5^\60\2\u01cb\u01cd\5t;\2\u01cc\u01c1\3\2\2\2\u01cc")
        buf.write("\u01c2\3\2\2\2\u01cc\u01c3\3\2\2\2\u01cc\u01c4\3\2\2\2")
        buf.write("\u01cc\u01c5\3\2\2\2\u01cc\u01c6\3\2\2\2\u01cc\u01c7\3")
        buf.write("\2\2\2\u01cc\u01c8\3\2\2\2\u01cc\u01c9\3\2\2\2\u01cc\u01ca")
        buf.write("\3\2\2\2\u01cc\u01cb\3\2\2\2\u01cd\61\3\2\2\2\u01ce\u01dd")
        buf.write("\7\24\2\2\u01cf\u01d9\5\36\20\2\u01d0\u01d9\5\66\34\2")
        buf.write("\u01d1\u01d9\58\35\2\u01d2\u01d9\5> \2\u01d3\u01d9\5@")
        buf.write("!\2\u01d4\u01d9\5\b\5\2\u01d5\u01d9\5*\26\2\u01d6\u01d9")
        buf.write("\5l\67\2\u01d7\u01d9\5r:\2\u01d8\u01cf\3\2\2\2\u01d8\u01d0")
        buf.write("\3\2\2\2\u01d8\u01d1\3\2\2\2\u01d8\u01d2\3\2\2\2\u01d8")
        buf.write("\u01d3\3\2\2\2\u01d8\u01d4\3\2\2\2\u01d8\u01d5\3\2\2\2")
        buf.write("\u01d8\u01d6\3\2\2\2\u01d8\u01d7\3\2\2\2\u01d9\u01db\3")
        buf.write("\2\2\2\u01da\u01dc\5H%\2\u01db\u01da\3\2\2\2\u01db\u01dc")
        buf.write("\3\2\2\2\u01dc\u01de\3\2\2\2\u01dd\u01d8\3\2\2\2\u01de")
        buf.write("\u01df\3\2\2\2\u01df\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2")
        buf.write("\u01e0\u01e1\3\2\2\2\u01e1\u01e5\7\34\2\2\u01e2\u01e4")
        buf.write("\5\64\33\2\u01e3\u01e2\3\2\2\2\u01e4\u01e7\3\2\2\2\u01e5")
        buf.write("\u01e3\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e9\3\2\2\2")
        buf.write("\u01e7\u01e5\3\2\2\2\u01e8\u01ea\5H%\2\u01e9\u01e8\3\2")
        buf.write("\2\2\u01e9\u01ea\3\2\2\2\u01ea\63\3\2\2\2\u01eb\u01f6")
        buf.write("\5P)\2\u01ec\u01f6\5T+\2\u01ed\u01f6\5`\61\2\u01ee\u01f6")
        buf.write("\5b\62\2\u01ef\u01f6\5X-\2\u01f0\u01f6\5d\63\2\u01f1\u01f6")
        buf.write("\5h\65\2\u01f2\u01f6\5R*\2\u01f3\u01f6\5t;\2\u01f4\u01f6")
        buf.write("\5x=\2\u01f5\u01eb\3\2\2\2\u01f5\u01ec\3\2\2\2\u01f5\u01ed")
        buf.write("\3\2\2\2\u01f5\u01ee\3\2\2\2\u01f5\u01ef\3\2\2\2\u01f5")
        buf.write("\u01f0\3\2\2\2\u01f5\u01f1\3\2\2\2\u01f5\u01f2\3\2\2\2")
        buf.write("\u01f5\u01f3\3\2\2\2\u01f5\u01f4\3\2\2\2\u01f6\65\3\2")
        buf.write("\2\2\u01f7\u01f8\7K\2\2\u01f8\u01f9\7\25\2\2\u01f9\u01fb")
        buf.write("\5\u0086D\2\u01fa\u01fc\5t;\2\u01fb\u01fa\3\2\2\2\u01fb")
        buf.write("\u01fc\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u01fe\5H%\2\u01fe")
        buf.write("\67\3\2\2\2\u01ff\u0200\7K\2\2\u0200\u0201\7\26\2\2\u0201")
        buf.write("\u0202\5\u0086D\2\u0202\u0203\5H%\2\u02039\3\2\2\2\u0204")
        buf.write("\u0205\7`\2\2\u0205\u0206\7\22\2\2\u0206\u0207\t\4\2\2")
        buf.write("\u0207\u0208\7g\2\2\u0208;\3\2\2\2\u0209\u020a\t\4\2\2")
        buf.write("\u020a\u020f\t\5\2\2\u020b\u020c\5\u0088E\2\u020c\u020d")
        buf.write("\t\4\2\2\u020d\u020e\t\5\2\2\u020e\u0210\3\2\2\2\u020f")
        buf.write("\u020b\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0212\3\2\2\2")
        buf.write("\u0211\u0213\5:\36\2\u0212\u0211\3\2\2\2\u0212\u0213\3")
        buf.write("\2\2\2\u0213\u021d\3\2\2\2\u0214\u0215\5\u0088E\2\u0215")
        buf.write("\u0216\7K\2\2\u0216\u0218\t\5\2\2\u0217\u0219\5t;\2\u0218")
        buf.write("\u0217\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u021b\3\2\2\2")
        buf.write("\u021a\u021c\5:\36\2\u021b\u021a\3\2\2\2\u021b\u021c\3")
        buf.write("\2\2\2\u021c\u021e\3\2\2\2\u021d\u0214\3\2\2\2\u021d\u021e")
        buf.write("\3\2\2\2\u021e\u0226\3\2\2\2\u021f\u0225\5\n\6\2\u0220")
        buf.write("\u0225\5\u0086D\2\u0221\u0225\7\65\2\2\u0222\u0225\5x")
        buf.write("=\2\u0223\u0225\5\u0080A\2\u0224\u021f\3\2\2\2\u0224\u0220")
        buf.write("\3\2\2\2\u0224\u0221\3\2\2\2\u0224\u0222\3\2\2\2\u0224")
        buf.write("\u0223\3\2\2\2\u0225\u0228\3\2\2\2\u0226\u0224\3\2\2\2")
        buf.write("\u0226\u0227\3\2\2\2\u0227\u022c\3\2\2\2\u0228\u0226\3")
        buf.write("\2\2\2\u0229\u022b\5B\"\2\u022a\u0229\3\2\2\2\u022b\u022e")
        buf.write("\3\2\2\2\u022c\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d")
        buf.write("\u0230\3\2\2\2\u022e\u022c\3\2\2\2\u022f\u0231\5H%\2\u0230")
        buf.write("\u022f\3\2\2\2\u0230\u0231\3\2\2\2\u0231=\3\2\2\2\u0232")
        buf.write("\u0233\t\4\2\2\u0233\u0238\t\5\2\2\u0234\u0235\5\u0088")
        buf.write("E\2\u0235\u0236\t\4\2\2\u0236\u0237\t\5\2\2\u0237\u0239")
        buf.write("\3\2\2\2\u0238\u0234\3\2\2\2\u0238\u0239\3\2\2\2\u0239")
        buf.write("\u023b\3\2\2\2\u023a\u023c\5:\36\2\u023b\u023a\3\2\2\2")
        buf.write("\u023b\u023c\3\2\2\2\u023c\u0246\3\2\2\2\u023d\u023e\5")
        buf.write("\u0088E\2\u023e\u023f\7K\2\2\u023f\u0241\t\5\2\2\u0240")
        buf.write("\u0242\5t;\2\u0241\u0240\3\2\2\2\u0241\u0242\3\2\2\2\u0242")
        buf.write("\u0244\3\2\2\2\u0243\u0245\5:\36\2\u0244\u0243\3\2\2\2")
        buf.write("\u0244\u0245\3\2\2\2\u0245\u0247\3\2\2\2\u0246\u023d\3")
        buf.write("\2\2\2\u0246\u0247\3\2\2\2\u0247\u024f\3\2\2\2\u0248\u024e")
        buf.write("\5\16\b\2\u0249\u024e\5\u0086D\2\u024a\u024e\7\65\2\2")
        buf.write("\u024b\u024e\5x=\2\u024c\u024e\5\u0080A\2\u024d\u0248")
        buf.write("\3\2\2\2\u024d\u0249\3\2\2\2\u024d\u024a\3\2\2\2\u024d")
        buf.write("\u024b\3\2\2\2\u024d\u024c\3\2\2\2\u024e\u0251\3\2\2\2")
        buf.write("\u024f\u024d\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0255\3")
        buf.write("\2\2\2\u0251\u024f\3\2\2\2\u0252\u0254\5B\"\2\u0253\u0252")
        buf.write("\3\2\2\2\u0254\u0257\3\2\2\2\u0255\u0253\3\2\2\2\u0255")
        buf.write("\u0256\3\2\2\2\u0256\u0259\3\2\2\2\u0257\u0255\3\2\2\2")
        buf.write("\u0258\u025a\5H%\2\u0259\u0258\3\2\2\2\u0259\u025a\3\2")
        buf.write("\2\2\u025a?\3\2\2\2\u025b\u025c\7\30\2\2\u025c\u025e\5")
        buf.write("\u0086D\2\u025d\u025f\7i\2\2\u025e\u025d\3\2\2\2\u025e")
        buf.write("\u025f\3\2\2\2\u025fA\3\2\2\2\u0260\u0261\7\b\2\2\u0261")
        buf.write("\u0263\5|?\2\u0262\u0264\7i\2\2\u0263\u0262\3\2\2\2\u0263")
        buf.write("\u0264\3\2\2\2\u0264C\3\2\2\2\u0265\u0266\7\35\2\2\u0266")
        buf.write("\u0267\5\b\5\2\u0267E\3\2\2\2\u0268\u0269\7\37\2\2\u0269")
        buf.write("\u026a\5\b\5\2\u026aG\3\2\2\2\u026b\u026c\7 \2\2\u026c")
        buf.write("\u026e\5|?\2\u026d\u026f\7i\2\2\u026e\u026d\3\2\2\2\u026e")
        buf.write("\u026f\3\2\2\2\u026fI\3\2\2\2\u0270\u0271\7!\2\2\u0271")
        buf.write("\u0274\7K\2\2\u0272\u0273\7\64\2\2\u0273\u0275\7K\2\2")
        buf.write("\u0274\u0272\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u0276\3")
        buf.write("\2\2\2\u0276\u0278\t\5\2\2\u0277\u0279\5\b\5\2\u0278\u0277")
        buf.write("\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027b\3\2\2\2\u027a")
        buf.write("\u027c\5\u0080A\2\u027b\u027a\3\2\2\2\u027b\u027c\3\2")
        buf.write("\2\2\u027c\u0280\3\2\2\2\u027d\u027f\5B\"\2\u027e\u027d")
        buf.write("\3\2\2\2\u027f\u0282\3\2\2\2\u0280\u027e\3\2\2\2\u0280")
        buf.write("\u0281\3\2\2\2\u0281\u0284\3\2\2\2\u0282\u0280\3\2\2\2")
        buf.write("\u0283\u0285\5H%\2\u0284\u0283\3\2\2\2\u0284\u0285\3\2")
        buf.write("\2\2\u0285K\3\2\2\2\u0286\u0287\7\"\2\2\u0287\u0289\7")
        buf.write("K\2\2\u0288\u028a\5\b\5\2\u0289\u0288\3\2\2\2\u0289\u028a")
        buf.write("\3\2\2\2\u028a\u028c\3\2\2\2\u028b\u028d\5\u0080A\2\u028c")
        buf.write("\u028b\3\2\2\2\u028c\u028d\3\2\2\2\u028dM\3\2\2\2\u028e")
        buf.write("\u028f\7#\2\2\u028f\u0291\7K\2\2\u0290\u0292\5\b\5\2\u0291")
        buf.write("\u0290\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0294\3\2\2\2")
        buf.write("\u0293\u0295\5\u0080A\2\u0294\u0293\3\2\2\2\u0294\u0295")
        buf.write("\3\2\2\2\u0295O\3\2\2\2\u0296\u0297\7$\2\2\u0297\u0298")
        buf.write("\7K\2\2\u0298\u029a\t\5\2\2\u0299\u029b\5\b\5\2\u029a")
        buf.write("\u0299\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u029d\3\2\2\2")
        buf.write("\u029c\u029e\5\u0080A\2\u029d\u029c\3\2\2\2\u029d\u029e")
        buf.write("\3\2\2\2\u029eQ\3\2\2\2\u029f\u02a0\7%\2\2\u02a0\u02a1")
        buf.write("\7K\2\2\u02a1\u02a2\t\5\2\2\u02a2\u02a3\7`\2\2\u02a3\u02a9")
        buf.write("\7O\2\2\u02a4\u02a5\5\u008cG\2\u02a5\u02a6\7O\2\2\u02a6")
        buf.write("\u02a8\3\2\2\2\u02a7\u02a4\3\2\2\2\u02a8\u02ab\3\2\2\2")
        buf.write("\u02a9\u02a7\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02ac\3")
        buf.write("\2\2\2\u02ab\u02a9\3\2\2\2\u02ac\u02ae\7g\2\2\u02ad\u02af")
        buf.write("\5\u0080A\2\u02ae\u02ad\3\2\2\2\u02ae\u02af\3\2\2\2\u02af")
        buf.write("S\3\2\2\2\u02b0\u02b1\7&\2\2\u02b1\u02b3\7K\2\2\u02b2")
        buf.write("\u02b4\5\u0080A\2\u02b3\u02b2\3\2\2\2\u02b3\u02b4\3\2")
        buf.write("\2\2\u02b4U\3\2\2\2\u02b5\u02b6\7\'\2\2\u02b6\u02b7\7")
        buf.write("K\2\2\u02b7\u02b8\t\5\2\2\u02b8\u02ba\5\b\5\2\u02b9\u02bb")
        buf.write("\5\u0080A\2\u02ba\u02b9\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb")
        buf.write("W\3\2\2\2\u02bc\u02bd\7(\2\2\u02bd\u02be\7K\2\2\u02be")
        buf.write("\u02ca\t\5\2\2\u02bf\u02c0\7`\2\2\u02c0\u02c6\7O\2\2\u02c1")
        buf.write("\u02c2\5\u008cG\2\u02c2\u02c3\7O\2\2\u02c3\u02c5\3\2\2")
        buf.write("\2\u02c4\u02c1\3\2\2\2\u02c5\u02c8\3\2\2\2\u02c6\u02c4")
        buf.write("\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02c9\3\2\2\2\u02c8")
        buf.write("\u02c6\3\2\2\2\u02c9\u02cb\7g\2\2\u02ca\u02bf\3\2\2\2")
        buf.write("\u02ca\u02cb\3\2\2\2\u02cb\u02cd\3\2\2\2\u02cc\u02ce\5")
        buf.write("\u0080A\2\u02cd\u02cc\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce")
        buf.write("Y\3\2\2\2\u02cf\u02d0\7)\2\2\u02d0\u02d2\7K\2\2\u02d1")
        buf.write("\u02d3\5\u0080A\2\u02d2\u02d1\3\2\2\2\u02d2\u02d3\3\2")
        buf.write("\2\2\u02d3[\3\2\2\2\u02d4\u02d5\7,\2\2\u02d5\u02d6\t\4")
        buf.write("\2\2\u02d6\u02d8\5\b\5\2\u02d7\u02d9\5\u0080A\2\u02d8")
        buf.write("\u02d7\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02dd\3\2\2\2")
        buf.write("\u02da\u02dc\5B\"\2\u02db\u02da\3\2\2\2\u02dc\u02df\3")
        buf.write("\2\2\2\u02dd\u02db\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02e1")
        buf.write("\3\2\2\2\u02df\u02dd\3\2\2\2\u02e0\u02e2\5H%\2\u02e1\u02e0")
        buf.write("\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2]\3\2\2\2\u02e3\u02e4")
        buf.write("\7-\2\2\u02e4\u02e5\t\4\2\2\u02e5\u02e7\5\b\5\2\u02e6")
        buf.write("\u02e8\5\u0080A\2\u02e7\u02e6\3\2\2\2\u02e7\u02e8\3\2")
        buf.write("\2\2\u02e8\u02ec\3\2\2\2\u02e9\u02eb\5B\"\2\u02ea\u02e9")
        buf.write("\3\2\2\2\u02eb\u02ee\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ec")
        buf.write("\u02ed\3\2\2\2\u02ed\u02f0\3\2\2\2\u02ee\u02ec\3\2\2\2")
        buf.write("\u02ef\u02f1\5H%\2\u02f0\u02ef\3\2\2\2\u02f0\u02f1\3\2")
        buf.write("\2\2\u02f1_\3\2\2\2\u02f2\u02f3\7*\2\2\u02f3\u02f6\7K")
        buf.write("\2\2\u02f4\u02f7\5\b\5\2\u02f5\u02f7\5\u0086D\2\u02f6")
        buf.write("\u02f4\3\2\2\2\u02f6\u02f5\3\2\2\2\u02f6\u02f7\3\2\2\2")
        buf.write("\u02f7\u02f9\3\2\2\2\u02f8\u02fa\5\u0080A\2\u02f9\u02f8")
        buf.write("\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fe\3\2\2\2\u02fb")
        buf.write("\u02fd\5B\"\2\u02fc\u02fb\3\2\2\2\u02fd\u0300\3\2\2\2")
        buf.write("\u02fe\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0302\3")
        buf.write("\2\2\2\u0300\u02fe\3\2\2\2\u0301\u0303\5H%\2\u0302\u0301")
        buf.write("\3\2\2\2\u0302\u0303\3\2\2\2\u0303a\3\2\2\2\u0304\u0305")
        buf.write("\7+\2\2\u0305\u0306\7K\2\2\u0306c\3\2\2\2\u0307\u0308")
        buf.write("\7.\2\2\u0308\u0309\7K\2\2\u0309\u030a\t\5\2\2\u030a\u030b")
        buf.write("\7`\2\2\u030b\u0311\7O\2\2\u030c\u030d\5\u008cG\2\u030d")
        buf.write("\u030e\7O\2\2\u030e\u0310\3\2\2\2\u030f\u030c\3\2\2\2")
        buf.write("\u0310\u0313\3\2\2\2\u0311\u030f\3\2\2\2\u0311\u0312\3")
        buf.write("\2\2\2\u0312\u0314\3\2\2\2\u0313\u0311\3\2\2\2\u0314\u0316")
        buf.write("\7g\2\2\u0315\u0317\5\u0080A\2\u0316\u0315\3\2\2\2\u0316")
        buf.write("\u0317\3\2\2\2\u0317\u031b\3\2\2\2\u0318\u031a\5B\"\2")
        buf.write("\u0319\u0318\3\2\2\2\u031a\u031d\3\2\2\2\u031b\u0319\3")
        buf.write("\2\2\2\u031b\u031c\3\2\2\2\u031ce\3\2\2\2\u031d\u031b")
        buf.write("\3\2\2\2\u031e\u031f\7/\2\2\u031f\u0320\7K\2\2\u0320\u0324")
        buf.write("\t\5\2\2\u0321\u0323\5B\"\2\u0322\u0321\3\2\2\2\u0323")
        buf.write("\u0326\3\2\2\2\u0324\u0322\3\2\2\2\u0324\u0325\3\2\2\2")
        buf.write("\u0325\u0328\3\2\2\2\u0326\u0324\3\2\2\2\u0327\u0329\5")
        buf.write("H%\2\u0328\u0327\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u032b")
        buf.write("\3\2\2\2\u032a\u032c\5\u0080A\2\u032b\u032a\3\2\2\2\u032b")
        buf.write("\u032c\3\2\2\2\u032cg\3\2\2\2\u032d\u032e\7\60\2\2\u032e")
        buf.write("\u0330\7K\2\2\u032f\u0331\5\u0080A\2\u0330\u032f\3\2\2")
        buf.write("\2\u0330\u0331\3\2\2\2\u0331i\3\2\2\2\u0332\u0333\7\61")
        buf.write("\2\2\u0333\u0334\7K\2\2\u0334\u0336\t\5\2\2\u0335\u0337")
        buf.write("\5\b\5\2\u0336\u0335\3\2\2\2\u0336\u0337\3\2\2\2\u0337")
        buf.write("\u0339\3\2\2\2\u0338\u033a\5\u0080A\2\u0339\u0338\3\2")
        buf.write("\2\2\u0339\u033a\3\2\2\2\u033a\u033e\3\2\2\2\u033b\u033d")
        buf.write("\5B\"\2\u033c\u033b\3\2\2\2\u033d\u0340\3\2\2\2\u033e")
        buf.write("\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033fk\3\2\2\2\u0340")
        buf.write("\u033e\3\2\2\2\u0341\u0342\7K\2\2\u0342\u0343\7\62\2\2")
        buf.write("\u0343\u0344\7`\2\2\u0344\u0345\5\u0086D\2\u0345\u0347")
        buf.write("\7g\2\2\u0346\u0348\5H%\2\u0347\u0346\3\2\2\2\u0347\u0348")
        buf.write("\3\2\2\2\u0348m\3\2\2\2\u0349\u034a\7\63\2\2\u034ao\3")
        buf.write("\2\2\2\u034b\u034c\7\66\2\2\u034c\u034e\5|?\2\u034d\u034f")
        buf.write("\7i\2\2\u034e\u034d\3\2\2\2\u034e\u034f\3\2\2\2\u034f")
        buf.write("\u0353\3\2\2\2\u0350\u0352\5p9\2\u0351\u0350\3\2\2\2\u0352")
        buf.write("\u0355\3\2\2\2\u0353\u0351\3\2\2\2\u0353\u0354\3\2\2\2")
        buf.write("\u0354q\3\2\2\2\u0355\u0353\3\2\2\2\u0356\u0358\t\6\2")
        buf.write("\2\u0357\u0359\5H%\2\u0358\u0357\3\2\2\2\u0358\u0359\3")
        buf.write("\2\2\2\u0359s\3\2\2\2\u035a\u035b\79\2\2\u035b\u035c\5")
        buf.write("\u0086D\2\u035cu\3\2\2\2\u035d\u035e\7=\2\2\u035e\u0360")
        buf.write("\5\u0086D\2\u035f\u0361\5\u0080A\2\u0360\u035f\3\2\2\2")
        buf.write("\u0360\u0361\3\2\2\2\u0361w\3\2\2\2\u0362\u0365\t\7\2")
        buf.write("\2\u0363\u0364\7K\2\2\u0364\u0366\t\5\2\2\u0365\u0363")
        buf.write("\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0368\3\2\2\2\u0367")
        buf.write("\u0369\5\u0086D\2\u0368\u0367\3\2\2\2\u0368\u0369\3\2")
        buf.write("\2\2\u0369\u036b\3\2\2\2\u036a\u036c\5\u0080A\2\u036b")
        buf.write("\u036a\3\2\2\2\u036b\u036c\3\2\2\2\u036cy\3\2\2\2\u036d")
        buf.write("\u036e\7:\2\2\u036e{\3\2\2\2\u036f\u0370\7\3\2\2\u0370")
        buf.write("}\3\2\2\2\u0371\u0376\7O\2\2\u0372\u0373\7e\2\2\u0373")
        buf.write("\u0374\7O\2\2\u0374\u0376\7e\2\2\u0375\u0371\3\2\2\2\u0375")
        buf.write("\u0372\3\2\2\2\u0376\177\3\2\2\2\u0377\u037a\7<\2\2\u0378")
        buf.write("\u0379\7Y\2\2\u0379\u037b\t\b\2\2\u037a\u0378\3\2\2\2")
        buf.write("\u037a\u037b\3\2\2\2\u037b\u0081\3\2\2\2\u037c\u037d\7")
        buf.write(">\2\2\u037d\u037e\7K\2\2\u037e\u037f\t\5\2\2\u037f\u0381")
        buf.write("\5\22\n\2\u0380\u0382\5\30\r\2\u0381\u0380\3\2\2\2\u0381")
        buf.write("\u0382\3\2\2\2\u0382\u0386\3\2\2\2\u0383\u0385\5B\"\2")
        buf.write("\u0384\u0383\3\2\2\2\u0385\u0388\3\2\2\2\u0386\u0384\3")
        buf.write("\2\2\2\u0386\u0387\3\2\2\2\u0387\u0389\3\2\2\2\u0388\u0386")
        buf.write("\3\2\2\2\u0389\u038a\5H%\2\u038a\u0083\3\2\2\2\u038b\u038c")
        buf.write("\7`\2\2\u038c\u038d\7?\2\2\u038d\u038e\5\u0086D\2\u038e")
        buf.write("\u038f\7g\2\2\u038f\u0085\3\2\2\2\u0390\u0391\bD\1\2\u0391")
        buf.write("\u03a0\5\22\n\2\u0392\u03a0\5\34\17\2\u0393\u03a0\7K\2")
        buf.write("\2\u0394\u03a0\7f\2\2\u0395\u03a0\7O\2\2\u0396\u03a0\5")
        buf.write("|?\2\u0397\u03a0\7M\2\2\u0398\u039a\7`\2\2\u0399\u039b")
        buf.write("\7\62\2\2\u039a\u0399\3\2\2\2\u039a\u039b\3\2\2\2\u039b")
        buf.write("\u039c\3\2\2\2\u039c\u039d\5\u0086D\2\u039d\u039e\7g\2")
        buf.write("\2\u039e\u03a0\3\2\2\2\u039f\u0390\3\2\2\2\u039f\u0392")
        buf.write("\3\2\2\2\u039f\u0393\3\2\2\2\u039f\u0394\3\2\2\2\u039f")
        buf.write("\u0395\3\2\2\2\u039f\u0396\3\2\2\2\u039f\u0397\3\2\2\2")
        buf.write("\u039f\u0398\3\2\2\2\u03a0\u03ae\3\2\2\2\u03a1\u03a2\f")
        buf.write("\r\2\2\u03a2\u03a3\5\u008aF\2\u03a3\u03a4\5\u0086D\16")
        buf.write("\u03a4\u03ad\3\2\2\2\u03a5\u03a6\f\f\2\2\u03a6\u03a7\5")
        buf.write("\u0088E\2\u03a7\u03a8\5\u0086D\r\u03a8\u03ad\3\2\2\2\u03a9")
        buf.write("\u03aa\f\13\2\2\u03aa\u03ab\7W\2\2\u03ab\u03ad\5\u0086")
        buf.write("D\f\u03ac\u03a1\3\2\2\2\u03ac\u03a5\3\2\2\2\u03ac\u03a9")
        buf.write("\3\2\2\2\u03ad\u03b0\3\2\2\2\u03ae\u03ac\3\2\2\2\u03ae")
        buf.write("\u03af\3\2\2\2\u03af\u0087\3\2\2\2\u03b0\u03ae\3\2\2\2")
        buf.write("\u03b1\u03b2\t\t\2\2\u03b2\u0089\3\2\2\2\u03b3\u03b4\t")
        buf.write("\n\2\2\u03b4\u008b\3\2\2\2\u03b5\u03b6\t\13\2\2\u03b6")
        buf.write("\u008d\3\2\2\2\u03b7\u03b8\t\f\2\2\u03b8\u008f\3\2\2\2")
        buf.write("\u0086\u0093\u009a\u00a0\u00ba\u00bc\u00ca\u00cc\u00d0")
        buf.write("\u00d4\u00d8\u00db\u00df\u00e4\u00e8\u00ec\u00f5\u00fa")
        buf.write("\u00fe\u0102\u0112\u0119\u011d\u0120\u0126\u012a\u012e")
        buf.write("\u0134\u0138\u013e\u0145\u014c\u0153\u0158\u015c\u015f")
        buf.write("\u0164\u0169\u016d\u0173\u0189\u0195\u0199\u01a1\u01ac")
        buf.write("\u01b1\u01b5\u01bb\u01bf\u01cc\u01d8\u01db\u01df\u01e5")
        buf.write("\u01e9\u01f5\u01fb\u020f\u0212\u0218\u021b\u021d\u0224")
        buf.write("\u0226\u022c\u0230\u0238\u023b\u0241\u0244\u0246\u024d")
        buf.write("\u024f\u0255\u0259\u025e\u0263\u026e\u0274\u0278\u027b")
        buf.write("\u0280\u0284\u0289\u028c\u0291\u0294\u029a\u029d\u02a9")
        buf.write("\u02ae\u02b3\u02ba\u02c6\u02ca\u02cd\u02d2\u02d8\u02dd")
        buf.write("\u02e1\u02e7\u02ec\u02f0\u02f6\u02f9\u02fe\u0302\u0311")
        buf.write("\u0316\u031b\u0324\u0328\u032b\u0330\u0336\u0339\u033e")
        buf.write("\u0347\u034e\u0353\u0358\u0360\u0365\u0368\u036b\u0375")
        buf.write("\u037a\u0381\u0386\u039a\u039f\u03ac\u03ae")
        return buf.getvalue()


class ReqBlockParser ( Parser ):

    grammarFileName = "ReqBlock.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'&'", "'*'", "<INVALID>", 
                     "'!'", "'`'", "'\\'", "':'", "','", "'\"'", "'='", 
                     "'>='", "'>'", "'#'", "'-'", "'<='", "'<'", "'('", 
                     "'['", "'<>'", "'%'", "'+'", "'''", "'?'", "')'", "']'", 
                     "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "STRING", "CHECKELECTIVES", "COMMENT", 
                      "CURLY_BRACES", "DECIDE", "DISPLAY", "FROM", "FROM_ADVICE", 
                      "HIDE_RULE", "HIGH_PRIORITY", "IN", "LOW_PRIORITY", 
                      "NOTGPA", "PROXYADVICE", "WHITESPACE", "ALLOW", "BEGIN", 
                      "BEGINSUB", "BLOCK", "BLOCKTYPE", "CLASS", "COPY_RULES", 
                      "CREDIT", "DONT_SHARE", "ENDOT", "ENDSUB", "EXCEPT", 
                      "GROUP", "INCLUDING", "LABEL", "LASTRES", "MAXCLASS", 
                      "MAXCREDIT", "MAXPASSFAIL", "MAXPERDISC", "MAXSPREAD", 
                      "MAXTERM", "MAXTRANSFER", "MINAREA", "MINGPA", "MINGRADE", 
                      "MINCLASS", "MINCREDIT", "MINPERDISC", "MINRES", "MINSPREAD", 
                      "MINTERM", "NONCOURSE", "OPTIONAL", "OF", "PSEUDO", 
                      "REMARK", "RULE_COMPLETE", "RULE_INCOMPLETE", "RULE_TAG", 
                      "STANDALONE", "SHARE", "TAG", "SAME_DISC", "UNDER", 
                      "WITH", "BEGINELSE", "BEGINIF", "ELSE", "ENDELSE", 
                      "ENDIF", "IF", "IS", "ISNT", "THEN", "AND", "OR", 
                      "NUMBER", "RANGE", "CATALOG_NUMBER", "WILD", "SYMBOL", 
                      "AMPERSAND", "ASTERISK", "AT", "BANG", "BACKQUOTE", 
                      "BACKSLASH", "COLON", "COMMA", "DBL_QUOTE", "EQ", 
                      "GE", "GT", "HASH", "HYPHEN", "LE", "LT", "LP", "L_SQB", 
                      "NE", "PERCENT", "PLUS", "QUOTE", "QUESTION_MARK", 
                      "RP", "R_SQB", "SEMICOLON", "SLASH", "UNDERSCORE" ]

    RULE_req_block = 0
    RULE_head = 1
    RULE_body = 2
    RULE_course_list = 3
    RULE_course_list_head = 4
    RULE_course_list_qualifier_head = 5
    RULE_course_list_body = 6
    RULE_course_list_qualifier_body = 7
    RULE_full_course = 8
    RULE_course_item = 9
    RULE_and_list = 10
    RULE_or_list = 11
    RULE_catalog_number = 12
    RULE_discipline = 13
    RULE_if_then = 14
    RULE_else_clause = 15
    RULE_stmt_group = 16
    RULE_stmt = 17
    RULE_begin_if = 18
    RULE_end_if = 19
    RULE_group = 20
    RULE_group_list = 21
    RULE_group_item = 22
    RULE_group_qualifier = 23
    RULE_subset = 24
    RULE_subset_qualifier = 25
    RULE_block = 26
    RULE_blocktype = 27
    RULE_allow_clause = 28
    RULE_class_credit_head = 29
    RULE_class_credit_body = 30
    RULE_copy_rules = 31
    RULE_display = 32
    RULE_except_list = 33
    RULE_including_list = 34
    RULE_label = 35
    RULE_lastres = 36
    RULE_maxclass = 37
    RULE_maxcredit = 38
    RULE_maxpassfail = 39
    RULE_maxperdisc = 40
    RULE_maxspread = 41
    RULE_maxterm = 42
    RULE_maxtransfer = 43
    RULE_minarea = 44
    RULE_minclass = 45
    RULE_mincredit = 46
    RULE_mingpa = 47
    RULE_mingrade = 48
    RULE_minperdisc = 49
    RULE_minres = 50
    RULE_minspread = 51
    RULE_minterm = 52
    RULE_noncourse = 53
    RULE_optional = 54
    RULE_remark = 55
    RULE_rule_complete = 56
    RULE_ruletag = 57
    RULE_samedisc = 58
    RULE_share = 59
    RULE_standalone = 60
    RULE_string = 61
    RULE_symbol = 62
    RULE_tag = 63
    RULE_under = 64
    RULE_with_clause = 65
    RULE_expression = 66
    RULE_logical_op = 67
    RULE_relational_op = 68
    RULE_list_or = 69
    RULE_list_and = 70

    ruleNames =  [ "req_block", "head", "body", "course_list", "course_list_head", 
                   "course_list_qualifier_head", "course_list_body", "course_list_qualifier_body", 
                   "full_course", "course_item", "and_list", "or_list", 
                   "catalog_number", "discipline", "if_then", "else_clause", 
                   "stmt_group", "stmt", "begin_if", "end_if", "group", 
                   "group_list", "group_item", "group_qualifier", "subset", 
                   "subset_qualifier", "block", "blocktype", "allow_clause", 
                   "class_credit_head", "class_credit_body", "copy_rules", 
                   "display", "except_list", "including_list", "label", 
                   "lastres", "maxclass", "maxcredit", "maxpassfail", "maxperdisc", 
                   "maxspread", "maxterm", "maxtransfer", "minarea", "minclass", 
                   "mincredit", "mingpa", "mingrade", "minperdisc", "minres", 
                   "minspread", "minterm", "noncourse", "optional", "remark", 
                   "rule_complete", "ruletag", "samedisc", "share", "standalone", 
                   "string", "symbol", "tag", "under", "with_clause", "expression", 
                   "logical_op", "relational_op", "list_or", "list_and" ]

    EOF = Token.EOF
    STRING=1
    CHECKELECTIVES=2
    COMMENT=3
    CURLY_BRACES=4
    DECIDE=5
    DISPLAY=6
    FROM=7
    FROM_ADVICE=8
    HIDE_RULE=9
    HIGH_PRIORITY=10
    IN=11
    LOW_PRIORITY=12
    NOTGPA=13
    PROXYADVICE=14
    WHITESPACE=15
    ALLOW=16
    BEGIN=17
    BEGINSUB=18
    BLOCK=19
    BLOCKTYPE=20
    CLASS=21
    COPY_RULES=22
    CREDIT=23
    DONT_SHARE=24
    ENDOT=25
    ENDSUB=26
    EXCEPT=27
    GROUP=28
    INCLUDING=29
    LABEL=30
    LASTRES=31
    MAXCLASS=32
    MAXCREDIT=33
    MAXPASSFAIL=34
    MAXPERDISC=35
    MAXSPREAD=36
    MAXTERM=37
    MAXTRANSFER=38
    MINAREA=39
    MINGPA=40
    MINGRADE=41
    MINCLASS=42
    MINCREDIT=43
    MINPERDISC=44
    MINRES=45
    MINSPREAD=46
    MINTERM=47
    NONCOURSE=48
    OPTIONAL=49
    OF=50
    PSEUDO=51
    REMARK=52
    RULE_COMPLETE=53
    RULE_INCOMPLETE=54
    RULE_TAG=55
    STANDALONE=56
    SHARE=57
    TAG=58
    SAME_DISC=59
    UNDER=60
    WITH=61
    BEGINELSE=62
    BEGINIF=63
    ELSE=64
    ENDELSE=65
    ENDIF=66
    IF=67
    IS=68
    ISNT=69
    THEN=70
    AND=71
    OR=72
    NUMBER=73
    RANGE=74
    CATALOG_NUMBER=75
    WILD=76
    SYMBOL=77
    AMPERSAND=78
    ASTERISK=79
    AT=80
    BANG=81
    BACKQUOTE=82
    BACKSLASH=83
    COLON=84
    COMMA=85
    DBL_QUOTE=86
    EQ=87
    GE=88
    GT=89
    HASH=90
    HYPHEN=91
    LE=92
    LT=93
    LP=94
    L_SQB=95
    NE=96
    PERCENT=97
    PLUS=98
    QUOTE=99
    QUESTION_MARK=100
    RP=101
    R_SQB=102
    SEMICOLON=103
    SLASH=104
    UNDERSCORE=105

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Req_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(ReqBlockParser.BEGIN, 0)

        def head(self):
            return self.getTypedRuleContext(ReqBlockParser.HeadContext,0)


        def ENDOT(self):
            return self.getToken(ReqBlockParser.ENDOT, 0)

        def EOF(self):
            return self.getToken(ReqBlockParser.EOF, 0)

        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def body(self):
            return self.getTypedRuleContext(ReqBlockParser.BodyContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_req_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReq_block" ):
                listener.enterReq_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReq_block" ):
                listener.exitReq_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReq_block" ):
                return visitor.visitReq_block(self)
            else:
                return visitor.visitChildren(self)




    def req_block(self):

        localctx = ReqBlockParser.Req_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_req_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 145
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 142
                    self.matchWildcard() 
                self.state = 147
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 148
            self.match(ReqBlockParser.BEGIN)
            self.state = 149
            self.head()
            self.state = 152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.SEMICOLON:
                self.state = 150
                self.match(ReqBlockParser.SEMICOLON)
                self.state = 151
                self.body()


            self.state = 154
            self.match(ReqBlockParser.ENDOT)
            self.state = 158
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 155
                    self.matchWildcard() 
                self.state = 160
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 161
            self.match(ReqBlockParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_credit_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_headContext,i)


        def if_then(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.If_thenContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.If_thenContext,i)


        def lastres(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LastresContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LastresContext,i)


        def maxclass(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxclassContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxclassContext,i)


        def maxcredit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxcreditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,i)


        def maxpassfail(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxpassfailContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,i)


        def maxperdisc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxperdiscContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,i)


        def maxterm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxtermContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxtermContext,i)


        def maxtransfer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxtransferContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,i)


        def mingrade(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MingradeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MingradeContext,i)


        def minclass(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MinclassContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MinclassContext,i)


        def mincredit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MincreditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MincreditContext,i)


        def mingpa(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MingpaContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MingpaContext,i)


        def minperdisc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MinperdiscContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,i)


        def minres(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MinresContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MinresContext,i)


        def optional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.OptionalContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.OptionalContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def standalone(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StandaloneContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StandaloneContext,i)


        def subset(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.SubsetContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.SubsetContext,i)


        def under(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.UnderContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.UnderContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead" ):
                listener.enterHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead" ):
                listener.exitHead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHead" ):
                return visitor.visitHead(self)
            else:
                return visitor.visitChildren(self)




    def head(self):

        localctx = ReqBlockParser.HeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ReqBlockParser.BEGINSUB - 18)) | (1 << (ReqBlockParser.DONT_SHARE - 18)) | (1 << (ReqBlockParser.LASTRES - 18)) | (1 << (ReqBlockParser.MAXCLASS - 18)) | (1 << (ReqBlockParser.MAXCREDIT - 18)) | (1 << (ReqBlockParser.MAXPASSFAIL - 18)) | (1 << (ReqBlockParser.MAXPERDISC - 18)) | (1 << (ReqBlockParser.MAXTERM - 18)) | (1 << (ReqBlockParser.MAXTRANSFER - 18)) | (1 << (ReqBlockParser.MINGPA - 18)) | (1 << (ReqBlockParser.MINGRADE - 18)) | (1 << (ReqBlockParser.MINCLASS - 18)) | (1 << (ReqBlockParser.MINCREDIT - 18)) | (1 << (ReqBlockParser.MINPERDISC - 18)) | (1 << (ReqBlockParser.MINRES - 18)) | (1 << (ReqBlockParser.OPTIONAL - 18)) | (1 << (ReqBlockParser.REMARK - 18)) | (1 << (ReqBlockParser.STANDALONE - 18)) | (1 << (ReqBlockParser.SHARE - 18)) | (1 << (ReqBlockParser.UNDER - 18)) | (1 << (ReqBlockParser.IF - 18)) | (1 << (ReqBlockParser.NUMBER - 18)) | (1 << (ReqBlockParser.RANGE - 18)))) != 0):
                self.state = 184
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ReqBlockParser.NUMBER, ReqBlockParser.RANGE]:
                    self.state = 163
                    self.class_credit_head()
                    pass
                elif token in [ReqBlockParser.IF]:
                    self.state = 164
                    self.if_then()
                    pass
                elif token in [ReqBlockParser.LASTRES]:
                    self.state = 165
                    self.lastres()
                    pass
                elif token in [ReqBlockParser.MAXCLASS]:
                    self.state = 166
                    self.maxclass()
                    pass
                elif token in [ReqBlockParser.MAXCREDIT]:
                    self.state = 167
                    self.maxcredit()
                    pass
                elif token in [ReqBlockParser.MAXPASSFAIL]:
                    self.state = 168
                    self.maxpassfail()
                    pass
                elif token in [ReqBlockParser.MAXPERDISC]:
                    self.state = 169
                    self.maxperdisc()
                    pass
                elif token in [ReqBlockParser.MAXTERM]:
                    self.state = 170
                    self.maxterm()
                    pass
                elif token in [ReqBlockParser.MAXTRANSFER]:
                    self.state = 171
                    self.maxtransfer()
                    pass
                elif token in [ReqBlockParser.MINGRADE]:
                    self.state = 172
                    self.mingrade()
                    pass
                elif token in [ReqBlockParser.MINCLASS]:
                    self.state = 173
                    self.minclass()
                    pass
                elif token in [ReqBlockParser.MINCREDIT]:
                    self.state = 174
                    self.mincredit()
                    pass
                elif token in [ReqBlockParser.MINGPA]:
                    self.state = 175
                    self.mingpa()
                    pass
                elif token in [ReqBlockParser.MINPERDISC]:
                    self.state = 176
                    self.minperdisc()
                    pass
                elif token in [ReqBlockParser.MINRES]:
                    self.state = 177
                    self.minres()
                    pass
                elif token in [ReqBlockParser.OPTIONAL]:
                    self.state = 178
                    self.optional()
                    pass
                elif token in [ReqBlockParser.REMARK]:
                    self.state = 179
                    self.remark()
                    pass
                elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                    self.state = 180
                    self.share()
                    pass
                elif token in [ReqBlockParser.STANDALONE]:
                    self.state = 181
                    self.standalone()
                    pass
                elif token in [ReqBlockParser.BEGINSUB]:
                    self.state = 182
                    self.subset()
                    pass
                elif token in [ReqBlockParser.UNDER]:
                    self.state = 183
                    self.under()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 188
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def class_credit_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.GroupContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.GroupContext,i)


        def if_then(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.If_thenContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.If_thenContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def subset(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.SubsetContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.SubsetContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = ReqBlockParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ReqBlockParser.BEGINSUB - 18)) | (1 << (ReqBlockParser.COPY_RULES - 18)) | (1 << (ReqBlockParser.LABEL - 18)) | (1 << (ReqBlockParser.REMARK - 18)) | (1 << (ReqBlockParser.RULE_COMPLETE - 18)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 18)) | (1 << (ReqBlockParser.IF - 18)) | (1 << (ReqBlockParser.NUMBER - 18)) | (1 << (ReqBlockParser.RANGE - 18)))) != 0):
                self.state = 200
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 189
                    self.block()
                    pass

                elif la_ == 2:
                    self.state = 190
                    self.blocktype()
                    pass

                elif la_ == 3:
                    self.state = 191
                    self.class_credit_body()
                    pass

                elif la_ == 4:
                    self.state = 192
                    self.copy_rules()
                    pass

                elif la_ == 5:
                    self.state = 193
                    self.group()
                    pass

                elif la_ == 6:
                    self.state = 194
                    self.if_then()
                    pass

                elif la_ == 7:
                    self.state = 195
                    self.label()
                    pass

                elif la_ == 8:
                    self.state = 196
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 197
                    self.remark()
                    pass

                elif la_ == 10:
                    self.state = 198
                    self.rule_complete()
                    pass

                elif la_ == 11:
                    self.state = 199
                    self.subset()
                    pass


                self.state = 204
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def L_SQB(self):
            return self.getToken(ReqBlockParser.L_SQB, 0)

        def R_SQB(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.R_SQB)
            else:
                return self.getToken(ReqBlockParser.R_SQB, i)

        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def except_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Except_listContext,0)


        def including_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Including_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list" ):
                listener.enterCourse_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list" ):
                listener.exitCourse_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list" ):
                return visitor.visitCourse_list(self)
            else:
                return visitor.visitChildren(self)




    def course_list(self):

        localctx = ReqBlockParser.Course_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_course_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 205
                self.match(ReqBlockParser.L_SQB)


            self.state = 208
            self.course_item()
            self.state = 210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 209
                self.match(ReqBlockParser.R_SQB)


            self.state = 214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 212
                self.and_list()

            elif la_ == 2:
                self.state = 213
                self.or_list()


            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.R_SQB:
                self.state = 216
                self.match(ReqBlockParser.R_SQB)


            self.state = 221
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.EXCEPT]:
                self.state = 219
                self.except_list()
                pass
            elif token in [ReqBlockParser.INCLUDING]:
                self.state = 220
                self.including_list()
                pass
            elif token in [ReqBlockParser.EOF, ReqBlockParser.STRING, ReqBlockParser.DISPLAY, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.ENDOT, ReqBlockParser.ENDSUB, ReqBlockParser.LABEL, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXSPREAD, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINAREA, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINSPREAD, ReqBlockParser.OPTIONAL, ReqBlockParser.PSEUDO, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.RULE_TAG, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.TAG, ReqBlockParser.SAME_DISC, ReqBlockParser.UNDER, ReqBlockParser.ELSE, ReqBlockParser.ENDELSE, ReqBlockParser.ENDIF, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.AND, ReqBlockParser.OR, ReqBlockParser.NUMBER, ReqBlockParser.RANGE, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.LP, ReqBlockParser.L_SQB, ReqBlockParser.QUOTE, ReqBlockParser.QUESTION_MARK, ReqBlockParser.RP, ReqBlockParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def course_list_qualifier_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_qualifier_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_qualifier_headContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_head" ):
                listener.enterCourse_list_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_head" ):
                listener.exitCourse_list_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_head" ):
                return visitor.visitCourse_list_head(self)
            else:
                return visitor.visitChildren(self)




    def course_list_head(self):

        localctx = ReqBlockParser.Course_list_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_course_list_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self.course_list()
            self.state = 230
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 224
                    self.course_list_qualifier_head()
                    self.state = 226
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 225
                        self.tag()

             
                self.state = 232
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

            self.state = 234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 233
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_qualifier_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def ruletag(self):
            return self.getTypedRuleContext(ReqBlockParser.RuletagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_qualifier_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_qualifier_head" ):
                listener.enterCourse_list_qualifier_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_qualifier_head" ):
                listener.exitCourse_list_qualifier_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_qualifier_head" ):
                return visitor.visitCourse_list_qualifier_head(self)
            else:
                return visitor.visitChildren(self)




    def course_list_qualifier_head(self):

        localctx = ReqBlockParser.Course_list_qualifier_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_course_list_qualifier_head)
        try:
            self.state = 243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 236
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 237
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 238
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 239
                self.minspread()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 5)
                self.state = 240
                self.ruletag()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 241
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 242
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def course_list_qualifier_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_qualifier_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_qualifier_bodyContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_body" ):
                listener.enterCourse_list_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_body" ):
                listener.exitCourse_list_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_body" ):
                return visitor.visitCourse_list_body(self)
            else:
                return visitor.visitChildren(self)




    def course_list_body(self):

        localctx = ReqBlockParser.Course_list_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_course_list_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.course_list()
            self.state = 252
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 246
                    self.course_list_qualifier_body()
                    self.state = 248
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                    if la_ == 1:
                        self.state = 247
                        self.tag()

             
                self.state = 254
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 255
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_qualifier_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minarea(self):
            return self.getTypedRuleContext(ReqBlockParser.MinareaContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def ruletag(self):
            return self.getTypedRuleContext(ReqBlockParser.RuletagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_qualifier_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_qualifier_body" ):
                listener.enterCourse_list_qualifier_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_qualifier_body" ):
                listener.exitCourse_list_qualifier_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_qualifier_body" ):
                return visitor.visitCourse_list_qualifier_body(self)
            else:
                return visitor.visitChildren(self)




    def course_list_qualifier_body(self):

        localctx = ReqBlockParser.Course_list_qualifier_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_course_list_qualifier_body)
        try:
            self.state = 272
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 258
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 259
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 260
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 261
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINAREA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 262
                self.minarea()
                pass
            elif token in [ReqBlockParser.MINCLASS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 263
                self.minclass()
                pass
            elif token in [ReqBlockParser.MINCREDIT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 264
                self.mincredit()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 8)
                self.state = 265
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 266
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 267
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 11)
                self.state = 268
                self.minspread()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 12)
                self.state = 269
                self.ruletag()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 13)
                self.state = 270
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 271
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_courseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_full_course

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_course" ):
                listener.enterFull_course(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_course" ):
                listener.exitFull_course(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_course" ):
                return visitor.visitFull_course(self)
            else:
                return visitor.visitChildren(self)




    def full_course(self):

        localctx = ReqBlockParser.Full_courseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_full_course)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.discipline()
            self.state = 275
            self.catalog_number()
            self.state = 279
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 276
                    self.with_clause() 
                self.state = 281
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def L_SQB(self):
            return self.getToken(ReqBlockParser.L_SQB, 0)

        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def R_SQB(self):
            return self.getToken(ReqBlockParser.R_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_item" ):
                listener.enterCourse_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_item" ):
                listener.exitCourse_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_item" ):
                return visitor.visitCourse_item(self)
            else:
                return visitor.visitChildren(self)




    def course_item(self):

        localctx = ReqBlockParser.Course_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_course_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.L_SQB:
                self.state = 282
                self.match(ReqBlockParser.L_SQB)


            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 285
                self.discipline()


            self.state = 288
            self.catalog_number()
            self.state = 292
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 289
                    self.with_clause() 
                self.state = 294
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 295
                self.match(ReqBlockParser.R_SQB)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_andContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_andContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def R_SQB(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.R_SQB)
            else:
                return self.getToken(ReqBlockParser.R_SQB, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_and_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_list" ):
                listener.enterAnd_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_list" ):
                listener.exitAnd_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_list" ):
                return visitor.visitAnd_list(self)
            else:
                return visitor.visitChildren(self)




    def and_list(self):

        localctx = ReqBlockParser.And_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_and_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 298
                    self.list_and()
                    self.state = 300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ReqBlockParser.R_SQB:
                        self.state = 299
                        self.match(ReqBlockParser.R_SQB)


                    self.state = 302
                    self.course_item()

                else:
                    raise NoViableAltException(self)
                self.state = 306 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def R_SQB(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.R_SQB)
            else:
                return self.getToken(ReqBlockParser.R_SQB, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_or_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_list" ):
                listener.enterOr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_list" ):
                listener.exitOr_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_list" ):
                return visitor.visitOr_list(self)
            else:
                return visitor.visitChildren(self)




    def or_list(self):

        localctx = ReqBlockParser.Or_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_or_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 308
                    self.list_or()
                    self.state = 310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ReqBlockParser.R_SQB:
                        self.state = 309
                        self.match(ReqBlockParser.R_SQB)


                    self.state = 312
                    self.course_item()

                else:
                    raise NoViableAltException(self)
                self.state = 316 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catalog_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def RANGE(self):
            return self.getToken(ReqBlockParser.RANGE, 0)

        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_catalog_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalog_number" ):
                listener.enterCatalog_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalog_number" ):
                listener.exitCatalog_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatalog_number" ):
                return visitor.visitCatalog_number(self)
            else:
                return visitor.visitChildren(self)




    def catalog_number(self):

        localctx = ReqBlockParser.Catalog_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_catalog_number)
        try:
            self.state = 323
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL, ReqBlockParser.QUOTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 318
                self.symbol()
                pass
            elif token in [ReqBlockParser.NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 319
                self.match(ReqBlockParser.NUMBER)
                pass
            elif token in [ReqBlockParser.CATALOG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 320
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass
            elif token in [ReqBlockParser.RANGE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 321
                self.match(ReqBlockParser.RANGE)
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 322
                self.match(ReqBlockParser.WILD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisciplineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_discipline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscipline" ):
                listener.enterDiscipline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscipline" ):
                listener.exitDiscipline(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscipline" ):
                return visitor.visitDiscipline(self)
            else:
                return visitor.visitChildren(self)




    def discipline(self):

        localctx = ReqBlockParser.DisciplineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_discipline)
        try:
            self.state = 330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL, ReqBlockParser.QUOTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 325
                self.symbol()
                pass
            elif token in [ReqBlockParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 326
                self.string()
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 327
                self.match(ReqBlockParser.WILD)
                pass
            elif token in [ReqBlockParser.BLOCK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 328
                self.match(ReqBlockParser.BLOCK)
                pass
            elif token in [ReqBlockParser.IS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 329
                self.match(ReqBlockParser.IS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_thenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def stmt(self):
            return self.getTypedRuleContext(ReqBlockParser.StmtContext,0)


        def stmt_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Stmt_groupContext,0)


        def group_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_qualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def else_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Else_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_if_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_then" ):
                listener.enterIf_then(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_then" ):
                listener.exitIf_then(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_then" ):
                return visitor.visitIf_then(self)
            else:
                return visitor.visitChildren(self)




    def if_then(self):

        localctx = ReqBlockParser.If_thenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_if_then)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.match(ReqBlockParser.IF)
            self.state = 333
            self.expression(0)
            self.state = 334
            self.match(ReqBlockParser.THEN)
            self.state = 337
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.BEGINSUB, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINRES, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER, ReqBlockParser.RANGE]:
                self.state = 335
                self.stmt()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 336
                self.stmt_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 342
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 339
                    self.group_qualifier() 
                self.state = 344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

            self.state = 346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 345
                self.label()


            self.state = 349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 348
                self.else_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def stmt(self):
            return self.getTypedRuleContext(ReqBlockParser.StmtContext,0)


        def stmt_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Stmt_groupContext,0)


        def group_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_qualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_clause" ):
                return visitor.visitElse_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_clause(self):

        localctx = ReqBlockParser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_else_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(ReqBlockParser.ELSE)
            self.state = 354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.BEGINSUB, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINRES, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER, ReqBlockParser.RANGE]:
                self.state = 352
                self.stmt()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 353
                self.stmt_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 359
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 356
                    self.group_qualifier() 
                self.state = 361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

            self.state = 363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 362
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stmt_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StmtContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StmtContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_stmt_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt_group" ):
                listener.enterStmt_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt_group" ):
                listener.exitStmt_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt_group" ):
                return visitor.visitStmt_group(self)
            else:
                return visitor.visitChildren(self)




    def stmt_group(self):

        localctx = ReqBlockParser.Stmt_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_stmt_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.begin_if()
            self.state = 367 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 366
                self.stmt()
                self.state = 369 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ReqBlockParser.BEGINSUB - 18)) | (1 << (ReqBlockParser.COPY_RULES - 18)) | (1 << (ReqBlockParser.DONT_SHARE - 18)) | (1 << (ReqBlockParser.LASTRES - 18)) | (1 << (ReqBlockParser.MAXCREDIT - 18)) | (1 << (ReqBlockParser.MAXTRANSFER - 18)) | (1 << (ReqBlockParser.MINGRADE - 18)) | (1 << (ReqBlockParser.MINCLASS - 18)) | (1 << (ReqBlockParser.MINCREDIT - 18)) | (1 << (ReqBlockParser.MINRES - 18)) | (1 << (ReqBlockParser.REMARK - 18)) | (1 << (ReqBlockParser.RULE_COMPLETE - 18)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 18)) | (1 << (ReqBlockParser.SHARE - 18)) | (1 << (ReqBlockParser.IF - 18)) | (1 << (ReqBlockParser.NUMBER - 18)) | (1 << (ReqBlockParser.RANGE - 18)))) != 0)):
                    break

            self.state = 371
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_then(self):
            return self.getTypedRuleContext(ReqBlockParser.If_thenContext,0)


        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def class_credit_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,0)


        def copy_rules(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,0)


        def group(self):
            return self.getTypedRuleContext(ReqBlockParser.GroupContext,0)


        def lastres(self):
            return self.getTypedRuleContext(ReqBlockParser.LastresContext,0)


        def maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minres(self):
            return self.getTypedRuleContext(ReqBlockParser.MinresContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def subset(self):
            return self.getTypedRuleContext(ReqBlockParser.SubsetContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = ReqBlockParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_stmt)
        try:
            self.state = 391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 373
                self.if_then()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 374
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 375
                self.blocktype()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 376
                self.class_credit_body()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 377
                self.copy_rules()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 378
                self.group()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 379
                self.lastres()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 380
                self.maxcredit()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 381
                self.maxtransfer()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 382
                self.minclass()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 383
                self.mincredit()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 384
                self.mingrade()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 385
                self.minres()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 386
                self.noncourse()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 387
                self.remark()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 388
                self.rule_complete()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 389
                self.share()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 390
                self.subset()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINIF(self):
            return self.getToken(ReqBlockParser.BEGINIF, 0)

        def BEGINELSE(self):
            return self.getToken(ReqBlockParser.BEGINELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_begin_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_if" ):
                listener.enterBegin_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_if" ):
                listener.exitBegin_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBegin_if" ):
                return visitor.visitBegin_if(self)
            else:
                return visitor.visitChildren(self)




    def begin_if(self):

        localctx = ReqBlockParser.Begin_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_begin_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.BEGINELSE or _la==ReqBlockParser.BEGINIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENDIF(self):
            return self.getToken(ReqBlockParser.ENDIF, 0)

        def ENDELSE(self):
            return self.getToken(ReqBlockParser.ENDELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_end_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_if" ):
                listener.enterEnd_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_if" ):
                listener.exitEnd_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnd_if" ):
                return visitor.visitEnd_if(self)
            else:
                return visitor.visitChildren(self)




    def end_if(self):

        localctx = ReqBlockParser.End_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_end_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.ENDELSE or _la==ReqBlockParser.ENDIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def GROUP(self):
            return self.getToken(ReqBlockParser.GROUP, 0)

        def group_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_listContext,0)


        def group_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_qualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = ReqBlockParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(ReqBlockParser.NUMBER)
            self.state = 398
            self.match(ReqBlockParser.GROUP)
            self.state = 399
            self.group_list()
            self.state = 403
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 400
                    self.group_qualifier() 
                self.state = 405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 406
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_itemContext,i)


        def logical_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Logical_opContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_list" ):
                listener.enterGroup_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_list" ):
                listener.exitGroup_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_list" ):
                return visitor.visitGroup_list(self)
            else:
                return visitor.visitChildren(self)




    def group_list(self):

        localctx = ReqBlockParser.Group_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_group_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.group_item()
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 410
                self.logical_op()
                self.state = 411
                self.group_item()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def class_credit_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,0)


        def group(self):
            return self.getTypedRuleContext(ReqBlockParser.GroupContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def group_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_qualifierContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_item" ):
                listener.enterGroup_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_item" ):
                listener.exitGroup_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_item" ):
                return visitor.visitGroup_item(self)
            else:
                return visitor.visitChildren(self)




    def group_item(self):

        localctx = ReqBlockParser.Group_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_group_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(ReqBlockParser.LP)
            self.state = 426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 419
                self.block()
                pass

            elif la_ == 2:
                self.state = 420
                self.blocktype()
                pass

            elif la_ == 3:
                self.state = 421
                self.course_list()
                pass

            elif la_ == 4:
                self.state = 422
                self.class_credit_body()
                pass

            elif la_ == 5:
                self.state = 423
                self.group()
                pass

            elif la_ == 6:
                self.state = 424
                self.noncourse()
                pass

            elif la_ == 7:
                self.state = 425
                self.rule_complete()
                pass


            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.DONT_SHARE) | (1 << ReqBlockParser.MAXPASSFAIL) | (1 << ReqBlockParser.MAXPERDISC) | (1 << ReqBlockParser.MAXTRANSFER) | (1 << ReqBlockParser.MINGPA) | (1 << ReqBlockParser.MINGRADE) | (1 << ReqBlockParser.MINCLASS) | (1 << ReqBlockParser.MINCREDIT) | (1 << ReqBlockParser.MINPERDISC) | (1 << ReqBlockParser.RULE_TAG) | (1 << ReqBlockParser.SHARE) | (1 << ReqBlockParser.SAME_DISC))) != 0):
                self.state = 428
                self.group_qualifier()
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 434
                self.label()


            self.state = 437
            self.match(ReqBlockParser.RP)
            self.state = 441
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 438
                    self.group_qualifier() 
                self.state = 443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 444
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def ruletag(self):
            return self.getTypedRuleContext(ReqBlockParser.RuletagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_qualifier" ):
                listener.enterGroup_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_qualifier" ):
                listener.exitGroup_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_qualifier" ):
                return visitor.visitGroup_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def group_qualifier(self):

        localctx = ReqBlockParser.Group_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_group_qualifier)
        try:
            self.state = 458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 447
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 448
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 449
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 450
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 451
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 452
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 7)
                self.state = 453
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 454
                self.share()
                pass
            elif token in [ReqBlockParser.MINCLASS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 455
                self.minclass()
                pass
            elif token in [ReqBlockParser.MINCREDIT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 456
                self.mincredit()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 11)
                self.state = 457
                self.ruletag()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINSUB(self):
            return self.getToken(ReqBlockParser.BEGINSUB, 0)

        def ENDSUB(self):
            return self.getToken(ReqBlockParser.ENDSUB, 0)

        def subset_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Subset_qualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Subset_qualifierContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def if_then(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.If_thenContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.If_thenContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def class_credit_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def course_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_listContext,i)


        def group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.GroupContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.GroupContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_subset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubset" ):
                listener.enterSubset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubset" ):
                listener.exitSubset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubset" ):
                return visitor.visitSubset(self)
            else:
                return visitor.visitChildren(self)




    def subset(self):

        localctx = ReqBlockParser.SubsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_subset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(ReqBlockParser.BEGINSUB)
            self.state = 475 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 461
                    self.if_then()
                    pass

                elif la_ == 2:
                    self.state = 462
                    self.block()
                    pass

                elif la_ == 3:
                    self.state = 463
                    self.blocktype()
                    pass

                elif la_ == 4:
                    self.state = 464
                    self.class_credit_body()
                    pass

                elif la_ == 5:
                    self.state = 465
                    self.copy_rules()
                    pass

                elif la_ == 6:
                    self.state = 466
                    self.course_list()
                    pass

                elif la_ == 7:
                    self.state = 467
                    self.group()
                    pass

                elif la_ == 8:
                    self.state = 468
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 469
                    self.rule_complete()
                    pass


                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.LABEL:
                    self.state = 472
                    self.label()


                self.state = 477 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.STRING) | (1 << ReqBlockParser.BLOCK) | (1 << ReqBlockParser.COPY_RULES) | (1 << ReqBlockParser.RULE_COMPLETE) | (1 << ReqBlockParser.RULE_INCOMPLETE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (ReqBlockParser.IF - 67)) | (1 << (ReqBlockParser.IS - 67)) | (1 << (ReqBlockParser.NUMBER - 67)) | (1 << (ReqBlockParser.RANGE - 67)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 67)) | (1 << (ReqBlockParser.WILD - 67)) | (1 << (ReqBlockParser.SYMBOL - 67)) | (1 << (ReqBlockParser.L_SQB - 67)) | (1 << (ReqBlockParser.QUOTE - 67)))) != 0)):
                    break

            self.state = 479
            self.match(ReqBlockParser.ENDSUB)
            self.state = 483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 480
                    self.subset_qualifier() 
                self.state = 485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 486
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subset_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def ruletag(self):
            return self.getTypedRuleContext(ReqBlockParser.RuletagContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_subset_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubset_qualifier" ):
                listener.enterSubset_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubset_qualifier" ):
                listener.exitSubset_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubset_qualifier" ):
                return visitor.visitSubset_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def subset_qualifier(self):

        localctx = ReqBlockParser.Subset_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_subset_qualifier)
        try:
            self.state = 499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 489
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 490
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 3)
                self.state = 491
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 492
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 493
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 494
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 7)
                self.state = 495
                self.minspread()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 8)
                self.state = 496
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 9)
                self.state = 497
                self.ruletag()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 498
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def ruletag(self):
            return self.getTypedRuleContext(ReqBlockParser.RuletagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ReqBlockParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(ReqBlockParser.NUMBER)
            self.state = 502
            self.match(ReqBlockParser.BLOCK)
            self.state = 503
            self.expression(0)
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.RULE_TAG:
                self.state = 504
                self.ruletag()


            self.state = 507
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlocktypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCKTYPE(self):
            return self.getToken(ReqBlockParser.BLOCKTYPE, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_blocktype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlocktype" ):
                listener.enterBlocktype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlocktype" ):
                listener.exitBlocktype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlocktype" ):
                return visitor.visitBlocktype(self)
            else:
                return visitor.visitChildren(self)




    def blocktype(self):

        localctx = ReqBlockParser.BlocktypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_blocktype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(ReqBlockParser.NUMBER)
            self.state = 510
            self.match(ReqBlockParser.BLOCKTYPE)
            self.state = 511
            self.expression(0)
            self.state = 512
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allow_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def ALLOW(self):
            return self.getToken(ReqBlockParser.ALLOW, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def RANGE(self):
            return self.getToken(ReqBlockParser.RANGE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow_clause" ):
                listener.enterAllow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow_clause" ):
                listener.exitAllow_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow_clause" ):
                return visitor.visitAllow_clause(self)
            else:
                return visitor.visitChildren(self)




    def allow_clause(self):

        localctx = ReqBlockParser.Allow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_allow_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(ReqBlockParser.LP)
            self.state = 515
            self.match(ReqBlockParser.ALLOW)
            self.state = 516
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.NUMBER or _la==ReqBlockParser.RANGE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 517
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_credit_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.NUMBER)
            else:
                return self.getToken(ReqBlockParser.NUMBER, i)

        def RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.RANGE)
            else:
                return self.getToken(ReqBlockParser.RANGE, i)

        def CLASS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.CLASS)
            else:
                return self.getToken(ReqBlockParser.CLASS, i)

        def CREDIT(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.CREDIT)
            else:
                return self.getToken(ReqBlockParser.CREDIT, i)

        def logical_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Logical_opContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,i)


        def allow_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Allow_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,i)


        def course_list_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_headContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,i)


        def PSEUDO(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.PSEUDO)
            else:
                return self.getToken(ReqBlockParser.PSEUDO, i)

        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def ruletag(self):
            return self.getTypedRuleContext(ReqBlockParser.RuletagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_credit_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_credit_head" ):
                listener.enterClass_credit_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_credit_head" ):
                listener.exitClass_credit_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_credit_head" ):
                return visitor.visitClass_credit_head(self)
            else:
                return visitor.visitChildren(self)




    def class_credit_head(self):

        localctx = ReqBlockParser.Class_credit_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_class_credit_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.NUMBER or _la==ReqBlockParser.RANGE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 520
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 521
                self.logical_op()
                self.state = 522
                _la = self._input.LA(1)
                if not(_la==ReqBlockParser.NUMBER or _la==ReqBlockParser.RANGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 523
                _la = self._input.LA(1)
                if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 527
                self.allow_clause()


            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 530
                self.logical_op()
                self.state = 531
                self.match(ReqBlockParser.NUMBER)
                self.state = 532
                _la = self._input.LA(1)
                if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.RULE_TAG:
                    self.state = 533
                    self.ruletag()


                self.state = 537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 536
                    self.allow_clause()




            self.state = 548
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 546
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                    if la_ == 1:
                        self.state = 541
                        self.course_list_head()
                        pass

                    elif la_ == 2:
                        self.state = 542
                        self.expression(0)
                        pass

                    elif la_ == 3:
                        self.state = 543
                        self.match(ReqBlockParser.PSEUDO)
                        pass

                    elif la_ == 4:
                        self.state = 544
                        self.share()
                        pass

                    elif la_ == 5:
                        self.state = 545
                        self.tag()
                        pass

             
                self.state = 550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 551
                self.display()
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 557
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_credit_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.NUMBER)
            else:
                return self.getToken(ReqBlockParser.NUMBER, i)

        def RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.RANGE)
            else:
                return self.getToken(ReqBlockParser.RANGE, i)

        def CLASS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.CLASS)
            else:
                return self.getToken(ReqBlockParser.CLASS, i)

        def CREDIT(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.CREDIT)
            else:
                return self.getToken(ReqBlockParser.CREDIT, i)

        def logical_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Logical_opContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,i)


        def allow_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Allow_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,i)


        def course_list_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_bodyContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,i)


        def PSEUDO(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.PSEUDO)
            else:
                return self.getToken(ReqBlockParser.PSEUDO, i)

        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def ruletag(self):
            return self.getTypedRuleContext(ReqBlockParser.RuletagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_credit_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_credit_body" ):
                listener.enterClass_credit_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_credit_body" ):
                listener.exitClass_credit_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_credit_body" ):
                return visitor.visitClass_credit_body(self)
            else:
                return visitor.visitChildren(self)




    def class_credit_body(self):

        localctx = ReqBlockParser.Class_credit_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_class_credit_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.NUMBER or _la==ReqBlockParser.RANGE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 561
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 562
                self.logical_op()
                self.state = 563
                _la = self._input.LA(1)
                if not(_la==ReqBlockParser.NUMBER or _la==ReqBlockParser.RANGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 564
                _la = self._input.LA(1)
                if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 568
                self.allow_clause()


            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 571
                self.logical_op()
                self.state = 572
                self.match(ReqBlockParser.NUMBER)
                self.state = 573
                _la = self._input.LA(1)
                if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 575
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 574
                    self.ruletag()


                self.state = 578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 577
                    self.allow_clause()




            self.state = 589
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 587
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                    if la_ == 1:
                        self.state = 582
                        self.course_list_body()
                        pass

                    elif la_ == 2:
                        self.state = 583
                        self.expression(0)
                        pass

                    elif la_ == 3:
                        self.state = 584
                        self.match(ReqBlockParser.PSEUDO)
                        pass

                    elif la_ == 4:
                        self.state = 585
                        self.share()
                        pass

                    elif la_ == 5:
                        self.state = 586
                        self.tag()
                        pass

             
                self.state = 591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 592
                self.display()
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 598
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_rulesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY_RULES(self):
            return self.getToken(ReqBlockParser.COPY_RULES, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_copy_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_rules" ):
                listener.enterCopy_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_rules" ):
                listener.exitCopy_rules(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopy_rules" ):
                return visitor.visitCopy_rules(self)
            else:
                return visitor.visitChildren(self)




    def copy_rules(self):

        localctx = ReqBlockParser.Copy_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_copy_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(ReqBlockParser.COPY_RULES)
            self.state = 602
            self.expression(0)
            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 603
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(ReqBlockParser.DISPLAY, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_display

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplay" ):
                listener.enterDisplay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplay" ):
                listener.exitDisplay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplay" ):
                return visitor.visitDisplay(self)
            else:
                return visitor.visitChildren(self)




    def display(self):

        localctx = ReqBlockParser.DisplayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_display)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(ReqBlockParser.DISPLAY)
            self.state = 607
            self.string()
            self.state = 609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 608
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(ReqBlockParser.EXCEPT, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_except_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_list" ):
                listener.enterExcept_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_list" ):
                listener.exitExcept_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_list" ):
                return visitor.visitExcept_list(self)
            else:
                return visitor.visitChildren(self)




    def except_list(self):

        localctx = ReqBlockParser.Except_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_except_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.match(ReqBlockParser.EXCEPT)
            self.state = 612
            self.course_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Including_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDING(self):
            return self.getToken(ReqBlockParser.INCLUDING, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_including_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncluding_list" ):
                listener.enterIncluding_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncluding_list" ):
                listener.exitIncluding_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncluding_list" ):
                return visitor.visitIncluding_list(self)
            else:
                return visitor.visitChildren(self)




    def including_list(self):

        localctx = ReqBlockParser.Including_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_including_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(ReqBlockParser.INCLUDING)
            self.state = 615
            self.course_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(ReqBlockParser.LABEL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = ReqBlockParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(ReqBlockParser.LABEL)
            self.state = 618
            self.string()
            self.state = 620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 619
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastresContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LASTRES(self):
            return self.getToken(ReqBlockParser.LASTRES, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.NUMBER)
            else:
                return self.getToken(ReqBlockParser.NUMBER, i)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def OF(self):
            return self.getToken(ReqBlockParser.OF, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_lastres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastres" ):
                listener.enterLastres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastres" ):
                listener.exitLastres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastres" ):
                return visitor.visitLastres(self)
            else:
                return visitor.visitChildren(self)




    def lastres(self):

        localctx = ReqBlockParser.LastresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_lastres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(ReqBlockParser.LASTRES)
            self.state = 623
            self.match(ReqBlockParser.NUMBER)
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.OF:
                self.state = 624
                self.match(ReqBlockParser.OF)
                self.state = 625
                self.match(ReqBlockParser.NUMBER)


            self.state = 628
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 629
                self.course_list()


            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 632
                self.tag()


            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 635
                self.display()
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 641
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxclassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCLASS(self):
            return self.getToken(ReqBlockParser.MAXCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxclass" ):
                listener.enterMaxclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxclass" ):
                listener.exitMaxclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxclass" ):
                return visitor.visitMaxclass(self)
            else:
                return visitor.visitChildren(self)




    def maxclass(self):

        localctx = ReqBlockParser.MaxclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_maxclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(ReqBlockParser.MAXCLASS)
            self.state = 645
            self.match(ReqBlockParser.NUMBER)
            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 646
                self.course_list()


            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 649
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxcreditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCREDIT(self):
            return self.getToken(ReqBlockParser.MAXCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxcredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxcredit" ):
                listener.enterMaxcredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxcredit" ):
                listener.exitMaxcredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxcredit" ):
                return visitor.visitMaxcredit(self)
            else:
                return visitor.visitChildren(self)




    def maxcredit(self):

        localctx = ReqBlockParser.MaxcreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_maxcredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(ReqBlockParser.MAXCREDIT)
            self.state = 653
            self.match(ReqBlockParser.NUMBER)
            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 654
                self.course_list()


            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 657
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxpassfailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPASSFAIL(self):
            return self.getToken(ReqBlockParser.MAXPASSFAIL, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxpassfail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxpassfail" ):
                listener.enterMaxpassfail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxpassfail" ):
                listener.exitMaxpassfail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxpassfail" ):
                return visitor.visitMaxpassfail(self)
            else:
                return visitor.visitChildren(self)




    def maxpassfail(self):

        localctx = ReqBlockParser.MaxpassfailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_maxpassfail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(ReqBlockParser.MAXPASSFAIL)
            self.state = 661
            self.match(ReqBlockParser.NUMBER)
            self.state = 662
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 663
                self.course_list()


            self.state = 667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 666
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxperdiscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPERDISC(self):
            return self.getToken(ReqBlockParser.MAXPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxperdisc" ):
                listener.enterMaxperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxperdisc" ):
                listener.exitMaxperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxperdisc" ):
                return visitor.visitMaxperdisc(self)
            else:
                return visitor.visitChildren(self)




    def maxperdisc(self):

        localctx = ReqBlockParser.MaxperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_maxperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(ReqBlockParser.MAXPERDISC)
            self.state = 670
            self.match(ReqBlockParser.NUMBER)
            self.state = 671
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 672
            self.match(ReqBlockParser.LP)
            self.state = 673
            self.match(ReqBlockParser.SYMBOL)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 674
                self.list_or()
                self.state = 675
                self.match(ReqBlockParser.SYMBOL)
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 682
            self.match(ReqBlockParser.RP)
            self.state = 684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 683
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxspreadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXSPREAD(self):
            return self.getToken(ReqBlockParser.MAXSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxspread" ):
                listener.enterMaxspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxspread" ):
                listener.exitMaxspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxspread" ):
                return visitor.visitMaxspread(self)
            else:
                return visitor.visitChildren(self)




    def maxspread(self):

        localctx = ReqBlockParser.MaxspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_maxspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(ReqBlockParser.MAXSPREAD)
            self.state = 687
            self.match(ReqBlockParser.NUMBER)
            self.state = 689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 688
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTERM(self):
            return self.getToken(ReqBlockParser.MAXTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxterm" ):
                listener.enterMaxterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxterm" ):
                listener.exitMaxterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxterm" ):
                return visitor.visitMaxterm(self)
            else:
                return visitor.visitChildren(self)




    def maxterm(self):

        localctx = ReqBlockParser.MaxtermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_maxterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(ReqBlockParser.MAXTERM)
            self.state = 692
            self.match(ReqBlockParser.NUMBER)
            self.state = 693
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 694
            self.course_list()
            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 695
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtransferContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTRANSFER(self):
            return self.getToken(ReqBlockParser.MAXTRANSFER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxtransfer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxtransfer" ):
                listener.enterMaxtransfer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxtransfer" ):
                listener.exitMaxtransfer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxtransfer" ):
                return visitor.visitMaxtransfer(self)
            else:
                return visitor.visitChildren(self)




    def maxtransfer(self):

        localctx = ReqBlockParser.MaxtransferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_maxtransfer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(ReqBlockParser.MAXTRANSFER)
            self.state = 699
            self.match(ReqBlockParser.NUMBER)
            self.state = 700
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 701
                self.match(ReqBlockParser.LP)
                self.state = 702
                self.match(ReqBlockParser.SYMBOL)
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                    self.state = 703
                    self.list_or()
                    self.state = 704
                    self.match(ReqBlockParser.SYMBOL)
                    self.state = 710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 711
                self.match(ReqBlockParser.RP)


            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 714
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinareaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINAREA(self):
            return self.getToken(ReqBlockParser.MINAREA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minarea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinarea" ):
                listener.enterMinarea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinarea" ):
                listener.exitMinarea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinarea" ):
                return visitor.visitMinarea(self)
            else:
                return visitor.visitChildren(self)




    def minarea(self):

        localctx = ReqBlockParser.MinareaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_minarea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(ReqBlockParser.MINAREA)
            self.state = 718
            self.match(ReqBlockParser.NUMBER)
            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 719
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinclassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCLASS(self):
            return self.getToken(ReqBlockParser.MINCLASS, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def RANGE(self):
            return self.getToken(ReqBlockParser.RANGE, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinclass" ):
                listener.enterMinclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinclass" ):
                listener.exitMinclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinclass" ):
                return visitor.visitMinclass(self)
            else:
                return visitor.visitChildren(self)




    def minclass(self):

        localctx = ReqBlockParser.MinclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_minclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(ReqBlockParser.MINCLASS)
            self.state = 723
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.NUMBER or _la==ReqBlockParser.RANGE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 724
            self.course_list()
            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 725
                self.tag()


            self.state = 731
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 728
                    self.display() 
                self.state = 733
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 734
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MincreditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCREDIT(self):
            return self.getToken(ReqBlockParser.MINCREDIT, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def RANGE(self):
            return self.getToken(ReqBlockParser.RANGE, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mincredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMincredit" ):
                listener.enterMincredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMincredit" ):
                listener.exitMincredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMincredit" ):
                return visitor.visitMincredit(self)
            else:
                return visitor.visitChildren(self)




    def mincredit(self):

        localctx = ReqBlockParser.MincreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_mincredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.match(ReqBlockParser.MINCREDIT)
            self.state = 738
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.NUMBER or _la==ReqBlockParser.RANGE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 739
            self.course_list()
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 740
                self.tag()


            self.state = 746
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 743
                    self.display() 
                self.state = 748
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

            self.state = 750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 749
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingpaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGPA(self):
            return self.getToken(ReqBlockParser.MINGPA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingpa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingpa" ):
                listener.enterMingpa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingpa" ):
                listener.exitMingpa(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingpa" ):
                return visitor.visitMingpa(self)
            else:
                return visitor.visitChildren(self)




    def mingpa(self):

        localctx = ReqBlockParser.MingpaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_mingpa)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(ReqBlockParser.MINGPA)
            self.state = 753
            self.match(ReqBlockParser.NUMBER)
            self.state = 756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 754
                self.course_list()

            elif la_ == 2:
                self.state = 755
                self.expression(0)


            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 758
                self.tag()


            self.state = 764
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 761
                    self.display() 
                self.state = 766
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

            self.state = 768
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 767
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingradeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGRADE(self):
            return self.getToken(ReqBlockParser.MINGRADE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingrade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingrade" ):
                listener.enterMingrade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingrade" ):
                listener.exitMingrade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingrade" ):
                return visitor.visitMingrade(self)
            else:
                return visitor.visitChildren(self)




    def mingrade(self):

        localctx = ReqBlockParser.MingradeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_mingrade)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.match(ReqBlockParser.MINGRADE)
            self.state = 771
            self.match(ReqBlockParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinperdiscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINPERDISC(self):
            return self.getToken(ReqBlockParser.MINPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinperdisc" ):
                listener.enterMinperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinperdisc" ):
                listener.exitMinperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinperdisc" ):
                return visitor.visitMinperdisc(self)
            else:
                return visitor.visitChildren(self)




    def minperdisc(self):

        localctx = ReqBlockParser.MinperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_minperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(ReqBlockParser.MINPERDISC)
            self.state = 774
            self.match(ReqBlockParser.NUMBER)
            self.state = 775
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 776
            self.match(ReqBlockParser.LP)
            self.state = 777
            self.match(ReqBlockParser.SYMBOL)
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 778
                self.list_or()
                self.state = 779
                self.match(ReqBlockParser.SYMBOL)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 786
            self.match(ReqBlockParser.RP)
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 787
                self.tag()


            self.state = 793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 790
                    self.display() 
                self.state = 795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinresContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINRES(self):
            return self.getToken(ReqBlockParser.MINRES, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinres" ):
                listener.enterMinres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinres" ):
                listener.exitMinres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinres" ):
                return visitor.visitMinres(self)
            else:
                return visitor.visitChildren(self)




    def minres(self):

        localctx = ReqBlockParser.MinresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_minres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(ReqBlockParser.MINRES)
            self.state = 797
            self.match(ReqBlockParser.NUMBER)
            self.state = 798
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 799
                self.display()
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 805
                self.label()


            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 808
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinspreadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINSPREAD(self):
            return self.getToken(ReqBlockParser.MINSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinspread" ):
                listener.enterMinspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinspread" ):
                listener.exitMinspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinspread" ):
                return visitor.visitMinspread(self)
            else:
                return visitor.visitChildren(self)




    def minspread(self):

        localctx = ReqBlockParser.MinspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_minspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.match(ReqBlockParser.MINSPREAD)
            self.state = 812
            self.match(ReqBlockParser.NUMBER)
            self.state = 814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 813
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MintermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINTERM(self):
            return self.getToken(ReqBlockParser.MINTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinterm" ):
                listener.enterMinterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinterm" ):
                listener.exitMinterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinterm" ):
                return visitor.visitMinterm(self)
            else:
                return visitor.visitChildren(self)




    def minterm(self):

        localctx = ReqBlockParser.MintermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_minterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(ReqBlockParser.MINTERM)
            self.state = 817
            self.match(ReqBlockParser.NUMBER)
            self.state = 818
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.STRING or _la==ReqBlockParser.BLOCK or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (ReqBlockParser.IS - 68)) | (1 << (ReqBlockParser.NUMBER - 68)) | (1 << (ReqBlockParser.RANGE - 68)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 68)) | (1 << (ReqBlockParser.WILD - 68)) | (1 << (ReqBlockParser.SYMBOL - 68)) | (1 << (ReqBlockParser.L_SQB - 68)) | (1 << (ReqBlockParser.QUOTE - 68)))) != 0):
                self.state = 819
                self.course_list()


            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 822
                self.tag()


            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 825
                self.display()
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoncourseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_noncourse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoncourse" ):
                listener.enterNoncourse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoncourse" ):
                listener.exitNoncourse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoncourse" ):
                return visitor.visitNoncourse(self)
            else:
                return visitor.visitChildren(self)




    def noncourse(self):

        localctx = ReqBlockParser.NoncourseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_noncourse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(ReqBlockParser.NUMBER)
            self.state = 832
            self.match(ReqBlockParser.NONCOURSE)
            self.state = 833
            self.match(ReqBlockParser.LP)
            self.state = 834
            self.expression(0)
            self.state = 835
            self.match(ReqBlockParser.RP)
            self.state = 837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 836
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(ReqBlockParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_optional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional" ):
                listener.enterOptional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional" ):
                listener.exitOptional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional" ):
                return visitor.visitOptional(self)
            else:
                return visitor.visitChildren(self)




    def optional(self):

        localctx = ReqBlockParser.OptionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_optional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(ReqBlockParser.OPTIONAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemarkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMARK(self):
            return self.getToken(ReqBlockParser.REMARK, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_remark

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemark" ):
                listener.enterRemark(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemark" ):
                listener.exitRemark(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemark" ):
                return visitor.visitRemark(self)
            else:
                return visitor.visitChildren(self)




    def remark(self):

        localctx = ReqBlockParser.RemarkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_remark)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(ReqBlockParser.REMARK)
            self.state = 842
            self.string()
            self.state = 844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 843
                self.match(ReqBlockParser.SEMICOLON)


            self.state = 849
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 846
                    self.remark() 
                self.state = 851
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_completeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_COMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_COMPLETE, 0)

        def RULE_INCOMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_INCOMPLETE, 0)

        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_complete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_complete" ):
                listener.enterRule_complete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_complete" ):
                listener.exitRule_complete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_complete" ):
                return visitor.visitRule_complete(self)
            else:
                return visitor.visitChildren(self)




    def rule_complete(self):

        localctx = ReqBlockParser.Rule_completeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_rule_complete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.RULE_COMPLETE or _la==ReqBlockParser.RULE_INCOMPLETE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 853
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuletagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_TAG(self):
            return self.getToken(ReqBlockParser.RULE_TAG, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_ruletag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuletag" ):
                listener.enterRuletag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuletag" ):
                listener.exitRuletag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuletag" ):
                return visitor.visitRuletag(self)
            else:
                return visitor.visitChildren(self)




    def ruletag(self):

        localctx = ReqBlockParser.RuletagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_ruletag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(ReqBlockParser.RULE_TAG)
            self.state = 857
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SamediscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAME_DISC(self):
            return self.getToken(ReqBlockParser.SAME_DISC, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_samedisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSamedisc" ):
                listener.enterSamedisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSamedisc" ):
                listener.exitSamedisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSamedisc" ):
                return visitor.visitSamedisc(self)
            else:
                return visitor.visitChildren(self)




    def samedisc(self):

        localctx = ReqBlockParser.SamediscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_samedisc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(ReqBlockParser.SAME_DISC)
            self.state = 860
            self.expression(0)
            self.state = 862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 861
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShareContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHARE(self):
            return self.getToken(ReqBlockParser.SHARE, 0)

        def DONT_SHARE(self):
            return self.getToken(ReqBlockParser.DONT_SHARE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShare" ):
                listener.enterShare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShare" ):
                listener.exitShare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShare" ):
                return visitor.visitShare(self)
            else:
                return visitor.visitChildren(self)




    def share(self):

        localctx = ReqBlockParser.ShareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_share)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.DONT_SHARE or _la==ReqBlockParser.SHARE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 865
                self.match(ReqBlockParser.NUMBER)
                self.state = 866
                _la = self._input.LA(1)
                if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 869
                self.expression(0)


            self.state = 873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 872
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(ReqBlockParser.STANDALONE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_standalone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalone" ):
                listener.enterStandalone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalone" ):
                listener.exitStandalone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandalone" ):
                return visitor.visitStandalone(self)
            else:
                return visitor.visitChildren(self)




    def standalone(self):

        localctx = ReqBlockParser.StandaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_standalone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(ReqBlockParser.STANDALONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = ReqBlockParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(ReqBlockParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.QUOTE)
            else:
                return self.getToken(ReqBlockParser.QUOTE, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = ReqBlockParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_symbol)
        try:
            self.state = 883
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.match(ReqBlockParser.SYMBOL)
                pass
            elif token in [ReqBlockParser.QUOTE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 880
                self.match(ReqBlockParser.QUOTE)
                self.state = 881
                self.match(ReqBlockParser.SYMBOL)
                self.state = 882
                self.match(ReqBlockParser.QUOTE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAG(self):
            return self.getToken(ReqBlockParser.TAG, 0)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag" ):
                listener.enterTag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag" ):
                listener.exitTag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTag" ):
                return visitor.visitTag(self)
            else:
                return visitor.visitChildren(self)




    def tag(self):

        localctx = ReqBlockParser.TagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_tag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(ReqBlockParser.TAG)
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.EQ:
                self.state = 886
                self.match(ReqBlockParser.EQ)
                self.state = 887
                _la = self._input.LA(1)
                if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ReqBlockParser.NUMBER - 73)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 73)) | (1 << (ReqBlockParser.SYMBOL - 73)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(ReqBlockParser.UNDER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def full_course(self):
            return self.getTypedRuleContext(ReqBlockParser.Full_courseContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_under

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnder" ):
                listener.enterUnder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnder" ):
                listener.exitUnder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnder" ):
                return visitor.visitUnder(self)
            else:
                return visitor.visitChildren(self)




    def under(self):

        localctx = ReqBlockParser.UnderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_under)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(ReqBlockParser.UNDER)
            self.state = 891
            self.match(ReqBlockParser.NUMBER)
            self.state = 892
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 893
            self.full_course()
            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 894
                self.or_list()


            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 897
                self.display()
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 903
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def WITH(self):
            return self.getToken(ReqBlockParser.WITH, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = ReqBlockParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(ReqBlockParser.LP)
            self.state = 906
            self.match(ReqBlockParser.WITH)
            self.state = 907
            self.expression(0)
            self.state = 908
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_course(self):
            return self.getTypedRuleContext(ReqBlockParser.Full_courseContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def QUESTION_MARK(self):
            return self.getToken(ReqBlockParser.QUESTION_MARK, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,i)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def relational_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Relational_opContext,0)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ReqBlockParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 911
                self.full_course()
                pass

            elif la_ == 2:
                self.state = 912
                self.discipline()
                pass

            elif la_ == 3:
                self.state = 913
                self.match(ReqBlockParser.NUMBER)
                pass

            elif la_ == 4:
                self.state = 914
                self.match(ReqBlockParser.QUESTION_MARK)
                pass

            elif la_ == 5:
                self.state = 915
                self.match(ReqBlockParser.SYMBOL)
                pass

            elif la_ == 6:
                self.state = 916
                self.string()
                pass

            elif la_ == 7:
                self.state = 917
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass

            elif la_ == 8:
                self.state = 918
                self.match(ReqBlockParser.LP)
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.NONCOURSE:
                    self.state = 919
                    self.match(ReqBlockParser.NONCOURSE)


                self.state = 922
                self.expression(0)
                self.state = 923
                self.match(ReqBlockParser.RP)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 940
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 938
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                    if la_ == 1:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 927
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 928
                        self.relational_op()
                        self.state = 929
                        self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 931
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 932
                        self.logical_op()
                        self.state = 933
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 935
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 936
                        self.match(ReqBlockParser.COMMA)
                        self.state = 937
                        self.expression(10)
                        pass

             
                self.state = 942
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Logical_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_logical_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_op" ):
                listener.enterLogical_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_op" ):
                listener.exitLogical_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_op" ):
                return visitor.visitLogical_op(self)
            else:
                return visitor.visitChildren(self)




    def logical_op(self):

        localctx = ReqBlockParser.Logical_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_logical_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.OR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def GE(self):
            return self.getToken(ReqBlockParser.GE, 0)

        def GT(self):
            return self.getToken(ReqBlockParser.GT, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def ISNT(self):
            return self.getToken(ReqBlockParser.ISNT, 0)

        def LE(self):
            return self.getToken(ReqBlockParser.LE, 0)

        def LT(self):
            return self.getToken(ReqBlockParser.LT, 0)

        def NE(self):
            return self.getToken(ReqBlockParser.NE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_op" ):
                return visitor.visitRelational_op(self)
            else:
                return visitor.visitChildren(self)




    def relational_op(self):

        localctx = ReqBlockParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (ReqBlockParser.IS - 68)) | (1 << (ReqBlockParser.ISNT - 68)) | (1 << (ReqBlockParser.EQ - 68)) | (1 << (ReqBlockParser.GE - 68)) | (1 << (ReqBlockParser.GT - 68)) | (1 << (ReqBlockParser.LE - 68)) | (1 << (ReqBlockParser.LT - 68)) | (1 << (ReqBlockParser.NE - 68)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_orContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_or" ):
                listener.enterList_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_or" ):
                listener.exitList_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_or" ):
                return visitor.visitList_or(self)
            else:
                return visitor.visitChildren(self)




    def list_or(self):

        localctx = ReqBlockParser.List_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_list_or)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_andContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(ReqBlockParser.PLUS, 0)

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_and" ):
                listener.enterList_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_and" ):
                listener.exitList_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_and" ):
                return visitor.visitList_and(self)
            else:
                return visitor.visitChildren(self)




    def list_and(self):

        localctx = ReqBlockParser.List_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_list_and)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.PLUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[66] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         




