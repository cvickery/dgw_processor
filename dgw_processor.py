#! /usr/local/bin/python3
""" This is the module that converts a parsed requirement block into a serializable data structure.
"""
import os
import sys
import argparse

from antlr4 import *

from ReqBlockLexer import ReqBlockLexer
from ReqBlockParser import ReqBlockParser
from ReqBlockListener import ReqBlockListener

from closeable_objects import dict2html, items2html

from dgw_utils import catalog_years, colleges, ScribeSection, get_number, class_or_credit

DEBUG = os.getenv('DEBUG_DGW_PROCESSOR')


# Class DGWProcessor(ReqBlockListener)
# =================================================================================================
# The ReqBlockListener module is generated by Antlr4 from the grammar in ReqBlock.g4. This class
# provides the method overrides for the stubs provided in ReqBlockListener.
class DGWProcessor(ReqBlockListener):
  def __init__(self, institution, block_type, block_value, title, period_start, period_stop,
               requirement_text):
    """ Lists of Requirements, ShareLists, and possibly other named tuples for the Head and Body
        sections of a Requirement Block are populated as the parse tree is walked for a particular
        Block.
    """

    if DEBUG:
      print(f'*** DGWProcessor({institution}, {block_type}, {block_value})', file=sys.stderr)
    self.institution = institution
    self.block_type = block_type
    self.block_type_str = (block_type.lower()
                           .replace('conc', 'concentration')
                           .replace('other', 'other requirement'))
    self.block_value = block_value
    self.title = title
    self.catalog_years = catalog_years(period_start, period_stop)
    self.period_stop = period_stop
    self.institution_name = colleges[institution]
    self.requirement_text = requirement_text
    self.scribe_section = ScribeSection.NONE
    self.sections = [None, [], []]  # NONE, HEAD, BODY

  @property
  def html(self):
    # Add line numbers to requirements text for development purposes.
    num_lines = self.requirement_text.count('\n')
    lines_pre = '<pre class="line-numbers">'
    for line in range(num_lines):
      lines_pre += f'{line + 1:03d}  \n'
    lines_pre += '</pre>'

    html_body = f"""
<h1>{self.institution_name} {self.title}</h1>
<p>Requirements for Catalog Years
{self.catalog_years.text}
</p>
<section>
  <h1 class="closer">Degreeworks Code</h1>
  <div>
    <hr>
    <section class=with-numbers>
      {lines_pre}
      <pre>{self.requirement_text.replace('<','&lt;')}</pre>
    </section
  </div>
</section>
<section>
  <h1 class="closer">Extracted Requirements</h1>
  <div>
    <hr>
    {items2html(self.sections[ScribeSection.HEAD.value], 'Head Item')}
    {items2html(self.sections[ScribeSection.BODY.value], 'Body Item')}
  </div>
</section
"""

    return html_body

  # ==============================================================================================#
  # ReqBlockListener Overrides                                                                    #
  # ==============================================================================================#

  # enterReq_block(self, ctx: ReqBlockParser.Req_blockContext)
  # -----------------------------------------------------------------------------------------------
  def enterReq_block(self, ctx: ReqBlockParser.Req_blockContext):
    """
    """
    if DEBUG:
      print('*** enterReq_block()', file=sys.stderr)

  # enterHead(self, ctx: ReqBlockParser.HeadContext)
  # -----------------------------------------------------------------------------------------------
  def enterHead(self, ctx: ReqBlockParser.HeadContext):
    """
    """
    if DEBUG:
      print('*** enterHead()', file=sys.stderr)
    self.scribe_section = ScribeSection.HEAD

  # enterBody(self, ctx: ReqBlockParser.BodyContext)
  # -----------------------------------------------------------------------------------------------
  def enterBody(self, ctx: ReqBlockParser.BodyContext):
    """
    """
    if DEBUG:
      print('*** enterBody()', file=sys.stderr)
    self.scribe_section = ScribeSection.BODY

  # enterCourse_list(self, ctx: ReqBlockParser.Course_listContext)
  # -----------------------------------------------------------------------------------------------
  def enterCourse_list(self, ctx: ReqBlockParser.Course_listContext):
    """
    """
    if DEBUG:
      print('*** enterCourse_list', file=sys.stderr)
    cur_ctx = ctx
    while cur_ctx:
      print(type(cur_ctx).__name__.replace('Context', ''), file=sys.stderr, end=' <= ')
      cur_ctx = cur_ctx.parentCtx
    print(file=sys.stderr)

  # enterFull_course(self, ctx: ReqBlockParser.Full_courseContext)
  # -----------------------------------------------------------------------------------------------
  def enterFull_course(self, ctx: ReqBlockParser.Full_courseContext):
    """
    """
    if DEBUG:
      print('*** enterFull_course()', file=sys.stderr)

  # enterCourse_item(self, ctx: ReqBlockParser.Course_itemContext)
  # -----------------------------------------------------------------------------------------------
  def enterCourse_item(self, ctx: ReqBlockParser.Course_itemContext):
    """
    """
    if DEBUG:
      print('*** enterCourse_item()', file=sys.stderr)

  # enterAnd_list(self, ctx: ReqBlockParser.And_listContext)
  # -----------------------------------------------------------------------------------------------
  def enterAnd_list(self, ctx: ReqBlockParser.And_listContext):
    """
    """
    if DEBUG:
      print('*** enterAnd_list()', file=sys.stderr)

  # enterOr_list(self, ctx: ReqBlockParser.Or_listContext)
  # -----------------------------------------------------------------------------------------------
  def enterOr_list(self, ctx: ReqBlockParser.Or_listContext):
    """
    """
    if DEBUG:
      print('*** enterOr_list()', file=sys.stderr)

  # enterDiscipline(self, ctx: ReqBlockParser.DisciplineContext)
  # -----------------------------------------------------------------------------------------------
  def enterDiscipline(self, ctx: ReqBlockParser.DisciplineContext):
    """
    """
    if DEBUG:
      print('*** enterDiscipline()', file=sys.stderr)

  # enterCatalog_number(self, ctx: ReqBlockParser.Catalog_numberContext)
  # -----------------------------------------------------------------------------------------------
  def enterCatalog_number(self, ctx: ReqBlockParser.Catalog_numberContext):
    """
    """
    if DEBUG:
      print('*** enterCatalog_number()', file=sys.stderr)

  # enterCourse_qualifier(self, ctx: ReqBlockParser.Course_qualifierContext)
  # -----------------------------------------------------------------------------------------------
  def enterCourse_qualifier(self, ctx: ReqBlockParser.Course_qualifierContext):
    """
    """
    if DEBUG:
      print('*** enterCourse_qualifier()', file=sys.stderr)

  # enterIf_then(self, ctx: ReqBlockParser.If_thenContext)
  # -----------------------------------------------------------------------------------------------
  def enterIf_then(self, ctx: ReqBlockParser.If_thenContext):
    """
    """
    if DEBUG:
      print('*** enterIf_then()', file=sys.stderr)

  # enterElse_clause(self, ctx: ReqBlockParser.Else_clauseContext)
  # -----------------------------------------------------------------------------------------------
  def enterElse_clause(self, ctx: ReqBlockParser.Else_clauseContext):
    """
    """
    if DEBUG:
      print('*** enterElse_clause()', file=sys.stderr)

  # enterStmt_group(self, ctx: ReqBlockParser.Stmt_groupContext)
  # -----------------------------------------------------------------------------------------------
  def enterStmt_group(self, ctx: ReqBlockParser.Stmt_groupContext):
    """
    """
    if DEBUG:
      print('*** enterStmt_group()', file=sys.stderr)

  # enterStmt(self, ctx: ReqBlockParser.StmtContext)
  # -----------------------------------------------------------------------------------------------
  def enterStmt(self, ctx: ReqBlockParser.StmtContext):
    """
    """
    if DEBUG:
      print('*** enterStmt()', file=sys.stderr)

  # enterBegin_if(self, ctx: ReqBlockParser.Begin_ifContext)
  # -----------------------------------------------------------------------------------------------
  def enterBegin_if(self, ctx: ReqBlockParser.Begin_ifContext):
    """
    """
    if DEBUG:
      print('*** enterBegin_if()', file=sys.stderr)

  # enterEnd_if(self, ctx: ReqBlockParser.End_ifContext)
  # -----------------------------------------------------------------------------------------------
  def enterEnd_if(self, ctx: ReqBlockParser.End_ifContext):
    """
    """
    if DEBUG:
      print('*** enterEnd_if()', file=sys.stderr)

  # enterGroup(self, ctx: ReqBlockParser.GroupContext)
  # -----------------------------------------------------------------------------------------------
  def enterGroup(self, ctx: ReqBlockParser.GroupContext):
    """
    """
    if DEBUG:
      print('*** enterGroup()', file=sys.stderr)

  # enterGroup_list(self, ctx: ReqBlockParser.Group_listContext)
  # -----------------------------------------------------------------------------------------------
  def enterGroup_list(self, ctx: ReqBlockParser.Group_listContext):
    """
    """
    if DEBUG:
      print('*** enterGroup_list()', file=sys.stderr)

  # enterGroup_item(self, ctx: ReqBlockParser.Group_itemContext)
  # -----------------------------------------------------------------------------------------------
  def enterGroup_item(self, ctx: ReqBlockParser.Group_itemContext):
    """
    """
    if DEBUG:
      print('*** enterGroup_item()', file=sys.stderr)

  # enterGroup_qualifier(self, ctx: ReqBlockParser.Group_qualifierContext)
  # -----------------------------------------------------------------------------------------------
  def enterGroup_qualifier(self, ctx: ReqBlockParser.Group_qualifierContext):
    """
    """
    if DEBUG:
      print('*** enterGroup_qualifier()', file=sys.stderr)

  # enterSubset(self, ctx: ReqBlockParser.SubsetContext)
  # -----------------------------------------------------------------------------------------------
  def enterSubset(self, ctx: ReqBlockParser.SubsetContext):
    """
    """
    if DEBUG:
      print('*** enterSubset()', file=sys.stderr)

  # enterSubset_qualifier(self, ctx: ReqBlockParser.Subset_qualifierContext)
  # -----------------------------------------------------------------------------------------------
  def enterSubset_qualifier(self, ctx: ReqBlockParser.Subset_qualifierContext):
    """
    """
    if DEBUG:
      print('*** enterSubset_qualifier()', file=sys.stderr)

  # enterBlock(self, ctx: ReqBlockParser.BlockContext)
  # -----------------------------------------------------------------------------------------------
  def enterBlock(self, ctx: ReqBlockParser.BlockContext):
    """
    """
    if DEBUG:
      print('*** enterBlock()', file=sys.stderr)

  # enterBlocktype(self, ctx: ReqBlockParser.BlocktypeContext)
  # -----------------------------------------------------------------------------------------------
  def enterBlocktype(self, ctx: ReqBlockParser.BlocktypeContext):
    """
    """
    if DEBUG:
      print('*** enterBlocktype()', file=sys.stderr)

  # enterAllow_clause(self, ctx: ReqBlockParser.Allow_clauseContext)
  # -----------------------------------------------------------------------------------------------
  def enterAllow_clause(self, ctx: ReqBlockParser.Allow_clauseContext):
    """
    """
    if DEBUG:
      print('*** enterAllow_clause()', file=sys.stderr)

  # enterArea_list(self, ctx: ReqBlockParser.Area_listContext)
  # -----------------------------------------------------------------------------------------------
  def enterArea_list(self, ctx: ReqBlockParser.Area_listContext):
    """
    """
    if DEBUG:
      print('*** enterArea_list()', file=sys.stderr)

  # enterArea_element(self, ctx: ReqBlockParser.Area_elementContext)
  # -----------------------------------------------------------------------------------------------
  def enterArea_element(self, ctx: ReqBlockParser.Area_elementContext):
    """
    """
    if DEBUG:
      print('*** enterArea_element()', file=sys.stderr)

  # enterClass_credit(self, ctx: ReqBlockParser.Class_creditContext)
  # -----------------------------------------------------------------------------------------------
  def enterClass_credit(self, ctx: ReqBlockParser.Class_creditContext):
    """
    """
    if DEBUG:
      print('*** enterClass_credit()', file=sys.stderr)

  # enterCopy_rules(self, ctx: ReqBlockParser.Copy_rulesContext)
  # -----------------------------------------------------------------------------------------------
  def enterCopy_rules(self, ctx: ReqBlockParser.Copy_rulesContext):
    """
    """
    if DEBUG:
      print('*** enterCopy_rules()', file=sys.stderr)

  # enterExcept_clause(self, ctx: ReqBlockParser.Except_clauseContext)
  # -----------------------------------------------------------------------------------------------
  def enterExcept_clause(self, ctx: ReqBlockParser.Except_clauseContext):
    """
    """
    if DEBUG:
      print('*** enterExcept_clause()', file=sys.stderr)

  # enterIncluding_clause(self, ctx: ReqBlockParser.Including_clauseContext)
  # -----------------------------------------------------------------------------------------------
  def enterIncluding_clause(self, ctx: ReqBlockParser.Including_clauseContext):
    """
    """
    if DEBUG:
      print('*** enterIncluding_clause()', file=sys.stderr)

  # enterLabel(self, ctx: ReqBlockParser.LabelContext)
  # -----------------------------------------------------------------------------------------------
  def enterLabel(self, ctx: ReqBlockParser.LabelContext):
    """
    """
    if DEBUG:
      print('*** enterLabel()', file=sys.stderr)

  # enterLabel_tag(self, ctx: ReqBlockParser.Label_tagContext)
  # -----------------------------------------------------------------------------------------------
  def enterLabel_tag(self, ctx: ReqBlockParser.Label_tagContext):
    """
    """
    if DEBUG:
      print('*** enterLabel_tag()', file=sys.stderr)

  # enterLastres(self, ctx: ReqBlockParser.LastresContext)
  # -----------------------------------------------------------------------------------------------
  def enterLastres(self, ctx: ReqBlockParser.LastresContext):
    """
    """
    if DEBUG:
      print('*** enterLastres()', file=sys.stderr)

  # enterMaxclass(self, ctx: ReqBlockParser.MaxclassContext)
  # -----------------------------------------------------------------------------------------------
  def enterMaxclass(self, ctx: ReqBlockParser.MaxclassContext):
    """
    """
    if DEBUG:
      print('*** enterMaxclass()', file=sys.stderr)

  # enterMaxcredit(self, ctx: ReqBlockParser.MaxcreditContext)
  # -----------------------------------------------------------------------------------------------
  def enterMaxcredit(self, ctx: ReqBlockParser.MaxcreditContext):
    """
    """
    if DEBUG:
      print('*** enterMaxcredit()', file=sys.stderr)

  # enterMaxpassfail(self, ctx: ReqBlockParser.MaxpassfailContext)
  # -----------------------------------------------------------------------------------------------
  def enterMaxpassfail(self, ctx: ReqBlockParser.MaxpassfailContext):
    """
    """
    if DEBUG:
      print('*** enterMaxpassfail()', file=sys.stderr)

  # enterMaxperdisc(self, ctx: ReqBlockParser.MaxperdiscContext)
  # -----------------------------------------------------------------------------------------------
  def enterMaxperdisc(self, ctx: ReqBlockParser.MaxperdiscContext):
    """
    """
    if DEBUG:
      print('*** enterMaxperdisc()', file=sys.stderr)

  # enterMaxspread(self, ctx: ReqBlockParser.MaxspreadContext)
  # -----------------------------------------------------------------------------------------------
  def enterMaxspread(self, ctx: ReqBlockParser.MaxspreadContext):
    """
    """
    if DEBUG:
      print('*** enterMaxspread()', file=sys.stderr)

  # enterMaxterm(self, ctx: ReqBlockParser.MaxtermContext)
  # -----------------------------------------------------------------------------------------------
  def enterMaxterm(self, ctx: ReqBlockParser.MaxtermContext):
    """
    """
    if DEBUG:
      print('*** enterMaxterm()', file=sys.stderr)

  # enterMaxtransfer(self, ctx: ReqBlockParser.MaxtransferContext)
  # -----------------------------------------------------------------------------------------------
  def enterMaxtransfer(self, ctx: ReqBlockParser.MaxtransferContext):
    """
    """
    if DEBUG:
      print('*** enterMaxtransfer()', file=sys.stderr)

  # enterMinarea(self, ctx: ReqBlockParser.MinareaContext)
  # -----------------------------------------------------------------------------------------------
  def enterMinarea(self, ctx: ReqBlockParser.MinareaContext):
    """
    """
    if DEBUG:
      print('*** enterMinarea()', file=sys.stderr)

  # enterMinclass(self, ctx: ReqBlockParser.MinclassContext)
  # -----------------------------------------------------------------------------------------------
  def enterMinclass(self, ctx: ReqBlockParser.MinclassContext):
    """
    """
    if DEBUG:
      print('*** enterMinclass()', file=sys.stderr)

  # enterMincredit(self, ctx: ReqBlockParser.MincreditContext)
  # -----------------------------------------------------------------------------------------------
  def enterMincredit(self, ctx: ReqBlockParser.MincreditContext):
    """
    """
    if DEBUG:
      print('*** enterMincredit()', file=sys.stderr)

  # enterMingpa(self, ctx: ReqBlockParser.MingpaContext)
  # -----------------------------------------------------------------------------------------------
  def enterMingpa(self, ctx: ReqBlockParser.MingpaContext):
    """
    """
    if DEBUG:
      print('*** enterMingpa()', file=sys.stderr)

  # enterMingrade(self, ctx: ReqBlockParser.MingradeContext)
  # -----------------------------------------------------------------------------------------------
  def enterMingrade(self, ctx: ReqBlockParser.MingradeContext):
    """
    """
    if DEBUG:
      print('*** enterMingrade()', file=sys.stderr)

  # enterMinperdisc(self, ctx: ReqBlockParser.MinperdiscContext)
  # -----------------------------------------------------------------------------------------------
  def enterMinperdisc(self, ctx: ReqBlockParser.MinperdiscContext):
    """
    """
    if DEBUG:
      print('*** enterMinperdisc()', file=sys.stderr)

  # enterMinres(self, ctx: ReqBlockParser.MinresContext)
  # -----------------------------------------------------------------------------------------------
  def enterMinres(self, ctx: ReqBlockParser.MinresContext):
    """
    """
    if DEBUG:
      print('*** enterMinres()', file=sys.stderr)

  # enterMinspread(self, ctx: ReqBlockParser.MinspreadContext)
  # -----------------------------------------------------------------------------------------------
  def enterMinspread(self, ctx: ReqBlockParser.MinspreadContext):
    """
    """
    if DEBUG:
      print('*** enterMinspread()', file=sys.stderr)

  # enterNoncourse(self, ctx: ReqBlockParser.NoncourseContext)
  # -----------------------------------------------------------------------------------------------
  def enterNoncourse(self, ctx: ReqBlockParser.NoncourseContext):
    """
    """
    if DEBUG:
      print('*** enterNoncourse()', file=sys.stderr)

  # enterOptional(self, ctx: ReqBlockParser.OptionalContext)
  # -----------------------------------------------------------------------------------------------
  def enterOptional(self, ctx: ReqBlockParser.OptionalContext):
    """
    """
    if DEBUG:
      print('*** enterOptional()', file=sys.stderr)

  # enterRemark(self, ctx: ReqBlockParser.RemarkContext)
  # -----------------------------------------------------------------------------------------------
  def enterRemark(self, ctx: ReqBlockParser.RemarkContext):
    """
    """
    if DEBUG:
      print('*** enterRemark()', file=sys.stderr)

  # enterRule_complete(self, ctx: ReqBlockParser.Rule_completeContext)
  # -----------------------------------------------------------------------------------------------
  def enterRule_complete(self, ctx: ReqBlockParser.Rule_completeContext):
    """
    """
    if DEBUG:
      print('*** enterRule_complete()', file=sys.stderr)

  # enterRuletag(self, ctx: ReqBlockParser.RuletagContext)
  # -----------------------------------------------------------------------------------------------
  def enterRuletag(self, ctx: ReqBlockParser.RuletagContext):
    """
    """
    if DEBUG:
      print('*** enterRuletag()', file=sys.stderr)

  # enterSamedisc(self, ctx: ReqBlockParser.SamediscContext)
  # -----------------------------------------------------------------------------------------------
  def enterSamedisc(self, ctx: ReqBlockParser.SamediscContext):
    """
    """
    if DEBUG:
      print('*** enterSamedisc()', file=sys.stderr)

  # enterShare(self, ctx: ReqBlockParser.ShareContext)
  # -----------------------------------------------------------------------------------------------
  def enterShare(self, ctx: ReqBlockParser.ShareContext):
    """
    """
    if DEBUG:
      print('*** enterShare()', file=sys.stderr)

  # enterStandalone(self, ctx: ReqBlockParser.StandaloneContext)
  # -----------------------------------------------------------------------------------------------
  def enterStandalone(self, ctx: ReqBlockParser.StandaloneContext):
    """
    """
    if DEBUG:
      print('*** enterStandalone()', file=sys.stderr)

  # enterTag(self, ctx: ReqBlockParser.TagContext)
  # -----------------------------------------------------------------------------------------------
  def enterTag(self, ctx: ReqBlockParser.TagContext):
    """
    """
    if DEBUG:
      print('*** enterTag()', file=sys.stderr)

  # enterUnder(self, ctx: ReqBlockParser.UnderContext)
  # -----------------------------------------------------------------------------------------------
  def enterUnder(self, ctx: ReqBlockParser.UnderContext):
    """
    """
    if DEBUG:
      print('*** enterUnder()', file=sys.stderr)

  # enterWith_clause(self, ctx: ReqBlockParser.With_clauseContext)
  # -----------------------------------------------------------------------------------------------
  def enterWith_clause(self, ctx: ReqBlockParser.With_clauseContext):
    """
    """
    if DEBUG:
      print('*** enterWith_clause()', file=sys.stderr)

  # enterExpression(self, ctx: ReqBlockParser.ExpressionContext)
  # -----------------------------------------------------------------------------------------------
  def enterExpression(self, ctx: ReqBlockParser.ExpressionContext):
    """
    """
    if DEBUG:
      print('*** enterExpression()', file=sys.stderr)

  # enterLogical_op(self, ctx: ReqBlockParser.Logical_opContext)
  # -----------------------------------------------------------------------------------------------
  def enterLogical_op(self, ctx: ReqBlockParser.Logical_opContext):
    """
    """
    if DEBUG:
      print('*** enterLogical_op()', file=sys.stderr)

  # enterRelational_op(self, ctx: ReqBlockParser.Relational_opContext)
  # -----------------------------------------------------------------------------------------------
  def enterRelational_op(self, ctx: ReqBlockParser.Relational_opContext):
    """
    """
    if DEBUG:
      print('*** enterRelational_op()', file=sys.stderr)

  # enterList_or(self, ctx: ReqBlockParser.List_orContext)
  # -----------------------------------------------------------------------------------------------
  def enterList_or(self, ctx: ReqBlockParser.List_orContext):
    """
    """
    if DEBUG:
      print('*** enterList_or()', file=sys.stderr)

  # enterList_and(self, ctx: ReqBlockParser.List_andContext)
  # -----------------------------------------------------------------------------------------------
  def enterList_and(self, ctx: ReqBlockParser.List_andContext):
    """
    """
    if DEBUG:
      print('*** enterList_and()', file=sys.stderr)
