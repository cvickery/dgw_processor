2020-10-03
There have been some changes to the grammar to make the handlers of the various top-level statements
cleaner. Whenever something appears with a + or * (or maybe even ? (?))quantifier, it shows up as a
list, even if there can really be only one.

What's prompting this note is the way lists of courses appear. There are a number of min/max rules
that (might) have course lists, but it's also the case that a course list can simply appear as a
rule, essentially equivalent to being a min-courses rule. "MinClass 2 in ABC 123, 456" can be
written as "ABC, 456". As previously established, the set of qualifiers for course lists in the head
is different from the set that can be used in the body. So basically, the handlers have to deal with
standalone lists; lists that are part of min/max rules; lists that are inclusion or exclusion
qualifiers of other lists; and qualifier sets that are different in the head and body of a block.

2020-09-07

Course lists and their qualifiers all look like they are being processed okay. Running dgw_driver
with the -p (parse) option gives lists of course_list objects, each of which includes lists of
scribed, active, inactive, and missing courses, as well as qualifiers with their details.
  Expressions and With clauses in course lists and qualfiers are not interpreted (yet).

The next step, on the way to generating lists of MUST, MAY, and CANNOT courses, is to handle the
contexts in which course lists can occur: subsets, blocks, areas, and if-then. Should this be done
from the top down (parser walks the parse tree and calls implementations as the contexts are
encountered), or bottom-up (for each course list, search up to the context to the enclosing
context.) The former would make sense, and in fact, the current implementation walks the entire tree
to find each course list, which is interpreted as described above. The trade-off is that it would
be more efficient to do everything top-down (we're walking the whole tree already to find all those
course_lists), but searching each top-level context to find all the course lists instead seems risky
(might miss some contexts in which course lists occur), and would require writing code for drilling
down to find the lists, which seems intuitively like a lot of situation-specific logic. So the
current plan is to do it bottom up, building on what already works.

For each course list, search up its context tree to find the enclosing context: group, subset,
if-then (, etc.?) and to capture those contexts. For example, if the enclosing context is "one group
from the following list", memoize each group and its course list in the list of groups. Not sure I
like this idea so much. I'll still have to go back and do top-down for requirements that don't have
course lists, anyway. So the real issue is to make sure that every course list found in the current
implementation is also covered by the top-down scan.

Conclusion: top-down; check course_list coverage when scan completes.

2020-07-22

Consider changing name of Body section to Rules, but not sure it's really a good change because the
object in the Head section are "rules" too.

    There are two types of qualifiers: Header qualifiers appear in the Header section of the block
    and pertain to all rules in the block body. Rule qualifiers appear in the Body section of the
    block and pertain only to the rule with which they are associated.

  So “rule” covers a multitude of sins. But Header and Body are Proper Terms in the docs.

There must be two different types of course lists: _head and _body. What would
be a course_list qualifier in the Body would be a standalone rule in the Head. But a single
build_course_list function can handle both; it's just the .g4 that has to be fixed so MaxPassFail is
not used as a list qualifier in the head, for example.

I had the following objects in both the head and body sections
  class_credit
  maxperdisc
  minclass
  minperdisc

Items that can have different meanings in head and body according to the docs:
  AllBlocks     Scope of ShareWith qualifier
  ThisBlock     Scope of ShareWith qualifier

  And           Logical op in if_expression; connect classes AND credits; list_op in course list
  Or            Logical op or qualifer connector

  At            Followed by a location (campus)

  Classes       Course list not allowed in header. Docs say same for body, but that must be wrong.
  Credits       Like classes, including the documentation error.

  College       Not used at CUNY(?)
  Decide        “you have up to nine ways to tell the auditor how to distinguish one class as being
                more valuable than another”
  Degree        ShareWith or symbol in if_expression

  Conc          “When Conc is used in ShareWith, Blocktype, or Block it refers to the Conc block.
                When used in an If-statement it refers to the concentration on the student’s
                curriculum.”
  Libl          Like Conc
  Major         Like Conc and Libl
  Minor         Like Conc, Libl, and Major
  Other         Like Conc, Libl, Major, and Minor
  Program       Like Conc, Libl, Major, Minor, and Other
  School        Like Conc, Libl, Major, Minor, Other, and Program
  Spec          Like Conc, Libl, Major, Minor, Other, Program, and School (“specialization”)

  DontShare     Standalone in Header; list qualifier in body
  MaxPassFail   Standalone in Header; list qualifier in body
  MaxPerDisc    Standalone in Header; list qualifier in body
  MaxTerm       Standalone in Header; list qualifier in body
  MinTerm       Standalone in Header; list qualifier in body
  NonExclusive  Standalone in Header; list qualifier in body
  SameDisc      Standalone in Header; list qualifier in body (equate two disciplines)
  ShareWith     Standalone in Header; list qualifier in body

#  MaxTransfer   In head it can follow either a course list or just a list of symbols

  MinClasses    Standalone in Header; list qualifier followed by course list in body
  MinCredits    Standalone in Header; list qualifier followed by course list in Body

  MinGpa        Can be followed by a course list in Header; not specified if allowed in Body

  ProxyAdvice   Ignored by dgw_processor

Course list qualifiers that may appear only in Body:
  MaxSpread
  MinAreas


2020-07-23
  When there is a wildcard in a course_item, any WITH clause has to be distributed across its
  expansion when looking up active courses.
  Would it make more sense to differentiate between if_expression and other types of expression?
    More to the point, is it necessary?
